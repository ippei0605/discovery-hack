{
  "docs": [
    {
      "_id": "app_settings",
      "name": "Agile Chatbot"
    },
    {
      "_id": "agile_manifesto_Background0",
      "message": "アジャイル宣言の背後にある原則が<a target=\"_blank\" href=\"http://agilemanifesto.org/iso/ja/principles.html\">こちら</a> に記載されています。",
      "questions": [
        "アジャイル開発のルールとは？",
        "アジャイル開発の原則とは？",
        "",
        "",
        "",
        "",
        "",
        "",
        "アジャイル宣言の背後にある原則がa target=_blank href=http://agilemanifesto.org/iso/ja/principles.htmlこちら/a に記載されています。"
      ]
    },
    {
      "_id": "agile_manifesto_Background1",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。」\n・・・こちらが核になっています。そのため、この後はこのように述べられています。「要求の変更はたとえ開発の後期であっても歓迎します。変化を味方につけることによって、お客様の競争力を引き上げます。」「動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。」",
      "questions": [
        "アジャイルで一番大切なことは？",
        "アジャイルの基本的な考え方は？",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。」・・・こちらが核になっています。そのため、この後はこのように述べられています。「要求の変更はたとえ開発の後期であっても歓迎します。変化を味方につけることによって、お客様の競争力を引き上げます。」「動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。」"
      ]
    },
    {
      "_id": "agile_manifesto_Background10",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「シンプルさ（ムダなく作れる量を最大限にすること）が本質です。」\n・・・余計な機能はないほうが、変化に柔軟なシステムになります。必要で価値のあるものを作り、無駄なものをは作らない。そう、アジャイルならね。",
      "questions": [
        "効果的にシステムを作るにはどうしたらよい？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「シンプルさ（ムダなく作れる量を最大限にすること）が本質です。」・・・余計な機能はないほうが、変化に柔軟なシステムになります。必要で価値のあるものを作り、無駄なものをは作らない。そう、アジャイルならね。"
      ]
    },
    {
      "_id": "agile_manifesto_Background11",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。」\n・・・メンバー個々が責任を持って、自立的、自発的に考えて採用したものが最良なもの、ということでしょうか。",
      "questions": [
        "アジャイル開発で個人が気を付けることは？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。」・・・メンバー個々が責任を持って、自立的、自発的に考えて採用したものが最良なもの、ということでしょうか。"
      ]
    },
    {
      "_id": "agile_manifesto_Background12",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「チームがもっと効率を高めることができるかを定期的に振り返り、それに基づいて自分たちのやり方を最適に調整します。」\n・・・スクラムではスプリントの最後にふりかえりをしますね。",
      "questions": [
        "アジャイル開発チーム運営で気を付けることは？",
        "スプリントが終わったらどうしたらいいの？",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「チームがもっと効率を高めることができるかを定期的に振り返り、それに基づいて自分たちのやり方を最適に調整します。」・・・スクラムではスプリントの最後にふりかえりをしますね。"
      ]
    },
    {
      "_id": "agile_manifesto_Background2",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「要求の変更はたとえ開発の後期であっても歓迎します。変化を味方につけることによって、お客様の競争力を引き上げます。」\n・・・この場合、アジャイル開発では変更要求を受け入れるために、開発順序、スコープを入れ替えることが必要になりますね。",
      "questions": [
        "仕様変更はいつまで受けていいの？",
        "仕様変更はどうしたらよい？",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「要求の変更はたとえ開発の後期であっても歓迎します。変化を味方につけることによって、お客様の競争力を引き上げます。」・・・この場合、アジャイル開発では変更要求を受け入れるために、開発順序、スコープを入れ替えることが必要になりますね。"
      ]
    },
    {
      "_id": "agile_manifesto_Background3",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。「動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。」\n・・・価値あるものを、早く、継続的に提供するということですね。　　　　　　　　　　　　　　　　",
      "questions": [
        "アジャイルの開発期間はどのくらい？",
        "開発期間はどう考えるの？",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。」・・・価値あるものを、早く、継続的に提供するということですね。　　　　　　　　　　　　　　　　"
      ]
    },
    {
      "_id": "agile_manifesto_Background4",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「ビジネス側の人と開発者は、プロジェクトを通して日々一緒に働かなければなりません。」\n・・・",
      "questions": [
        "アジャイル開発で顧客に求めることは？",
        "開発体制はどうなるの？",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「ビジネス側の人と開発者は、プロジェクトを通して日々一緒に働かなければなりません。」・・・"
      ]
    },
    {
      "_id": "agile_manifesto_Background5",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「意欲に満ちた人々を集めてプロジェクトを構成します。環境と支援を与え仕事が無事終わるまで彼らを信頼します。」\n・・・メンバー個々の自主性とやる気が、アジャイル開発には求められます。",
      "questions": [
        "アジャイル開発時のチーム体制は？",
        "どんな人をチームに採用したらいい？",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「意欲に満ちた人々を集めてプロジェクトを構成します。環境と支援を与え仕事が無事終わるまで彼らを信頼します。」・・・メンバー個々の自主性とやる気が、アジャイル開発には求められます。"
      ]
    },
    {
      "_id": "agile_manifesto_Background6",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「情報を伝えるもっとも効率的で効果的な方法はフェイス・トゥ・フェイスで話をすることです。」\n・・・アジャイルでなくても、そうですよね。",
      "questions": [
        "アジャイル開発でのコミュニケーションはどうするの？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「情報を伝えるもっとも効率的で効果的な方法はフェイス・トゥ・フェイスで話をすることです。」・・・アジャイルでなくても、そうですよね。"
      ]
    },
    {
      "_id": "agile_manifesto_Background7",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「動くソフトウェアこそが進捗の最も重要な尺度です。」\n・・・資料の作成度合いではなく、動くもの「価値」が提供できているかがポイントですね。",
      "questions": [
        "アジャイル開発の進捗はどう管理するの？",
        "アジャイル開発の進捗がわからないのですが。",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「動くソフトウェアこそが進捗の最も重要な尺度です。」・・・資料の作成度合いではなく、動くもの「価値」が提供できているかがポイントですね。"
      ]
    },
    {
      "_id": "agile_manifesto_Background8",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「アジャイル･プロセスは持続可能な開発を促進します。一定のペースを継続的に維持できるようにしなければなりません。」\n・・・たとえばスクラムではスプリントの最初に何をどのくらいやるか決めますね。継続的に維持するためには、決められた期間の作業量も一定でなくてはいけません。",
      "questions": [
        "アジャイル開発はデスマーチにならないの？",
        "スケジュールを守るにはどうしたらいい？",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「アジャイル･プロセスは持続可能な開発を促進します。一定のペースを継続的に維持できるようにしなければなりません。」・・・たとえばスクラムではスプリントの最初に何をどのくらいやるか決めますね。継続的に維持するためには、決められた期間の作業量も一定でなくてはいけません。"
      ]
    },
    {
      "_id": "agile_manifesto_Background9",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。\n「技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。」\n・・・システムにも俊敏さが求められるので、そのような技術の採用や設計を心がけましょう。繰り返し開発することを念頭におきしましょうね。",
      "questions": [
        "アジャイルに向いたシステムって？",
        "システム構築で気をつけるべき点は？",
        "開発メンバーが気をつけるべきことは？",
        "",
        "",
        "",
        "",
        "",
        "『アジャイル宣言の背後にある原則』ではこのように述べられています。「技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。」・・・システムにも俊敏さが求められるので、そのような技術の採用や設計を心がけましょう。繰り返し開発することを念頭におきしましょうね。"
      ]
    },
    {
      "_id": "agile_manifesto_value",
      "message": "『アジャイルソフトウェア開発宣言』では、アジャイル開発時に重視する価値を次のように宣言しています。\n「プロセスやツールよりも個人と対話を」「包括的なドキュメントよりも動くソフトウェアを」「契約交渉よりも顧客との協調を」「計画に従うことよりも変化への対応を」価値とする。すなわち、左記のことがらに価値があることを認めながらも、私たちは右記のことがらにより価値をおく。\n・・・左記のものが要らないというわけではありませんので履き違えないようにしてくださいね。",
      "questions": [
        "アジャイル開発で重要なことって？",
        "アジャイルソフトウェア開発宣言って何？",
        "",
        "",
        "",
        "",
        "",
        "",
        "『アジャイルソフトウェア開発宣言』では、アジャイル開発時に重視する価値を次のように宣言しています。「プロセスやツールよりも個人と対話を」「包括的なドキュメントよりも動くソフトウェアを」「契約交渉よりも顧客との協調を」「計画に従うことよりも変化への対応を」価値とする。すなわち、左記のことがらに価値があることを認めながらも、私たちは右記のことがらにより価値をおく。・・・左記のものが要らないというわけではありませんので履き違えないようにしてくださいね。"
      ]
    },
    {
      "_id": "agile_samurai_1",
      "message": "インセプションデッキについてですね？ <a target=\"_blank\" href=\"https://sites.google.com/view/inception-deck/%E3%83%9B%E3%83%BC%E3%83%A0\">こちら</a> をクリックしてください。",
      "questions": [
        "インセプションデッキのサンプルをください",
        "インセプションデッキとは",
        "インセプションデッキについて教えて",
        "",
        "",
        "",
        "",
        "",
        "インセプション デッキについてですね？ a target=_blank href=https://sites.google.com/view/inception-deck/%E3%83%9B%E3%83%BC%E3%83%A0こちら/a をクリックしてください。"
      ]
    },
    {
      "_id": "general_bluemix_info",
      "message": "只今の Bluemix Public の状況ですね？ <a target=\"_blank\" href=\"https://console.bluemix.net/status?tags=platform,runtimes,services&view=s:a/\">こちら</a> をクリックしてください。",
      "questions": [
        "Bluemixの状況を教えて",
        "Bluemix Publicの状況を教えて",
        "ブルーミックスの状況を教えて",
        "",
        "",
        "",
        "",
        "",
        "只今の Bluemix Public の状況ですね？ a target=_blank href=https://console.bluemix.net/status?tags=platform,runtimes,services&view=s:a/こちら/a をクリックしてください。"
      ]
    },
    {
      "_id": "general_bochibochi",
      "message": "ぼちぼちでんな",
      "questions": [
        "もうかりまっか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ぼちぼちでんな"
      ]
    },
    {
      "_id": "general_bye",
      "message": "また、明日も会いましょう。それではさようなら。",
      "questions": [
        "さようなら。",
        "さよなら。",
        "またお願いします",
        "また明日。",
        "またね。",
        "特に用はないです。",
        "バイバイ",
        "",
        "また、明日も会いましょう。それではさようなら。"
      ]
    },
    {
      "_id": "general_feedback_dislike",
      "message": "お手数ですが、至らなかった点を教えてください。",
      "questions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "お手数ですが、至らなかった点を教えてください。"
      ]
    },
    {
      "_id": "general_feedback_end",
      "message": "ご意見ありがとうございました。もっと勉強します。",
      "questions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ご意見ありがとうございました。もっと勉強します。"
      ]
    },
    {
      "_id": "general_feedback_like",
      "message": "お役に立てて嬉しいです。何でも聞いてください。",
      "questions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "お役に立てて嬉しいです。何でも聞いてください。"
      ]
    },
    {
      "_id": "general_hello",
      "message": "こんにちは、私はぶるみです。\nアジャイルソフトウェア開発に関する質問にお答えします。",
      "questions": [
        "こんばんは。",
        "はじめまして。",
        "はじめまして。こんにちは。",
        "こんにちは。",
        "よろしくお願いします。",
        "おはようございます",
        "",
        "",
        "こんにちは、私はぶるみです。アジャイルソフトウェア開発に関する質問にお答えします。"
      ]
    },
    {
      "_id": "general_howareyou",
      "message": "ぶるみはアジャイルソフトウェア開発を勉強してます。",
      "questions": [
        "調子はどう?",
        "お元気ですか?",
        "ご機嫌いかがですか?",
        "なにやっているの?",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "general_sorry",
      "message": "申し訳ございません、アジャイル侍か坂場先生にお問い合わせください。\n次はちゃんと答えられるように勉強しておきますね。",
      "questions": [
        "解決しない",
        "答えが違います。",
        "間違っています。",
        "言っていることが分かりません。",
        "会話になっていません。",
        "つかえない",
        "何言ってるの?",
        "答えになっていません。",
        "申し訳ございません、アジャイル侍か坂場先生にお問い合わせください。次はちゃんと答えられるように勉強しておきますね。"
      ]
    },
    {
      "_id": "general_thanks",
      "message": "どういたしまして。またいつでも聞いてくださいね。",
      "questions": [
        "ありがとうございました。頑張ります。",
        "ありがとう。",
        "どうも、ありがとう。",
        "教えてくれてありがとう。",
        "がんばります。",
        "感謝します",
        "ありがとうございます。",
        "",
        "どういたしまして。またいつでも聞いてくださいね。"
      ]
    },
    {
      "_id": "general_whoareyou",
      "message": "私はぶるみ、Bluemix ユーザーグループから来ました。よろしくお願いします。",
      "questions": [
        "あなたは誰ですか?",
        "名前を教えてください。",
        "名前は?",
        "だれですか？",
        "自己紹介して。",
        "誰?",
        "",
        "",
        "私はぶるみ、Bluemix ユーザーグループから来ました。よろしくお願いします。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_1",
      "message": "いつどの機能をリリースするかについての計画を立てるミーティングを開きます。その結果、チームとプロダクトの関係者が共通の目標を持つことができます。\n",
      "questions": [
        "リリース計画ミーティング",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "いつどの機能をリリースするかについての計画を立てるミーティングを開きます。その結果、チームとプロダクトの関係者が共通の目標を持つことができます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_10",
      "message": "チームのタスク状況を可視化するために、タスクカードを用意し、状態を管理するタスクボードに貼り付けます。その結果、だれがどのタスクを担当しているか、どこかに異常が起きていないかなどをチーム全員が把握できるようになります。\n（別名: スクラムボード）",
      "questions": [
        "タスクボード（タスクカード）",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "チームのタスク状況を可視化するために、タスクカードを用意し、状態を管理するタスクボードに貼り付けます。その結果、だれがどのタスクを担当しているか、どこかに異常が起きていないかなどをチーム全員が把握できるようになります。（別名: スクラムボード）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_11",
      "message": "リリースに向けた進捗やイテレーションの状況を把握するために、チームの残作業量を可視化したバーンダウンチャートを書きます。その結果、状況に対する分析や適切なアクションを取ることができるようになります。",
      "questions": [
        "バーンダウンチャート",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "リリースに向けた進捗やイテレーションの状況を把握するために、チームの残作業量を可視化したバーンダウンチャートを書きます。その結果、状況に対する分析や適切なアクションを取ることができるようになります。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_12",
      "message": "現時点でのプロセスが最善とは限りません。そのため、自らプロセスを改善していきます。",
      "questions": [
        "柔軟なプロセス",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "現時点でのプロセスが最善とは限りません。そのため、自らプロセスを改善していきます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_13",
      "message": "ソフトウェアで実現したいことを顧客の価値を明確にして簡潔に表現し書き出します。その結果、開発者とプロダクトオーナーの会話を促進することができます。\n（別名: ストーリーカード）",
      "questions": [
        "ユーザーストーリー",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ソフトウェアで実現したいことを顧客の価値を明確にして簡潔に表現し書き出します。その結果、開発者とプロダクトオーナーの会話を促進することができます。（別名: ストーリーカード）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_14",
      "message": "イテレーションで何をするべきか、スプリントバックログにリストアップします。イテレーションの残タスクを追跡することによって、進捗を把握することができます。",
      "questions": [
        "スプリントバックログ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーションで何をするべきか、スプリントバックログにリストアップします。イテレーションの残タスクを追跡することによって、進捗を把握することができます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_15",
      "message": "プロダクトの目的や方向性が曖昧のまま開発を進めている場合は、プロダクトの目的や方向性を明らかにした10の質問に回答し、チームで共有します。その結果、チームはプロダクトの目的、ビジョン、方向性を理解して開発が進めやすくなります。",
      "questions": [
        "インセプションデッキ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロダクトの目的や方向性が曖昧のまま開発を進めている場合は、プロダクトの目的や方向性を明らかにした10の質問に回答し、チームで共有します。その結果、チームはプロダクトの目的、ビジョン、方向性を理解して開発が進めやすくなります。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_16",
      "message": "プロダクトとして何を作るべきかをプロダクトバックログで管理し、その優先順位をチームとの会話を踏まえ、プロダクトオーナーに判断してもらいます。その結果、チームは何から開発を行えばよいか明確になります。\n（別名: マスターストーリーリスト）",
      "questions": [
        "プロダクトバックログ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロダクトとして何を作るべきかをプロダクトバックログで管理し、その優先順位をチームとの会話を踏まえ、プロダクトオーナーに判断してもらいます。その結果、チームは何から開発を行えばよいか明確になります。（別名: マスターストーリーリスト）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_17",
      "message": "アウトプットが適切かどうかわかりにくい時は、迅速なフィードバックを心掛けます。その結果、現状把握と軌道修正がしやすくなります。",
      "questions": [
        "迅速なフィードバック",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "アウトプットが適切かどうかわかりにくい時は、迅速なフィードバックを心掛けます。その結果、現状把握と軌道修正がしやすくなります。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_18",
      "message": "チームの中で知識やコードの共有ができていない場合は、ペアを組んで作業をします。その結果、開発チームの中で業務知識やコードについての知識が共有でき、品質や作業効率も向上できます。\n（別名: ペアワーク、ペアリング）",
      "questions": [
        "ペアプログラミング",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "チームの中で知識やコードの共有ができていない場合は、ペアを組んで作業をします。その結果、開発チームの中で業務知識やコードについての知識が共有でき、品質や作業効率も向上できます。（別名: ペアワーク、ペアリング）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_19",
      "message": "システムを修正する度に回帰テストを手動で実施しなければいけない場合、回帰テストを自動化します。その結果、回帰テストにかかる工数が大幅に削減でき、何度も実施できるようになります。\n（別名: リグレッションテスト）",
      "questions": [
        "自動化された回帰テスト",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "システムを修正する度に回帰テストを手動で実施しなければいけない場合、回帰テストを自動化します。その結果、回帰テストにかかる工数が大幅に削減でき、何度も実施できるようになります。（別名: リグレッションテスト）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_2",
      "message": "イテレーションを始める際に、イテレーションで達成すべきゴールと、それを実現する作業を洗い出します。その結果、チームが開発を進めるために必要かつ具体的な計画を立てることができます。\n（別名: 計画ゲーム、スプリント計画ミーティング、反復型計画）",
      "questions": [
        "イテレーション計画ミーティング",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーションを始める際に、イテレーションで達成すべきゴールと、それを実現する作業を洗い出します。その結果、チームが開発を進めるために必要かつ具体的な計画を立てることができます。（別名: 計画ゲーム、スプリント計画ミーティング、反復型計画）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_20",
      "message": "自動化されたテストコードを書き実行させながらプロダクトコードを育てていきます。その結果、バグが混入してしまうことを防ぎ、プロダクトコードの変更容易性が向上し、開発者は自信を持って開発することができます。",
      "questions": [
        "テスト駆動開発",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "自動化されたテストコードを書き実行させながらプロダクトコードを育てていきます。その結果、バグが混入してしまうことを防ぎ、プロダクトコードの変更容易性が向上し、開発者は自信を持って開発することができます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_21",
      "message": "動作しているソースコードに手を入れることに不安がある場合は、ユニットテストを自動化します。その結果、修正をしても、ユニットテストコードを実行して結果を見ることで、元のコードが壊れていないかを確認することができ、万が一不具合があった場合でもすぐにわかります。\n（別名: デベロッパーテスティング）",
      "questions": [
        "ユニットテストの自動化",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "動作しているソースコードに手を入れることに不安がある場合は、ユニットテストを自動化します。その結果、修正をしても、ユニットテストコードを実行して結果を見ることで、元のコードが壊れていないかを確認することができ、万が一不具合があった場合でもすぐにわかります。（別名: デベロッパーテスティング）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_22",
      "message": "ユーザーストーリーが完了したかを判定するために、プロダクトオーナーと合意した受入テストを作成します。その結果、ユーザーストーリーの完了条件が明確になり開発チームとプロダクトオーナー間の認識相違がなくなります。\n（別名: 顧客テスト、機能テスト、ストーリーテスト）",
      "questions": [
        "受入テスト",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ユーザーストーリーが完了したかを判定するために、プロダクトオーナーと合意した受入テストを作成します。その結果、ユーザーストーリーの完了条件が明確になり開発チームとプロダクトオーナー間の認識相違がなくなります。（別名: 顧客テスト、機能テスト、ストーリーテスト）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_23",
      "message": "チームがより直感的にわかる共通の語彙が必要ならば、だれもがわかるメタファを使ってシステムを表現します。その結果、システムに対しての共通認識を簡単に構築でき、内部設計からユーザーエクスペリエンスまでの広い範囲で、新たな解決策や見過していた問題を発見することができます。",
      "questions": [
        "システムメタファ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "チームがより直感的にわかる共通の語彙が必要ならば、だれもがわかるメタファを使ってシステムを表現します。その結果、システムに対しての共通認識を簡単に構築でき、内部設計からユーザーエクスペリエンスまでの広い範囲で、新たな解決策や見過していた問題を発見することができます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_24",
      "message": "技術的に不明な点がある場合は、動くコードを書いて実験をして技術的な学習をします。その結果、技術的不明点について実践的な学びを得ることができます。\n（別名: 実験、曳光弾）",
      "questions": [
        "スパイク・ソリューション",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "技術的に不明な点がある場合は、動くコードを書いて実験をして技術的な学習をします。その結果、技術的不明点について実践的な学びを得ることができます。（別名: 実験、曳光弾）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_25",
      "message": "コードがわかりにくい。複雑である。汚いと感じたら、コードの振る舞いは変えずに内部の設計を改善します。その結果、コードの見通しがよくなり、将来的な設計へのリスクを軽減することができます。",
      "questions": [
        "リファクタリング",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "コードがわかりにくい。複雑である。汚いと感じたら、コードの振る舞いは変えずに内部の設計を改善します。その結果、コードの見通しがよくなり、将来的な設計へのリスクを軽減することができます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_26",
      "message": "将来の変更を予測して設計を複雑化するのではなく、今必要な要件を実現するための最小限の設計にします。その結果、修正や変更に柔軟に対応できる設計になります。\n（別名: YAGNI）",
      "questions": [
        "シンプルデザイン",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "将来の変更を予測して設計を複雑化するのではなく、今必要な要件を実現するための最小限の設計にします。その結果、修正や変更に柔軟に対応できる設計になります。（別名: YAGNI）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_27",
      "message": "複数の修正箇所があるならば、一つずつインクリメンタルに修正してその都度統合します。その結果、問題の特定がしやすくなります。",
      "questions": [
        "逐次の統合",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "複数の修正箇所があるならば、一つずつインクリメンタルに修正してその都度統合します。その結果、問題の特定がしやすくなります。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_28",
      "message": "インテグレーション（システムのビルド、テストの実行）を自動化し、継続的に行うことによって、コードだけでなく動作環境を含めた確認を行うことができます。\n（別名: 常時結合、CI）",
      "questions": [
        "継続的インテグレーション",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "インテグレーション（システムのビルド、テストの実行）を自動化し、継続的に行うことによって、コードだけでなく動作環境を含めた確認を行うことができます。（別名: 常時結合、CI）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_29",
      "message": "特定の人しか知らないことがないように、ソースコードや業務に関する知識を共同所有します。その結果、変化や問題に強いチームになります。\n（別名: 共同所有）",
      "questions": [
        "集団によるオーナーシップ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "特定の人しか知らないことがないように、ソースコードや業務に関する知識を共同所有します。その結果、変化や問題に強いチームになります。（別名: 共同所有）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_3",
      "message": "プロジェクトで起こる変化（プロジェクトを開始する前の期待や想定とのギャップ）が大きく予想できない時には、一定期間を何度も繰り返して開発を進めます。その結果、チームはプロダクト開発に必要な知識を学びながら、変化に適応していくことができます。\n（別名: タイムボックス、スプリント、反復）",
      "questions": [
        "イテレーション",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロジェクトで起こる変化（プロジェクトを開始する前の期待や想定とのギャップ）が大きく予想できない時には、一定期間を何度も繰り返して開発を進めます。その結果、チームはプロダクト開発に必要な知識を学びながら、変化に適応していくことができます。（別名: タイムボックス、スプリント、反復）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_30",
      "message": "チームでの開発を始める時、メンバーで合意形成をしながらコーディング規約を決めます。その結果、チームの合意形成の練習になり、コードの統一性が増して可読性が高まります。\n（別名: コーディング標準）",
      "questions": [
        "コーディング規約",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "チームでの開発を始める時、メンバーで合意形成をしながらコーディング規約を決めます。その結果、チームの合意形成の練習になり、コードの統一性が増して可読性が高まります。（別名: コーディング標準）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_31",
      "message": "バグを発見した後は、修正だけでなく再現テストを書いてから修正します。その結果、修正モレや再発を防ぐことができます。",
      "questions": [
        "バグ時の再現テスト",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "バグを発見した後は、修正だけでなく再現テストを書いてから修正します。その結果、修正モレや再発を防ぐことができます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_32",
      "message": "チームの中で何かを議論したり、共有したりする場合には、付箋やホワイトボードを充分に活用します。\n（別名: 紙、付箋、情報カード、ホワイトボード）",
      "questions": [
        "紙・手書きツール",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "チームの中で何かを議論したり、共有したりする場合には、付箋やホワイトボードを充分に活用します。（別名: 紙、付箋、情報カード、ホワイトボード）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_33",
      "message": "顧客がチームの側にいないならば、顧客のように考える顧客プロキシを置きます。その結果、チームは、顧客プロキシから顧客の抱える問題やニーズについて聞くことができます。",
      "questions": [
        "顧客プロキシ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "顧客がチームの側にいないならば、顧客のように考える顧客プロキシを置きます。その結果、チームは、顧客プロキシから顧客の抱える問題やニーズについて聞くことができます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_34",
      "message": "ムダなソフトウェア機能が作られてしまうことを防ぐため、開発者と顧客が常に会話ができる環境で仕事をします。その結果、顧客と開発者のコミュニケーション量が増えて、顧客が望むソフトウェアが作られやすくなります。\n（別名: 全員同席）",
      "questions": [
        "オンサイト顧客",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ムダなソフトウェア機能が作られてしまうことを防ぐため、開発者と顧客が常に会話ができる環境で仕事をします。その結果、顧客と開発者のコミュニケーション量が増えて、顧客が望むソフトウェアが作られやすくなります。（別名: 全員同席）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_35",
      "message": "要件の優先順位や仕様がなかなか決まらない場合は、プロダクトの結果に責任を持ち優先順位や仕様を決める役割を設けます。その結果、プロダクトについての決定を素早く行うことができます。",
      "questions": [
        "プロダクトオーナー",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "要件の優先順位や仕様がなかなか決まらない場合は、プロダクトの結果に責任を持ち優先順位や仕様を決める役割を設けます。その結果、プロダクトについての決定を素早く行うことができます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_36",
      "message": "開発チームの内外に調整が必要であれば、ファシリテータの役割を設置します。その結果、開発が進みやすくなります。",
      "questions": [
        "ファシリテータ",
        "スクラムマスター",
        "",
        "",
        "",
        "",
        "",
        "",
        "開発チームの内外に調整が必要であれば、ファシリテータの役割を設置します。その結果、開発が進みやすくなります。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_37",
      "message": "もしチームが初めてアジャイル型開発に挑戦しようとしているなら、アジャイルコーチに導入を手伝ってもらうべきです。その結果、より確実にチームがアジャイルへの変化を体験できます。",
      "questions": [
        "アジャイルコーチ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "もしチームが初めてアジャイル型開発に挑戦しようとしているなら、アジャイルコーチに導入を手伝ってもらうべきです。その結果、より確実にチームがアジャイルへの変化を体験できます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_38",
      "message": "チームメンバーが指示されて動くのではなく、各人の判断で動けるようにします。その結果、透明性の高い強い組織になります。",
      "questions": [
        "自己組織化チーム",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "チームメンバーが指示されて動くのではなく、各人の判断で動けるようにします。その結果、透明性の高い強い組織になります。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_39",
      "message": "カレンダーに毎日その日の気持ちを表すシールを貼るようにします。その結果、チームのムードやメンバーの気持ちが見えるようになります。",
      "questions": [
        "ニコニコカレンダー",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "カレンダーに毎日その日の気持ちを表すシールを貼るようにします。その結果、チームのムードやメンバーの気持ちが見えるようになります。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_4",
      "message": "開発規模の見積り精度が個人のスキルに依存します。非作業者が見積っている場合は、チーム全員で素早く見積もりましょう。その結果、全員の知識や経験を活かした見積り結果を得ることができます。\n（別名: 見積りポーカー）",
      "questions": [
        "プランニングポーカー",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "開発規模の見積り精度が個人のスキルに依存します。非作業者が見積っている場合は、チーム全員で素早く見積もりましょう。その結果、全員の知識や経験を活かした見積り結果を得ることができます。（別名: 見積りポーカー）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_40",
      "message": "高い効果や生産性を維持できるよう持続可能なペースを保ちます。その結果、健康的で活気のある職場になります。\n（別名: ゆとり、活気のある仕事）",
      "questions": [
        "持続可能なペース",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "高い効果や生産性を維持できるよう持続可能なペースを保ちます。その結果、健康的で活気のある職場になります。（別名: ゆとり、活気のある仕事）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_41",
      "message": "その時のプロセスが最善とは限りません。組織に合わせた開発スタイルを模索します。",
      "questions": [
        "組織に合わせたアジャイルスタイル",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "その時のプロセスが最善とは限りません。組織に合わせた開発スタイルを模索します。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_42",
      "message": "意思疎通がうまくいかず、活気がない場合は、共通の部屋を作ります。その結果、コミュニケーションは改善します。\n（別名: 全員同室）",
      "questions": [
        "共通の部屋",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "意思疎通がうまくいかず、活気がない場合は、共通の部屋を作ります。その結果、コミュニケーションは改善します。（別名: 全員同室）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_43",
      "message": "チーム全員が一つの目標に向かうような取り組みを行います。その結果、チームは素早く正確にコミュニケーションができ、生き生きとした仕事ができるようになります。",
      "questions": [
        "チーム全体が一つに",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "チーム全員が一つの目標に向かうような取り組みを行います。その結果、チームは素早く正確にコミュニケーションができ、生き生きとした仕事ができるようになります。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_44",
      "message": "属人化しているならば様々な役割が経験できるようにします。その結果、変化やインシデントに強い組織になります。\n（別名: 多能工）",
      "questions": [
        "人材のローテーション",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "属人化しているならば様々な役割が経験できるようにします。その結果、変化やインシデントに強い組織になります。（別名: 多能工）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_45",
      "message": "継続的インテグレーションを実施するためには、本番環境に近いインテグレーション専用のマシンや環境を用意します。その結果、インテグレーションを頻繁に実施でき、本番環境との差異を最小限に抑えることができます。",
      "questions": [
        "インテグレーション専用マシン",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "継続的インテグレーションを実施するためには、本番環境に近いインテグレーション専用のマシンや環境を用意します。その結果、インテグレーションを頻繁に実施でき、本番環境との差異を最小限に抑えることができます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_5",
      "message": "今後のチームの作業量を予測したい場合は、チームのイテレーションあたりの開発量を計測し続けます。その結果、ある期間までの開発量の予測や、現在の開発規模についての着地予測を見積もることができます。",
      "questions": [
        "ベロシティ計測",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "今後のチームの作業量を予測したい場合は、チームのイテレーションあたりの開発量を計測し続けます。その結果、ある期間までの開発量の予測や、現在の開発規模についての着地予測を見積もることができます。"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_6",
      "message": "毎日、時間を決めて短い時間で関係者が顔を合わせます。その結果、チーム全体が日々の必要な情報を共有できるようになります。\n（別名: 朝会、朝礼、デイリースクラム、スタンドアップミーティング）",
      "questions": [
        "日次ミーティング",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "毎日、時間を決めて短い時間で関係者が顔を合わせます。その結果、チーム全体が日々の必要な情報を共有できるようになります。（別名: 朝会、朝礼、デイリースクラム、スタンドアップミーティング）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_7",
      "message": "最初から開発プロジェクトに最適な手法がわからない場合、イテレーション毎にふりかえり、学んだことを共有してより最適なやり方を編み出します。その結果、チームの現状に最適な開発プロセスを作りあげていくことができます。\n（別名: レトロスペクティブ、リフレクション、内省、反省会）",
      "questions": [
        "ふりかえり",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "最初から開発プロジェクトに最適な手法がわからない場合、イテレーション毎にふりかえり、学んだことを共有してより最適なやり方を編み出します。その結果、チームの現状に最適な開発プロセスを作りあげていくことができます。（別名: レトロスペクティブ、リフレクション、内省、反省会）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_8",
      "message": "プロジェクトを取り巻く状況が不安定で計画を頻繁に変更せざるを得ない場合には、同時に開発する機能の数を制限して流量コントロールします。その結果、機能を流れるように提供することができ変化に対応しやすいです。\n（別名: Kanban, フィーチャパイプライン）",
      "questions": [
        "かんばん",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロジェクトを取り巻く状況が不安定で計画を頻繁に変更せざるを得ない場合には、同時に開発する機能の数を制限して流量コントロールします。その結果、機能を流れるように提供することができ変化に対応しやすいです。（別名: Kanban, フィーチャパイプライン）"
      ]
    },
    {
      "_id": "IPAﾌﾟﾗｸﾃｨｽ_9",
      "message": "イテレーションの終わりに完了したものを関係者にデモをします。その結果、チームは次のイテレーションで何をするべきかフィードバックを得ることができます。\n（別名: デモ）",
      "questions": [
        "スプリントレビュー",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーションの終わりに完了したものを関係者にデモをします。その結果、チームは次のイテレーションで何をするべきかフィードバックを得ることができます。（別名: デモ）"
      ]
    },
    {
      "_id": "ＩＰＡ資料_1",
      "message": "<a target=\"_blank\" href=\"https://www.ipa.go.jp/sec/softwareengineering/reports/20130319.html\">こちら</a>に掲載されている資料「アジャイル型開発におけるプラクティス活用 リファレンスガイド」を見るとよいでしょう。2011年の調査をもとに、プラクティスと活用事例が詳細にまとめられています。忙しい人は「アジャイル型開発におけるプラクティス活用事例調査 概要調査報告書」を見てください。プラクティスの用語は私も勉強しましたので聞いてみてくださいね。",
      "questions": [
        "アジャイル活用事例",
        "活用事例を知りたい",
        "プラクティス",
        "アジャイルに向いているものはなにか",
        "日本での活用事例は",
        "成功例を知りたい",
        "",
        "",
        "a target=_blank href=https://www.ipa.go.jp/sec/softwareengineering/reports/20130319.htmlこちら/aに掲載されている資料「アジャイル型開発におけるプラクティス活用 リファレンスガイド」を見るとよいでしょう。2011年の調査をもとに、プラクティスと活用事例が詳細にまとめられています。忙しい人は「アジャイル型開発におけるプラクティス活用事例調査 概要調査報告書」を見てください。プラクティスの用語は私も勉強しましたので聞いてみてくださいね。"
      ]
    },
    {
      "_id": "ＩＰＡ資料_2",
      "message": "<a target=\"_blank\" href=\"https://www.ipa.go.jp/sec/softwareengineering/reports/20130319.html\">こちら</a>に掲載されている資料「アジャイル型開発におけるプラクティス活用事例調査 概要調査報告書」を見てください。日本での手法の活用例やポイントが記載されていますので、参考にしてみてはいかがでしょうか。",
      "questions": [
        "どんな手法を取り入れたらよいのか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "a target=_blank href=https://www.ipa.go.jp/sec/softwareengineering/reports/20130319.htmlこちら/aに掲載されている資料「アジャイル型開発におけるプラクティス活用事例調査 概要調査報告書」を見てください。日本での手法の活用例やポイントが記載されていますので、参考にしてみてはいかがでしょうか。"
      ]
    },
    {
      "_id": "ＩＰＡ資料_3",
      "message": "<a target=\"_blank\" href=\"https://www.ipa.go.jp/sec/softwareengineering/seminar/20111004.html\">こちら</a>に掲載されている資料 「IPA/SEC非ウォーターフォール型開WG活動報告書のポイント」を見ると良いです。8ページから26ページが助けとなるでしょう。また、108ページ、109ページにも比較があります。",
      "questions": [
        "ウォーターフォールとアジャイルの違い",
        "ウォーターフォール",
        "",
        "",
        "",
        "",
        "",
        "",
        "a target=_blank href=https://www.ipa.go.jp/sec/softwareengineering/seminar/20111004.htmlこちら/aに掲載されている資料 「IPA/SEC非ウォーターフォール型開WG活動報告書のポイント」を見ると良いです。8ページから26ページが助けとなるでしょう。また、108ページ、109ページにも比較があります。"
      ]
    },
    {
      "_id": "ＩＰＡ資料_4",
      "message": "<a target=\"_blank\" href=\"https://www.ipa.go.jp/sec/softwareengineering/seminar/20111004.html\">こちら</a>に掲載されている資料 「IPA/SEC非ウォーターフォール型開WG活動報告書のポイント」を見ると良いです。21ページから26ページが助けとなるでしょう。",
      "questions": [
        "アジャイル開発の特徴",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "a target=_blank href=https://www.ipa.go.jp/sec/softwareengineering/seminar/20111004.htmlこちら/aに掲載されている資料 「IPA/SEC非ウォーターフォール型開WG活動報告書のポイント」を見ると良いです。21ページから26ページが助けとなるでしょう。"
      ]
    },
    {
      "_id": "ＩＰＡ資料_5",
      "message": "初めてアジャイル開発に取り組む際には、書籍や文書だけではなく人から人にやり方を伝えることが有効であるため、社内にアジャイル型開発に取り組んだ経験のある人がいる場合はその人に、社内にない場合は、社外からアジャイルコーチを頼んで導入の手伝いをしてもらうのがよいでしょう。初めて取り組む場合は、イテレーション期間を短かくした上で、ふりかえりの中で改善点をチームで考え実行していくことが不可欠となります。",
      "questions": [
        "初めてのアジャイル開発",
        "アジャイル開発がよくわからない",
        "どうしたらいいかわからない",
        "初めてアジャイル開発に取り組む場合",
        "アジャイルを知っている人がいない",
        "",
        "",
        "",
        "初めてアジャイル開発に取り組む際には、書籍や文書だけではなく人から人にやり方を伝えることが有効であるため、社内にアジャイル型開発に取り組んだ経験のある人がいる場合はその人に、社内にない場合は、社外からアジャイルコーチを頼んで導入の手伝いをしてもらうのがよいでしょう。初めて取り組む場合は、イテレーション期間を短かくした上で、ふりかえりの中で改善点をチームで考え実行していくことが不可欠となります。"
      ]
    },
    {
      "_id": "ＩＰＡ資料_6",
      "message": "<a target=\"_blank\" href=\"https://www.ipa.go.jp/sec/softwareengineering/seminar/20111004.html\">こちら</a>に掲載されている資料 「BIGLOBEにおけるスクラム開発の導入事例」を見ると良いです。",
      "questions": [
        "アジャイル開発の雰囲気",
        "開発イメージがわかない",
        "リアルな話はないのか",
        "アジャイル開発は面白いのか",
        "",
        "",
        "",
        "",
        "a target=_blank href=https://www.ipa.go.jp/sec/softwareengineering/seminar/20111004.htmlこちら/aに掲載されている資料 「BIGLOBEにおけるスクラム開発の導入事例」を見ると良いです。"
      ]
    },
    {
      "_id": "ＩＰＡ資料_7",
      "message": "<a target=\"_blank\" href=\"https://www.ipa.go.jp/sec/softwareengineering/reports/20130319.html\">こちら</a>に掲載されている資料「アジャイル型開発におけるプラクティス活用事例調査 概要調査報告書」を見てください。4ページを踏まえ資料全体を読んでみましょう。",
      "questions": [
        "アジャイル開発で躓いた",
        "書籍通りに行かない",
        "日本でアジャイル型開発の普及が阻害されている要因",
        "海外との違い",
        "アジャイル開発がうまくいかない",
        "",
        "",
        "",
        "a target=_blank href=https://www.ipa.go.jp/sec/softwareengineering/reports/20130319.htmlこちら/aに掲載されている資料「アジャイル型開発におけるプラクティス活用事例調査 概要調査報告書」を見てください。4ページを踏まえ資料全体を読んでみましょう。"
      ]
    },
    {
      "_id": "ＩＰＡ資料_8",
      "message": "品質要求が高いプロジェクトでは、テストに関するプラクティスである「自動化された回帰テスト」、「ユニットテストの自動化」を活用しましょう。\n自動化された回帰テストやユニットテストの自動化は、プロジェクトの初期段階で、実施有無、実施のための取り決め、使用ツールを検討しておくことがポイントです。これを後回しにすると、必ず機能開発が優先され、自動化にたどりつきません。",
      "questions": [
        "常に高い品質を担保するには",
        "テストはどうしたらよいの",
        "テストの繰り返しはどうしたらいいの",
        "",
        "",
        "",
        "",
        "",
        "品質要求が高いプロジェクトでは、テストに関するプラクティスである「自動化された回帰テスト」、「ユニットテストの自動化」を活用しましょう。自動化された回帰テストやユニットテストの自動化は、プロジェクトの初期段階で、実施有無、実施のための取り決め、使用ツールを検討しておくことがポイントです。これを後回しにすると、必ず機能開発が優先され、自動化にたどりつきません。"
      ]
    },
    {
      "_id": "ＩＰＡ資料_9",
      "message": "初めてチームを組むメンバーが多い場合、チームが向かう方向を明確にすることと、チームビルディングが必要となるため、「インセプションデッキ」や「ニコニコカレンダー」を活用しましょう。\nインセプションデッキは、作成を通じて、プロジェクトの目的や目標が明らかとなります。ニコニコカレンダーは、メンバーの感情や状況を可視化し、チームメンバーのことを知ることがポイントになります。",
      "questions": [
        "チームの認識をそろえるにはどうしたらよい",
        "初めてチームを組む場合",
        "チームを組んだら最初にやることは",
        "",
        "",
        "",
        "",
        "",
        "初めてチームを組むメンバーが多い場合、チームが向かう方向を明確にすることと、チームビルディングが必要となるため、「インセプションデッキ」や「ニコニコカレンダー」を活用しましょう。インセプションデッキは、作成を通じて、プロジェクトの目的や目標が明らかとなります。ニコニコカレンダーは、メンバーの感情や状況を可視化し、チームメンバーのことを知ることがポイントになります。"
      ]
    },
    {
      "_id": "scrum_training",
      "message": "私は把握してませんので、外部サイトに問い合わせてみます。 <a target=\"_blank\" href=\"http://www.i-learning.jp/search.html?query=%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0\">こちら</a> をクリックしてください。",
      "questions": [
        "アジャイルであることとは？",
        "スクラムの研修を受講したい",
        "スクラムの研修コースを推薦してください",
        "",
        "",
        "",
        "",
        "",
        "私は把握してませんので、外部サイトに問い合わせてみます。 a target=_blank href=http://www.i-learning.jp/search.html?query=%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0こちら/a をクリックしてください。"
      ]
    },
    {
      "_id": "アジャイルサムライ_1",
      "message": "アジャイルな顧客はプロジェクトを流れていくあらゆる要求の「真実の源」だ。ソフトウェアは顧客のために作られる。顧客は問題領域の専門家であることが望ましい。業務に深く通じていて、ソフトウェアが何をするのか、どんな見た目になるのか、どんな具合に動くのかを心から気にかける人物。開発チームに確固たる指針を与え、質問に答え、フィードバックしてくれる存在。それがアジャイルな顧客だ。\nアジャイルな顧客は要求の優先順位づけも行う。何をいつ作るのかを決めるのは顧客だ。\nとはいえ、仮先順位は顧符の独断で決めるわけじゃない。開発チームとの共同作業だ。たとえば、技術的な理由から、ある機能を他の機能よりも先に実装したほうがうまくいく場合なんかは開発チームから提案すべきだ(潰さなきゃならないい技術リスクがあるってことだからね)。\nまあ、そうはいっても大抵はビジネスの視点から優先順位は決まっていく。そして決めた優先順位に従って、計画を現実のものにすべく、顧客は開発チームと一丸になって仕事をこなしていくんだ。\nそれから顧客には、やらなきゃいけない楽しくない仕事がひとつある。期日が迫ってきたり、手持ちの資金が心細くなってきたときには、何を作らないかを決めるのは顧客の仕事だ。改めて言うまでもないかもしれないが、これらすべてを円滑に進めたいと思うなら、なるべく顧客は開発チームの近くにいたほうがいい。さらに君のプロジェクト専任であれば理想的だ。当初、エクストリーム・プログラミングではこのプラクティスをオンサイト顧客と呼んでいた。スクラムではプロダクトオーナーという専任の役割を用意している。顧客が専任であるかどうかよりも重要なのは、エクストリーム・プログラミングやスクラムといったアジャイル手法でそうしたプラクティスが生まれるにいたった「思い」を理解することだ。すなわち「顧客をじかに開発へ巻き込めば巻き込むほど、プロダクトはよくなっていく」。ここからアジャイル手法は生まれたんだ。だから、お客さんにはできるだけプロジェクトに積極的にかかわってもらおう。\n顧客という役割がどれだけ重要なのかをきちんと納得してもらって、プロジェクトの成功のために必要な決断を下せるだけの権限を委譲しておいてもらおう。お客さんに自ら進んで決断してもらうようにするんだ。",
      "questions": [
        "プロダクトオーナー",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "アジャイルな顧客はプロジェクトを流れていくあらゆる要求の「真実の源」だ。ソフトウェアは顧客のために作られる。顧客は問題領域の専門家であることが望ましい。業務に深く通じていて、ソフトウェアが何をするのか、どんな見た目になるのか、どんな具合に動くのかを心から気にかける人物。開発チームに確固たる指針を与え、質問に答え、フィードバックしてくれる存在。それがアジャイルな顧客だ。アジャイルな顧客は要求の優先順位づけも行う。何をいつ作るのかを決めるのは顧客だ。とはいえ、仮先順位は顧符の独断で決めるわけじゃない。開発チームとの共同作業だ。たとえば、技術的な理由から、ある機能を他の機能よりも先に実装したほうがうまくいく場合なんかは開発チームから提案すべきだ(潰さなきゃならないい技術リスクがあるってことだからね)。まあ、そうはいっても大抵はビジネスの視点から優先順位は決まっていく。そして決めた優先順位に従って、計画を現実のものにすべく、顧客は開発チームと一丸になって仕事をこなしていくんだ。それから顧客には、やらなきゃいけない楽しくない仕事がひとつある。期日が迫ってきたり、手持ちの資金が心細くなってきたときには、何を作らないかを決めるのは顧客の仕事だ。改めて言うまでもないかもしれないが、これらすべてを円滑に進めたいと思うなら、なるべく顧客は開発チームの近くにいたほうがいい。さらに君のプロジェクト専任であれば理想的だ。当初、エクストリーム・プログラミングではこのプラクティスをオンサイト顧客と呼んでいた。スクラムではプロダクトオーナーという専任の役割を用意している。顧客が専任であるかどうかよりも重要なのは、エクストリーム・プログラミングやスクラムといったアジャイル手法でそうしたプラクティスが生まれるにいたった「思い」を理解することだ。すなわち「顧客をじかに開発へ巻き込めば巻き込むほど、プロダクトはよくなっていく」。ここからアジャイル手法は生まれたんだ。だから、お客さんにはできるだけプロジェクトに積極的にかかわってもらおう。顧客という役割がどれだけ重要なのかをきちんと納得してもらって、プロジェクトの成功のために必要な決断を下せるだけの権限を委譲しておいてもらおう。お客さんに自ら進んで決断してもらうようにするんだ。"
      ]
    },
    {
      "_id": "アジャイルサムライ_2",
      "message": "アジャイルな開発チームは職能横断的なメンバーで構成されており、顧客の望むフィーチャーをリリース可能なソフトウェアにするために集められる。アナリスト。プログラマ。テスター。データベース管理者。他にもユーザーストーリーをちゃんと動くソフトウェアとして実現するために必要なメンバーを全てそろえる。他にもデータベース管理者、システム管理者、テクニカルライター、トレーナー、業務改善担当、インフラ管理者、ネットワーク管理者、などなど。こうした役割もすべて開発チームに含まれるし、他のチームメンバーと同じように扱われる。",
      "questions": [
        "開発チーム",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "アジャイルな開発チームは職能横断的なメンバーで構成されており、顧客の望むフィーチャーをリリース可能なソフトウェアにするために集められる。アナリスト。プログラマ。テスター。データベース管理者。他にもユーザーストーリーをちゃんと動くソフトウェアとして実現するために必要なメンバーを全てそろえる。他にもデータベース管理者、システム管理者、テクニカルライター、トレーナー、業務改善担当、インフラ管理者、ネットワーク管理者、などなど。こうした役割もすべて開発チームに含まれるし、他のチームメンバーと同じように扱われる。"
      ]
    },
    {
      "_id": "アジャイルサムライ_3",
      "message": "スクラムマスターは言ってみればアジャイルコーチとかっこいいプロジェクトマネージャを合わせたような感じだ。新しいチームを軌道に乗せるときには、アジャイルコーチがいると非常に助かる。アジャイルコーチは、アジャイル開発の原則や考え方をチームに説明し、受け入れていくことを後押しする。最後までやり遂げられるチームにするのがアジャイルコーチの仕事だ。そのために、チームが惑い習慣へ逆戻りしないよう注意を払う。コーチングについてはAgile Coachingという良書があるので参考にしてほしい。",
      "questions": [
        "スクラムマスター",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムマスターは言ってみればアジャイルコーチとかっこいいプロジェクトマネージャを合わせたような感じだ。新しいチームを軌道に乗せるときには、アジャイルコーチがいると非常に助かる。アジャイルコーチは、アジャイル開発の原則や考え方をチームに説明し、受け入れていくことを後押しする。最後までやり遂げられるチームにするのがアジャイルコーチの仕事だ。そのために、チームが惑い習慣へ逆戻りしないよう注意を払う。コーチングについてはAgile Coachingという良書があるので参考にしてほしい。"
      ]
    },
    {
      "_id": "アジャイルサムライ_4",
      "message": "アジャイル開発では、プロジェク卜でこなすべきToDoリストを\n「マスターストーリーリスト(プロダクトバックログ)」と呼ぶ。リストの項目には、顧客がソフトウェアで\n実別したいと思っているありとあらゆるフィーチャーを載せておく。\nマスターストーリーリストは、フィーチャー(ユーザーストーリーとして表現する）の一覧だ。リストには顧客がソフトウェアで実現したいものを載せていく。載せた項目は、顧客が優先順位をつけて、開発チームが見積もる。その結果が計画の土台となる。良いマスターストーリーリストの長さは、１か月から６か月程度の期間でこなせる仕事の範囲に収まっている。あまりたくさんのストーリーをリストに載せても仕方がない。なぜなら、6ヶ月後に状況がどうなっているかなんでわからないからだ。状況が変わっていたら、半年も前に追加したストリーなんて、もうたぶん要らなくなってるんじゃないだろうか。\nだったら、今から半年先のことに気を揉んだって仕方ないと思わないかい？そうはいっても、マスターストーリーリストに載っているストーリーをすべて実装し尽くしてしまったらどうするんだと思うかもしれない。確かにそういうケースもなくはないが、滅多やたらとお目にかかれるものじゃない。いつだって\n与えられた期間や資金よりもやるべきことは多いものだ。",
      "questions": [
        "プロダクトバックログ",
        "マスターストーリーリスト",
        "",
        "",
        "",
        "",
        "",
        "",
        "アジャイル開発では、プロジェク卜でこなすべきToDoリストを「マスターストーリーリスト(プロダクトバックログ)」と呼ぶ。リストの項目には、顧客がソフトウェアで実別したいと思っているありとあらゆるフィーチャーを載せておく。マスターストーリーリストは、フィーチャー(ユーザーストーリーとして表現する）の一覧だ。リストには顧客がソフトウェアで実現したいものを載せていく。載せた項目は、顧客が優先順位をつけて、開発チームが見積もる。その結果が計画の土台となる。良いマスターストーリーリストの長さは、１か月から６か月程度の期間でこなせる仕事の範囲に収まっている。あまりたくさんのストーリーをリストに載せても仕方がない。なぜなら、6ヶ月後に状況がどうなっているかなんでわからないからだ。状況が変わっていたら、半年も前に追加したストリーなんて、もうたぶん要らなくなってるんじゃないだろうか。だったら、今から半年先のことに気を揉んだって仕方ないと思わないかい？そうはいっても、マスターストーリーリストに載っているストーリーをすべて実装し尽くしてしまったらどうするんだと思うかもしれない。確かにそういうケースもなくはないが、滅多やたらとお目にかかれるものじゃない。いつだって与えられた期間や資金よりもやるべきことは多いものだ。"
      ]
    },
    {
      "_id": "アジャイルサムライ_5",
      "message": "ストーリ一計画ミーティングは、ジャストインタイム分析の結果を確認するミーティングだ。ストーリー計画ミーティングでは、これから始まるイテレーションで取り組むストーリーの\n準備が整っていることを全員で確かめる。顧客と一緒に受入テスト条件をレビューしたり、開発チームが見積りの数値を確認したりする。ストーリーの実装を始めるにあたって、必要な調査に漏れがないことを確認するのもこのタイミングだ。場合によっては、想定していたよりもストーリーが大きいことに気づくこともあるだろうが、それはそれで構わない。1回のイテレーションに収まるようにストーリーを分割して計画を更新し、前へ進んでいけばいい。逆の場合も作戦は同じだ(思っていたよりも小さいスーリーがあったら、イテレーションに収まるだけ他の小さなストーリーを「おかわり」して計画を更新し、前に進んでいけばいい）。",
      "questions": [
        "スプリント計画",
        "ストーリ一計画ミーティング",
        "",
        "",
        "",
        "",
        "",
        "",
        "ストーリ一計画ミーティングは、ジャストインタイム分析の結果を確認するミーティングだ。ストーリー計画ミーティングでは、これから始まるイテレーションで取り組むストーリーの準備が整っていることを全員で確かめる。顧客と一緒に受入テスト条件をレビューしたり、開発チームが見積りの数値を確認したりする。ストーリーの実装を始めるにあたって、必要な調査に漏れがないことを確認するのもこのタイミングだ。場合によっては、想定していたよりもストーリーが大きいことに気づくこともあるだろうが、それはそれで構わない。1回のイテレーションに収まるようにストーリーを分割して計画を更新し、前へ進んでいけばいい。逆の場合も作戦は同じだ(思っていたよりも小さいスーリーがあったら、イテレーションに収まるだけ他の小さなストーリーを「おかわり」して計画を更新し、前に進んでいけばいい）。"
      ]
    },
    {
      "_id": "アジャイルサムライ_6",
      "message": "デイリースタンドアップは、重要な情報をチーム内ですばやく共有することを目的にした集まりだ。あらゆるミーティングを無くすための究極のミーティングがデイリースタンドアップだ。デイリースタンドアップはここまでに本章で紹介してきたミーテイングと違い、会議体として正式に「開催」しない。\nチームメンバーが毎日、自主的に集まって話し合う。１回のミーティングにかける時間は5分から長くても10分程度にして、立ったままでやる(簡潔に伝えることを常に意識するためだ)。\nこの場で報告する内容は、基本的には自分の作業の最新状況だ。チームメンバーに知っておいてもらいたいことがあれば、それもこの場で共有する。さて、大抵のアジャイル手法の解説書に載っているデイリースタンドアップのやり方はこうだ。全員で輸になって立ち、チームメンバーひとりひとりが、他のチームメンバー全員に対して次の3つを伝える。\n・昨日やったこと\n・今日やること\n・チームの開発速度を下げてしまうことがあれば何でも\nなかなかいいんじゃないか。でもこれだと、新たなひらめきとかチームの振る舞いを変えるにはちょっと物足りない。たとえば、デイリースタンドアップでの報告の仕方をこんな感じにしてみたらどうだろう？\n・昨日、世界をどう変えたのか\n・今日は何をぶちかますつもりか\n・不運にも自分の行く手を限んでしまったばかりに、あえなく吹き飛ばされるさだめとなった難問がどんな末路をたどるのか\nデイリースタンドアップでの報告の仕方をこんな風にしてみたら、場の雰囲気も一変するんじゃないだろうか。せっかくみんなの前に立って話すんだから、淡々と最新状況を報告するだけじゃもったいない。\n自分がこれからやろうと思っていることを天地神明に誓って宣言してみたらどうだろう？森羅万象を前に宣言したとなれば、取れる行動は２つに１つだ。自ら「やるぞ」と宣言したことをやり遂げるか、そうじゃないか。どっちに転ぶかはまったくもって君次第だ。つまり私からのアドバイスはこうだ。毎日、チームのみんなに「今日、私はこれをやります」とコミットメントを表明するんだ。これを続けていけば、自分でもびっくりするぐらい実際に仕事をやり遂げられるようになっていくはずだ。",
      "questions": [
        "デイリースクラム",
        "デイリースタンドアップ",
        "",
        "",
        "",
        "",
        "",
        "",
        "デイリースタンドアップは、重要な情報をチーム内ですばやく共有することを目的にした集まりだ。あらゆるミーティングを無くすための究極のミーティングがデイリースタンドアップだ。デイリースタンドアップはここまでに本章で紹介してきたミーテイングと違い、会議体として正式に「開催」しない。チームメンバーが毎日、自主的に集まって話し合う。１回のミーティングにかける時間は5分から長くても10分程度にして、立ったままでやる(簡潔に伝えることを常に意識するためだ)。この場で報告する内容は、基本的には自分の作業の最新状況だ。チームメンバーに知っておいてもらいたいことがあれば、それもこの場で共有する。さて、大抵のアジャイル手法の解説書に載っているデイリースタンドアップのやり方はこうだ。全員で輸になって立ち、チームメンバーひとりひとりが、他のチームメンバー全員に対して次の3つを伝える。・昨日やったこと・今日やること・チームの開発速度を下げてしまうことがあれば何でもなかなかいいんじゃないか。でもこれだと、新たなひらめきとかチームの振る舞いを変えるにはちょっと物足りない。たとえば、デイリースタンドアップでの報告の仕方をこんな感じにしてみたらどうだろう？・昨日、世界をどう変えたのか・今日は何をぶちかますつもりか・不運にも自分の行く手を限んでしまったばかりに、あえなく吹き飛ばされるさだめとなった難問がどんな末路をたどるのかデイリースタンドアップでの報告の仕方をこんな風にしてみたら、場の雰囲気も一変するんじゃないだろうか。せっかくみんなの前に立って話すんだから、淡々と最新状況を報告するだけじゃもったいない。自分がこれからやろうと思っていることを天地神明に誓って宣言してみたらどうだろう？森羅万象を前に宣言したとなれば、取れる行動は２つに１つだ。自ら「やるぞ」と宣言したことをやり遂げるか、そうじゃないか。どっちに転ぶかはまったくもって君次第だ。つまり私からのアドバイスはこうだ。毎日、チームのみんなに「今日、私はこれをやります」とコミットメントを表明するんだ。これを続けていけば、自分でもびっくりするぐらい実際に仕事をやり遂げられるようになっていくはずだ。"
      ]
    },
    {
      "_id": "アジャイルサムライ_7",
      "message": "ショーケース（スプリントレビュー）はチームが成し遂げた成果をお披露目して、\nお客さんから本物のフィードバックを得る絶好の機会だ。\nショーケースでは今回のイテレーションで実装したストーリーをデモする。\nそのときに見せるのは、テストサーパにデプロイした本物のコードだ。\n上手に描けた図を見せるのでもなければ、うまくいくであろう目論見を伝えるのでもない。\nここで見せるのは、ちゃんと動くように開発チームが奮闘した結果であり、\n必要とあらば今ここで本番環境にリリースできるコードだ。\nなぜなら作業は「完了」しているからだ。",
      "questions": [
        "スプリントレビュー",
        "ショーケース",
        "",
        "",
        "",
        "",
        "",
        "",
        "ショーケース（スプリントレビュー）はチームが成し遂げた成果をお披露目して、お客さんから本物のフィードバックを得る絶好の機会だ。ショーケースでは今回のイテレーションで実装したストーリーをデモする。そのときに見せるのは、テストサーパにデプロイした本物のコードだ。上手に描けた図を見せるのでもなければ、うまくいくであろう目論見を伝えるのでもない。ここで見せるのは、ちゃんと動くように開発チームが奮闘した結果であり、必要とあらば今ここで本番環境にリリースできるコードだ。なぜなら作業は「完了」しているからだ。"
      ]
    },
    {
      "_id": "アジャイルサムライ_8",
      "message": "ミニふりかえりは、10分とか15分ぐらいの時間で開催する、短くて集中したミーティングだ。チーム全員が定期的に集まって、すごくうまくいったことやもっとうまくやるためにどうすればいいかを話し合うんだ。有意義なふりかえりをするために一番大切なルールは、みんなが安心できる雰囲気を作ることだ。もしそこに問題があるようなら「ふりかえり最重要条項」の出番だ。これができなきゃ始まらないってことを肝に銘じておこう。\nどんな問題が出てきたとしても、私たちは次のことを納得し、それを心から信じます。チームメンバーそれぞれは、その当時わかっていたこと、備えていた自分自身のスキルと能力、手に入れることのできたリソース、そして現場の状況に応じて、自分の力が及ぶ限りの全力を尽くしたのです。\nつまり、ふりかえりは魔女狩りじゃない。",
      "questions": [
        "プロジェクトふりかえり",
        "ミニふりかえり",
        "",
        "",
        "",
        "",
        "",
        "",
        "ミニふりかえりは、10分とか15分ぐらいの時間で開催する、短くて集中したミーティングだ。チーム全員が定期的に集まって、すごくうまくいったことやもっとうまくやるためにどうすればいいかを話し合うんだ。有意義なふりかえりをするために一番大切なルールは、みんなが安心できる雰囲気を作ることだ。もしそこに問題があるようなら「ふりかえり最重要条項」の出番だ。これができなきゃ始まらないってことを肝に銘じておこう。どんな問題が出てきたとしても、私たちは次のことを納得し、それを心から信じます。チームメンバーそれぞれは、その当時わかっていたこと、備えていた自分自身のスキルと能力、手に入れることのできたリソース、そして現場の状況に応じて、自分の力が及ぶ限りの全力を尽くしたのです。つまり、ふりかえりは魔女狩りじゃない。"
      ]
    },
    {
      "_id": "アジャイルサムライ_9",
      "message": "イテレーション計画ミーティングでは、開発チームと顧客とが一緒になって、次回のイテレーションの作業を計画する。チームのベロシティを確認し、次にとりかかるストーリーを整理する。そして、次回のイテレーションでチーム全体としてコミットメントする作業量を見極める。イテレーション計画ミーティングは、プロジェクトの健康状態を確認するのにふさわしいタイミングでもある。\nプロジェクトの現状を気性速報みたいに表現するのも悪くないだろう。何か必要なものがあるとか、特に話し合っておきたい厄介な問題があるんだったら、それも併せて伝えよう。\nプロジェクトがいつ頃おわりそうなのかを把握したいなら、バーンダウンチャートを使うのがいい。バーンダウンチャートは残酷なまでに正直な、冷酷非情のツールだ。プロジェクト完了への現実的な見通しをありのままに淡々と開発チームと顧客に報告してくれる。",
      "questions": [
        "イテレーション計画",
        "プロダクトバックログリファインメント",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション計画ミーティングでは、開発チームと顧客とが一緒になって、次回のイテレーションの作業を計画する。チームのベロシティを確認し、次にとりかかるストーリーを整理する。そして、次回のイテレーションでチーム全体としてコミットメントする作業量を見極める。イテレーション計画ミーティングは、プロジェクトの健康状態を確認するのにふさわしいタイミングでもある。プロジェクトの現状を気性速報みたいに表現するのも悪くないだろう。何か必要なものがあるとか、特に話し合っておきたい厄介な問題があるんだったら、それも併せて伝えよう。プロジェクトがいつ頃おわりそうなのかを把握したいなら、バーンダウンチャートを使うのがいい。バーンダウンチャートは残酷なまでに正直な、冷酷非情のツールだ。プロジェクト完了への現実的な見通しをありのままに淡々と開発チームと顧客に報告してくれる。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_1",
      "message": "状況の変化にすばやく適応できる能力のことだ。サーファーは、予想よりも早く波が砕けても適応できなければならない。開発者なら、想定外の早さで設計が破綻しでも適応できなければならない。",
      "questions": [
        "アジャイルであることとは？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "状況の変化にすばやく適応できる能力のことだ。サーファーは、予想よりも早く波が砕けても適応できなければならない。開発者なら、想定外の早さで設計が破綻しでも適応できなければならない。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_10",
      "message": "批判するならアイデアになさい、人ではなく\n誰のアイデアが優れているかを競うのではなく、解決策を導き出せたことに誇りを持ちなさい。",
      "questions": [
        "批判したい",
        "嫌いな人がいる",
        "納得できない",
        "",
        "",
        "",
        "",
        "",
        "批判するならアイデアになさい、人ではなく誰のアイデアが優れているかを競うのではなく、解決策を導き出せたことに誇りを持ちなさい。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_11",
      "message": "正しいことをしましょう。\n誠実に、勇気を出して真実を伝えなさい。時にはそれが難しいこともあるでしょう。だからこそ勇気が必要なのです。",
      "questions": [
        "言いたいことが言えない",
        "ポイズン",
        "勇気が出ない",
        "",
        "",
        "",
        "",
        "",
        "正しいことをしましょう。誠実に、勇気を出して真実を伝えなさい。時にはそれが難しいこともあるでしょう。だからこそ勇気が必要なのです。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_12",
      "message": "へラクレイトス日く、「変化せぬものは変化のみ」。これは有史以来の真実だが、とりわけ現代にはこの言葉が似つかわしい。この業界は絶え間なく変化し、活気に溢れている。「自分はコンピュータサイエンスや関連する専門分野の専攻だったから、もう学ぶべきことなどない」などと思っているようなら、それは勘違いにもほどがあるというものだ。",
      "questions": [
        "レガシー",
        "変化したくない",
        "",
        "",
        "",
        "",
        "",
        "",
        "へラクレイトス日く、「変化せぬものは変化のみ」。これは有史以来の真実だが、とりわけ現代にはこの言葉が似つかわしい。この業界は絶え間なく変化し、活気に溢れている。「自分はコンピュータサイエンスや関連する専門分野の専攻だったから、もう学ぶべきことなどない」などと思っているようなら、それは勘違いにもほどがあるというものだ。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_13",
      "message": "技術の変化に付いていきましょう\nあらゆる分野のエキスパートになる必要はありませんが、業界がどこへ向かっているのかは把握しておきなさい。それを踏まえて自分のキャリアとプロジェクトの計画を立てるのです。",
      "questions": [
        "キャリアパス",
        "今後",
        "",
        "",
        "",
        "",
        "",
        "",
        "技術の変化に付いていきましょうあらゆる分野のエキスパートになる必要はありませんが、業界がどこへ向かっているのかは把握しておきなさい。それを踏まえて自分のキャリアとプロジェクトの計画を立てるのです。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_14",
      "message": "あなた自身とチームのレベルを引き上げましょう\nブラウンバッグミーティングを活用してメンバーの知識とスキルを高め、チームの結束を固めるのです。プロジェクトにプラスとなる技術や手法にチームの関心を向けさせるのです。",
      "questions": [
        "独り占めしたい",
        "教えたくない",
        "属人的が良い",
        "",
        "",
        "",
        "",
        "",
        "あなた自身とチームのレベルを引き上げましょうブラウンバッグミーティングを活用してメンバーの知識とスキルを高め、チームの結束を固めるのです。プロジェクトにプラスとなる技術や手法にチームの関心を向けさせるのです。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_15",
      "message": "新しきを学び、古きを捨てましょう。\n新しい技術を学ぶときには、足を引っ張りかねない古い習慣を捨てなさい。自動車は馬車とは別次元のものであって、単に馬のついていない馬車というわけではないのです。",
      "questions": [
        "習慣",
        "慣習",
        "踏襲",
        "",
        "",
        "",
        "",
        "",
        "新しきを学び、古きを捨てましょう。新しい技術を学ぶときには、足を引っ張りかねない古い習慣を捨てなさい。自動車は馬車とは別次元のものであって、単に馬のついていない馬車というわけではないのです。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_16",
      "message": "なぜ? と問い続けなさい。言われたことを額面どおりに受け取ってはいけません。問題の担本を理解す\nるまで質問し続けるのです。\n\n「Fifth Discipline FieldBook」では、こうした根本原因分析の一例が紹介されている。\nあるコンサルタントが製造工場の管理者に聞き取りをした時の話だ。\n床に油がこぼれているのを目にした管理者は、最初の反応として、それを消掃するよう指示した。\n一方、コンサルタントはこう尋ねた。「なぜ床に油がこぼれているのでしょうか? 」\n 質問の主旨を捉えかねた管理者は、消掃担当者の怠慢を叱責した。コンサルタントは再び尋ねた。「なぜ床に油がこぼれているのでしょうか? J」\n部門を横断して大勢の従業員に対して果敢に「なぜ? J を繰り返し聞い続けた結果、\nコンサルタントはついに問題の真相を突き止めた。購買条件の記述が不十分だったせいで、\n不備のあるガスケットが大量に購入されていたのだ。この結末は、管理者をはじめすべての関係者にかなりの街曜を与えた。思いもよらないことだったのだ。おかげで深刻な問題が白日の下にさらされた。この問題が放置されていたら事態はさらに悪化し、損害も鉱大していただろう。\n今回、コンサルタントがしたことは「なぜ? J と尋ねること、それだけだった。",
      "questions": [
        "質問",
        "疑問",
        "なぜ？",
        "",
        "",
        "",
        "",
        "",
        "なぜ? と問い続けなさい。言われたことを額面どおりに受け取ってはいけません。問題の担本を理解するまで質問し続けるのです。「Fifth Discipline FieldBook」では、こうした根本原因分析の一例が紹介されている。あるコンサルタントが製造工場の管理者に聞き取りをした時の話だ。床に油がこぼれているのを目にした管理者は、最初の反応として、それを消掃するよう指示した。一方、コンサルタントはこう尋ねた。「なぜ床に油がこぼれているのでしょうか? 」 質問の主旨を捉えかねた管理者は、消掃担当者の怠慢を叱責した。コンサルタントは再び尋ねた。「なぜ床に油がこぼれているのでしょうか? J」部門を横断して大勢の従業員に対して果敢に「なぜ? J を繰り返し聞い続けた結果、コンサルタントはついに問題の真相を突き止めた。購買条件の記述が不十分だったせいで、不備のあるガスケットが大量に購入されていたのだ。この結末は、管理者をはじめすべての関係者にかなりの街曜を与えた。思いもよらないことだったのだ。おかげで深刻な問題が白日の下にさらされた。この問題が放置されていたら事態はさらに悪化し、損害も鉱大していただろう。今回、コンサルタントがしたことは「なぜ? J と尋ねること、それだけだった。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_17",
      "message": "アジャイル開発者は、さまざまな情報源からフィードバックを得る。ユーザ、チームメンパ一、それからテストされているコード。こうしたフィードバックを活用することで、プロジェクトの進む方向を調整できる。これら具体的なフィードバックに加えて、流れていった時間そのものからも、きわめて重要な形のフィードバックが得られる。\nアジャイルの手法の多くは、タイムボックス化をベースとしている。『タイムボックス化』とは、作業に対して短期間の、厳しい締め切りを設定することだ。締め切りの延長はなしだ。どこで作業の帳尻を合わせるかは自分で選ぶことができる。だが、締め切りは固定だ。すべての作業を完了させるまでにタイムボックスがいくつ必要なのか、正確な数はわからない場合がほとんどだろう。それでも、個々のタイムボックスの期聞は短く限定しておく。タイムボックスごとに、はっきりとした目標を設定して成果をあげ\nていくんだ。\n例えば、よくあるイテレーションの長さは数週間だ。最終日を迎えたらイテレーションは終了する。イテレーションの長さは固定だが、あるイテレーションでどの機能に取り組むかは柔軟に決めていい。別の言い方をすれば、日付は動かせないが、機能は動かせるということだ。同じやり方で設計ミーティングもタイムボックス化できる。つまり、所定の時聞が来たらミーティングは終了し、その時点で設計をどうするかが決まっているということだ。厳しい締め切りが設定されれば、とにかく選択せざるを得ない。哲学的な議論や、いつまでたっても進捗率80 パーセントの機能にかまけて時聞を浪費するわけにはいかなくなる。タイムボックスが物事を前進させるんだ。\nサメは泳ぎ続けなければ死んでしまう。その意味では、ソフトウェアプロジェクトもサメみたいなものだ。その都度その都度での最良の情報を活用して、前進し続けなければならない。",
      "questions": [
        "タイムボックス",
        "リズム",
        "",
        "",
        "",
        "",
        "",
        "",
        "アジャイル開発者は、さまざまな情報源からフィードバックを得る。ユーザ、チームメンパ一、それからテストされているコード。こうしたフィードバックを活用することで、プロジェクトの進む方向を調整できる。これら具体的なフィードバックに加えて、流れていった時間そのものからも、きわめて重要な形のフィードバックが得られる。アジャイルの手法の多くは、タイムボックス化をベースとしている。『タイムボックス化』とは、作業に対して短期間の、厳しい締め切りを設定することだ。締め切りの延長はなしだ。どこで作業の帳尻を合わせるかは自分で選ぶことができる。だが、締め切りは固定だ。すべての作業を完了させるまでにタイムボックスがいくつ必要なのか、正確な数はわからない場合がほとんどだろう。それでも、個々のタイムボックスの期聞は短く限定しておく。タイムボックスごとに、はっきりとした目標を設定して成果をあげていくんだ。例えば、よくあるイテレーションの長さは数週間だ。最終日を迎えたらイテレーションは終了する。イテレーションの長さは固定だが、あるイテレーションでどの機能に取り組むかは柔軟に決めていい。別の言い方をすれば、日付は動かせないが、機能は動かせるということだ。同じやり方で設計ミーティングもタイムボックス化できる。つまり、所定の時聞が来たらミーティングは終了し、その時点で設計をどうするかが決まっているということだ。厳しい締め切りが設定されれば、とにかく選択せざるを得ない。哲学的な議論や、いつまでたっても進捗率80 パーセントの機能にかまけて時聞を浪費するわけにはいかなくなる。タイムボックスが物事を前進させるんだ。サメは泳ぎ続けなければ死んでしまう。その意味では、ソフトウェアプロジェクトもサメみたいなものだ。その都度その都度での最良の情報を活用して、前進し続けなければならない。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_18",
      "message": "顧客に決断してもらうのです。\n開発者、マネージャ、業務アナリストは、ビジネスに重大な影響を及ぼす決定を下すべきではありません。事の詳細を、ビジネスの担い手に理解しても\nらえる言葉で伝えたうえで、顧客に決断してもらうのです。",
      "questions": [
        "決断",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "顧客に決断してもらうのです。開発者、マネージャ、業務アナリストは、ビジネスに重大な影響を及ぼす決定を下すべきではありません。事の詳細を、ビジネスの担い手に理解してもらえる言葉で伝えたうえで、顧客に決断してもらうのです。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_19",
      "message": "優れた段計は地図です。少しずつ発展させるのです。\n設計は、正しい方向を示す道しるべではありますが、土地そのものではありません。\n具体的な道順を事細かに指定すべきものでもありません。設計(または設計者) に囚われてはいけません。",
      "questions": [
        "設計書",
        "ドキュメント",
        "厳密",
        "",
        "",
        "",
        "",
        "",
        "優れた段計は地図です。少しずつ発展させるのです。設計は、正しい方向を示す道しるべではありますが、土地そのものではありません。具体的な道順を事細かに指定すべきものでもありません。設計(または設計者) に囚われてはいけません。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_2",
      "message": "2001 年2 月、17 人の同志がユタ州のスノーバードに集まった。会合の目的は、当時軽量プロセス(Lightweight Processes)と総称されていた新たなソフトウェア開発の動向について話し合うことだった。そのころアンディたちは、中間成果物の多さの割には最終成果物が少ない重厚長大な開発方法論のせいで、数々のプロジェクトが失敗するのを目の当たりにしていた。もっと優れた関発方法論があるはずだ。重要度の高い事柄に注力し、重要度の低い事柄( 貴重な時間を浪費するばかりで、大して成果の出ない事柄) には労力を割かないようにする方法論が。\n17 人はそれにアジャイルという名前を与え、アジャイルマニフェストを発表した。\nアジャイルマニフェストでは、ソフトウェア開発で重視するものを改めて考え直した。\n重視するのは、人、人と人との交流と協調、適応力、動作するソフトウェアだ。",
      "questions": [
        "アジャイルの本質とは？",
        "どこで生まれた",
        "アジャイルマニフェスト",
        "",
        "",
        "",
        "",
        "",
        "2001 年2 月、17 人の同志がユタ州のスノーバードに集まった。会合の目的は、当時軽量プロセス(Lightweight Processes)と総称されていた新たなソフトウェア開発の動向について話し合うことだった。そのころアンディたちは、中間成果物の多さの割には最終成果物が少ない重厚長大な開発方法論のせいで、数々のプロジェクトが失敗するのを目の当たりにしていた。もっと優れた関発方法論があるはずだ。重要度の高い事柄に注力し、重要度の低い事柄( 貴重な時間を浪費するばかりで、大して成果の出ない事柄) には労力を割かないようにする方法論が。17 人はそれにアジャイルという名前を与え、アジャイルマニフェストを発表した。アジャイルマニフェストでは、ソフトウェア開発で重視するものを改めて考え直した。重視するのは、人、人と人との交流と協調、適応力、動作するソフトウェアだ。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_20",
      "message": "いついかなる時でもプロジェクトをリリース可能な状態にしておくのです。\nプロジェクトを常に、コンパイルが通り、実行可能で、テストも通っていて、突然のデプロイ要請にも迅速に対応できる状態にしておきなさい。",
      "questions": [
        "リリース可能",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "いついかなる時でもプロジェクトをリリース可能な状態にしておくのです。プロジェクトを常に、コンパイルが通り、実行可能で、テストも通っていて、突然のデプロイ要請にも迅速に対応できる状態にしておきなさい。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_21",
      "message": "はやめに統合すれば、サブシステム問の相互作用と連携がどうなっているのかを確認できる。データのやり取りや共有の方法も実際に調べられる。統合にあたって解決すべき課題を早く把握できれば、早い段階で対処できるし、修正の手間も比較的少なくて済む。これは、3 人の開発者で5 万行のコードベースを手がける場合であっても、5 千人で3 千万行を手がける場合でも同じだ。ところが統合を先延ばしにしていると、こうした統合にまつわる問題は手に負えないものになりかねない。対処しようにもコードの修正が広範囲にわたって必要になってしまい、納期の遅れや混乱を招いてしまうのだ。",
      "questions": [
        "コードの統合",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "はやめに統合すれば、サブシステム問の相互作用と連携がどうなっているのかを確認できる。データのやり取りや共有の方法も実際に調べられる。統合にあたって解決すべき課題を早く把握できれば、早い段階で対処できるし、修正の手間も比較的少なくて済む。これは、3 人の開発者で5 万行のコードベースを手がける場合であっても、5 千人で3 千万行を手がける場合でも同じだ。ところが統合を先延ばしにしていると、こうした統合にまつわる問題は手に負えないものになりかねない。対処しようにもコードの修正が広範囲にわたって必要になってしまい、納期の遅れや混乱を招いてしまうのだ。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_22",
      "message": "頻繁にフィードバックを得よう。イテレーションの周期が四半期や1 年では長すぎる。\n1 回のイテレーションの長さは、1 週間か2 週間にすること。アプリケーションについて顧客からフィードバックを得ることに積極的になろう。たとえまだ実装が不十分な機能があったとしても、見せることで何らかのフィードバックを得られるからだ。",
      "questions": [
        "デモ",
        "フィードバック",
        "",
        "",
        "",
        "",
        "",
        "",
        "頻繁にフィードバックを得よう。イテレーションの周期が四半期や1 年では長すぎる。1 回のイテレーションの長さは、1 週間か2 週間にすること。アプリケーションについて顧客からフィードバックを得ることに積極的になろう。たとえまだ実装が不十分な機能があったとしても、見せることで何らかのフィードバックを得られるからだ。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_23",
      "message": "インクリメンタルに開発しなさい。\n最小限だけれども、きちんと使える機能を備えた製品をリリースしなさい。\n各インクリメントの開発では、1～4 週間周期のイテレーションをまわすのです。",
      "questions": [
        "開発の単位",
        "インクリメンタル",
        "",
        "",
        "",
        "",
        "",
        "",
        "インクリメンタルに開発しなさい。最小限だけれども、きちんと使える機能を備えた製品をリリースしなさい。各インクリメントの開発では、1～4 週間周期のイテレーションをまわすのです。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_24",
      "message": "■ユニットテストは索早いフィードバックを提供する。\n　コードは何度も繰り返し実行される。コードの変更や書き直しを行っても、元の振る舞いを壊していないことをテストケースが保証する。もし何か問題があれば、すぐに確認して修正できる。\n■ユニットテストはコードを堅牢にする\n　テストは、正常ケース、異常ケース、例外ケースの実行を通してコードの振る舞いを徹底して考えるのに役立つ。\n■ユニットテストは役に立つ設計ツールである\n　ユニットテストは、実用的でシンプルな設計の実現にも役立つ。\n■ユニットテストは開発者の自信を強める\n　コードをテストすることで、さまざまな条件での振る舞いを試すことになる。おかげで、厳しいスケジュールでプレッシャーのきつい、新しい作業に直而したときであっても、自信を持って取り組める。\n■ユニットテストは問題解決時には探査装置となる\n　ユニットテストは、いわばプリント基板のテストに使うオシロスコープのプロープと同じような役割を果たす。問題が発生したらすぐに、コードの内部動作のパルスを測定できる。これは問題を突き止めて解決するための自然なやり方だ。\n■ユニットテストは信頼のおけるドキュメントである\n　新しいAPI を知るにあたっては、そのAPI のユニットテストを正確で信頼のおけるドキュメントとして活用できる。\n■ユニットテストは学習教材である\n　新しいAPI を使い始めるときには、そのAPI のテストを作成することから始めると、学習効果を高められる。こうしたラーニングテスト( 学習テスト) は、API の動作を理解するためだけでなく、後になって互換性のない変更が加えられたときに、それをすばやく検出するのにも役立つ。",
      "questions": [
        "ユニットテスト",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "■ユニットテストは索早いフィードバックを提供する。　コードは何度も繰り返し実行される。コードの変更や書き直しを行っても、元の振る舞いを壊していないことをテストケースが保証する。もし何か問題があれば、すぐに確認して修正できる。■ユニットテストはコードを堅牢にする　テストは、正常ケース、異常ケース、例外ケースの実行を通してコードの振る舞いを徹底して考えるのに役立つ。■ユニットテストは役に立つ設計ツールである　ユニットテストは、実用的でシンプルな設計の実現にも役立つ。■ユニットテストは開発者の自信を強める　コードをテストすることで、さまざまな条件での振る舞いを試すことになる。おかげで、厳しいスケジュールでプレッシャーのきつい、新しい作業に直而したときであっても、自信を持って取り組める。■ユニットテストは問題解決時には探査装置となる　ユニットテストは、いわばプリント基板のテストに使うオシロスコープのプロープと同じような役割を果たす。問題が発生したらすぐに、コードの内部動作のパルスを測定できる。これは問題を突き止めて解決するための自然なやり方だ。■ユニットテストは信頼のおけるドキュメントである　新しいAPI を知るにあたっては、そのAPI のユニットテストを正確で信頼のおけるドキュメントとして活用できる。■ユニットテストは学習教材である　新しいAPI を使い始めるときには、そのAPI のテストを作成することから始めると、学習効果を高められる。こうしたラーニングテスト( 学習テスト) は、API の動作を理解するためだけでなく、後になって互換性のない変更が加えられたときに、それをすばやく検出するのにも役立つ。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_25",
      "message": "あらゆる不満に真実が潜んでいるのです。\nその真実を見つけ出し、本当の問題に対処なさい。",
      "questions": [
        "顧客の声",
        "ユーザーの声",
        "ユーザの声",
        "",
        "",
        "",
        "",
        "",
        "あらゆる不満に真実が潜んでいるのです。その真実を見つけ出し、本当の問題に対処なさい。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_26",
      "message": "Scrum では、チームメンバーと非チームメンバーの役割を、それぞれブタとニワトリと名付けている。チームメンバーがブタ( これはいい名前I) で、非チームメンバー( マネージャ、サポート、品質保証担当など) がニワトリだ。ブタとニワトリという表現は、一緒にレストランを開こうとしている家畜の寓話にちなんでいる。レストランで朝食にベーコンエッグを出そうとすれば、ニワトリも確かに手を貸すが、プタにはコミットメントが求められる。ニワトリは卵を産むだけでいいが、プタの方は命がけだ。\nScrum ではr「ブタ」だけがスタンドアップミーティングに参加できる。",
      "questions": [
        "ブタ",
        "ニワトリ",
        "",
        "",
        "",
        "",
        "",
        "",
        "Scrum では、チームメンバーと非チームメンバーの役割を、それぞれブタとニワトリと名付けている。チームメンバーがブタ( これはいい名前I) で、非チームメンバー( マネージャ、サポート、品質保証担当など) がニワトリだ。ブタとニワトリという表現は、一緒にレストランを開こうとしている家畜の寓話にちなんでいる。レストランで朝食にベーコンエッグを出そうとすれば、ニワトリも確かに手を貸すが、プタにはコミットメントが求められる。ニワトリは卵を産むだけでいいが、プタの方は命がけだ。Scrum ではr「ブタ」だけがスタンドアップミーティングに参加できる。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_27",
      "message": "まともな設計は積極的にコードを書くプログラマから生まれます。\n本物の洞察は、実際にコードを書くことからもたらされます。コーディングしないアーキテクトと一緒に仕事をしないように。システムの実態を知らずにまともに設計なんでできません。",
      "questions": [
        "まともな設計",
        "アーキテクト",
        "",
        "",
        "",
        "",
        "",
        "",
        "まともな設計は積極的にコードを書くプログラマから生まれます。本物の洞察は、実際にコードを書くことからもたらされます。コーディングしないアーキテクトと一緒に仕事をしないように。システムの実態を知らずにまともに設計なんでできません。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_28",
      "message": "メンターになりましょう。\n自分の知識をほかの人たちと分かち合うのは楽しいことです。与えることで得られるものがあります。ほかの人たちを刺激して、もっと良い結果を出せるようにしなさい。チーム全体の能力を高めるように努めなさい。",
      "questions": [
        "教えたくない",
        "分かち合いたくない",
        "",
        "",
        "",
        "",
        "",
        "",
        "メンターになりましょう。自分の知識をほかの人たちと分かち合うのは楽しいことです。与えることで得られるものがあります。ほかの人たちを刺激して、もっと良い結果を出せるようにしなさい。チーム全体の能力を高めるように努めなさい。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_29",
      "message": "みんなに問題を解決する機会を与えなさい。\n解決策を与えるのではなく、正しい方向に導くのです。その過程で誰もが何かを学ぶことができます。",
      "questions": [
        "教え方",
        "答えを教える",
        "学び",
        "",
        "",
        "",
        "",
        "",
        "みんなに問題を解決する機会を与えなさい。解決策を与えるのではなく、正しい方向に導くのです。その過程で誰もが何かを学ぶことができます。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_3",
      "message": "アジャイルなアプローチとは、適応力と協調を重んじる人々が、一丸となって目に見える具体的な目標( きちんと動作するソフトウェア)に向かっていくことである。これがアジャイルの本質だ。開発がアジャイルになると、開発現場で重点を置くものが、計画を絶対視する(plan-based) 方式から、より自然で継続的なスタイルへと変化していく。アジャイル開発では、チームのメンバー( およびチームと共に作業するメンバー)全員が、プロジェクトで明確な結果を出すことを目指すプロフェッショナルであることを前提としている。",
      "questions": [
        "アジャイルなアプローチとは？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "アジャイルなアプローチとは、適応力と協調を重んじる人々が、一丸となって目に見える具体的な目標( きちんと動作するソフトウェア)に向かっていくことである。これがアジャイルの本質だ。開発がアジャイルになると、開発現場で重点を置くものが、計画を絶対視する(plan-based) 方式から、より自然で継続的なスタイルへと変化していく。アジャイル開発では、チームのメンバー( およびチームと共に作業するメンバー)全員が、プロジェクトで明確な結果を出すことを目指すプロフェッショナルであることを前提としている。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_30",
      "message": "あらゆることをみんなに知らせましょう。\n自分の状況、アイデア、関心のある事柄などを公開しなさい。ほかの人たちから仕事の状況を尋ねられるまで黙っていてはいけません。",
      "questions": [
        "透明性",
        "情報の共有",
        "",
        "",
        "",
        "",
        "",
        "",
        "あらゆることをみんなに知らせましょう。自分の状況、アイデア、関心のある事柄などを公開しなさい。ほかの人たちから仕事の状況を尋ねられるまで黙っていてはいけません。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_4",
      "message": "アジャイル開発において、必ずしも全員が経験豊富なプロフェッショナルではないかもしれない。しかし、プロフェッショナルとしての意識を持ち、自らの持てる力を最大限に発揮したいという意欲に満ちている。",
      "questions": [
        "アジャイルは全員がプロフェッショナルである必要があるのか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "アジャイル開発において、必ずしも全員が経験豊富なプロフェッショナルではないかもしれない。しかし、プロフェッショナルとしての意識を持ち、自らの持てる力を最大限に発揮したいという意欲に満ちている。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_5",
      "message": "ずる休み、手抜き、あからさまなサボりに悩まされているチームには、アジャイル開発は合わないと思う。そんなチームに必要なのは、もっと鈍重で時間のかかる、生産性の低い開発プロセスだ。\nあなたが胸を張って「うちのチームはそんなんじゃない」と言えるなら、アジャイルなスタイルで開発を始められる。\nアジャイルな開発スタイルとは、つまりこういうことだ。プロジェクトの最後にまとめてテストしない。統合を月末まで延期しない。コードを書き始めたからといって要求やフィードバックの反映を止めない。",
      "questions": [
        "アジャイルに向いてないチーム",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ずる休み、手抜き、あからさまなサボりに悩まされているチームには、アジャイル開発は合わないと思う。そんなチームに必要なのは、もっと鈍重で時間のかかる、生産性の低い開発プロセスだ。あなたが胸を張って「うちのチームはそんなんじゃない」と言えるなら、アジャイルなスタイルで開発を始められる。アジャイルな開発スタイルとは、つまりこういうことだ。プロジェクトの最後にまとめてテストしない。統合を月末まで延期しない。コードを書き始めたからといって要求やフィードバックの反映を止めない。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_6",
      "message": "アジャイルなプロジェクトの開発は、これまでとは違って、プロジェクトのライフサイクル全体を通じて、あらゆる作業を継続的に実行するんだ。そもそもソフトウェアというものは、ユーザが使い続ける限り、本当の意味で「完成」することはない。だから、ソフトウェアの開発はもはやプロジェクトですらないといってもいい。\nソフトウェア開発は継続的なものなんだ。フィードバックも継続的だ。\n問題を発見するまでに何カ月も待つ必要はない。まだ傷が浅いうちに見つけ出し、すばやく修正する。\n見つけたその時、見つけたその場で、だ。これがアジャイルな開発スタイルだ。\n",
      "questions": [
        "アジャイルなプロジェクト",
        "アジャイルな開発スタイル",
        "継続的な開発",
        "",
        "",
        "",
        "",
        "",
        "アジャイルなプロジェクトの開発は、これまでとは違って、プロジェクトのライフサイクル全体を通じて、あらゆる作業を継続的に実行するんだ。そもそもソフトウェアというものは、ユーザが使い続ける限り、本当の意味で「完成」することはない。だから、ソフトウェアの開発はもはやプロジェクトですらないといってもいい。ソフトウェア開発は継続的なものなんだ。フィードバックも継続的だ。問題を発見するまでに何カ月も待つ必要はない。まだ傷が浅いうちに見つけ出し、すばやく修正する。見つけたその時、見つけたその場で、だ。これがアジャイルな開発スタイルだ。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_7",
      "message": "どんなときも、最初に最大の難問へ取り組みなさい。簡単なものは後回しでよいのです。",
      "questions": [
        "どこから始めるか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "どんなときも、最初に最大の難問へ取り組みなさい。簡単なものは後回しでよいのです。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_8",
      "message": "非難してもバグは直りません。\n誰かの後る指をさすのではなく、自分のできる解決策に注力しなさい。大事なことは、意味のある成果をあげることです。",
      "questions": [
        "非難したい人がいる",
        "非難したいバグがある",
        "俺のせいじゃない",
        "",
        "",
        "",
        "",
        "",
        "非難してもバグは直りません。誰かの後る指をさすのではなく、自分のできる解決策に注力しなさい。大事なことは、意味のある成果をあげることです。"
      ]
    },
    {
      "_id": "アジャイルプラクティス_9",
      "message": "応急処置の誘惑に打ち勝ちなさい。\nいつでもきれいな状態のコードを見せられるように全力を尽くしなさい。",
      "questions": [
        "時間がない",
        "コードが汚い",
        "",
        "",
        "",
        "",
        "",
        "",
        "応急処置の誘惑に打ち勝ちなさい。いつでもきれいな状態のコードを見せられるように全力を尽くしなさい。"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１",
      "message": "「うまくいったことは何?」「違ったやり方でできることは何?」といった質問以外のことをレトロスペクティブで初めて行うには準備が必要だ。\n準備にはどれだけ時聞がかかるのだるうか?最初のうちは、レトロスペクティブの所要時間と同じくらいかかるだろう。目標の決定、道具や場所の手配、アクティピティの選択、レトロスペクティブのリードの準備に時間が必要だ。1時間のレトロスベクティブだと、1時間の準備が必要だろう。\n何度も準備を重ねていくうちに、次第に時間は短くなっていく。しかし、準備時聞がゼロになることはない。それは何も考えていないということだからだ。実践を繰り 返し、慣れ親しんだアクティビティが増えていけば、迅速に準備ができるようになるだろう。\n同様に、初めてのリリースやプロジエクト終了後に行う 1日がかりのレトロスペクティブでは、準備にかなりの時間をかける必要がある。これには意味がある。5.20人 が一緒に終日学習するとなると、彼らの時間を有効活用でき、求められる結果を連成で きるようなセッションにしたいからだ。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "レトロスペクティブの準備にはどれだけ時間がかかりますか?",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "「うまくいったことは何?」「違ったやり方でできることは何?」といった質問以外のことをレトロスペクティブで初めて行うには準備が必要だ。準備にはどれだけ時聞がかかるのだるうか?最初のうちは、レトロスペクティブの所要時間と同じくらいかかるだろう。目標の決定、道具や場所の手配、アクティピティの選択、レトロスペクティブのリードの準備に時間が必要だ。1時間のレトロスベクティブだと、1時間の準備が必要だろう。何度も準備を重ねていくうちに、次第に時間は短くなっていく。しかし、準備時聞がゼロになることはない。それは何も考えていないということだからだ。実践を繰り 返し、慣れ親しんだアクティビティが増えていけば、迅速に準備ができるようになるだろう。同様に、初めてのリリースやプロジエクト終了後に行う 1日がかりのレトロスペクティブでは、準備にかなりの時間をかける必要がある。これには意味がある。5.20人 が一緒に終日学習するとなると、彼らの時間を有効活用でき、求められる結果を連成で きるようなセッションにしたいからだ。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１０",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブにおいて、感情 のデータを集めるために使用する。\n目的：事実に対して抱いた感情について議論する。\n所要時間：チームの規模によるが、20〜30分。\n概要：各人がカラーカードや付筆紙を使って、プロジェクトの最中に喜んだり、怒った り、哀しかったりした時間を表す。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "喜、怒、哀 (MadSadGlad)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブにおいて、感情 のデータを集めるために使用する。目的：事実に対して抱いた感情について議論する。所要時間：チームの規模によるが、20〜30分。概要：各人がカラーカードや付筆紙を使って、プロジェクトの最中に喜んだり、怒った り、哀しかったりした時間を表す。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１１",
      "message": "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、事実 と感情に関するデータを集めるために使用する。続けて、アイデアを出すための 「テーマの特定」アクティピティを行う。\n目的：強みを特定し、チームが次のイテレーションでそれらを生かせるようにする。イ テレーション、リリース、プロジェクトがうまくいかなかったときに、バランスを保つ。\n所要時間：インタビューには、質問の数にもよるが、15.40分。テーマの特定には、20.40分(もしくはそれ以上)かかる。2つを合わせると、30分.90分はかかるだろう。 \n概要：チームメンバーがプロジェクトの良かったポイントについて、お互いにインタ ビューする。目標は、これらの良かったポイントを作り出した原因や状況を理解することである 。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "強みを見つける (LocateStrengths)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、事実 と感情に関するデータを集めるために使用する。続けて、アイデアを出すための 「テーマの特定」アクティピティを行う。目的：強みを特定し、チームが次のイテレーションでそれらを生かせるようにする。イ テレーション、リリース、プロジェクトがうまくいかなかったときに、バランスを保つ。所要時間：インタビューには、質問の数にもよるが、15.40分。テーマの特定には、20.40分(もしくはそれ以上)かかる。2つを合わせると、30分.90分はかかるだろう。 概要：チームメンバーがプロジェクトの良かったポイントについて、お互いにインタ ビューする。目標は、これらの良かったポイントを作り出した原因や状況を理解することである 。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１２",
      "message": "イテレーションレトロスペクティブで場を設定したり、データを収集したりするために使用する。\n目的：チームメンパーの満足度を表す。現在の状況を見える化することで、チームはよ り深く議論したり分析したりすることができる。チームメンパーの観点の違いを認める。\n所要時間：5.10分。 \n概要：チームメンパーはヒストグラムを使って、プラクティスやプロセスに対する個人 やグループの満足度を計測する。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "満足ヒストグラム(SatisfactionHistogram)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーションレトロスペクティブで場を設定したり、データを収集したりするために使用する。目的：チームメンパーの満足度を表す。現在の状況を見える化することで、チームはよ り深く議論したり分析したりすることができる。チームメンパーの観点の違いを認める。所要時間：5.10分。 概要：チームメンパーはヒストグラムを使って、プラクティスやプロセスに対する個人 やグループの満足度を計測する。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１３",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブで、データを収集するために使用する。\n目的：技術的手法、チームの価値、その他のプロセスを指標として、チームがどれだけうまくやっているかを計測する。\n所要時間：15〜20分。\n概要：調査したいプロセスや開発のプラクテイスの要素について、個人やグループの評価を計測する。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "チームレーダー (TeamRadar)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブで、データを収集するために使用する。目的：技術的手法、チームの価値、その他のプロセスを指標として、チームがどれだけうまくやっているかを計測する。所要時間：15〜20分。概要：調査したいプロセスや開発のプラクテイスの要素について、個人やグループの評価を計測する。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１４",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブで、データを収集するために使用する。\n目的：イテレーション(リリース、プロジェクト)での経験を思い出し、他の人の受け 止め方の速いを聞く。\n所要時間：30〜40分。\n概要：「性質」カードに一番よく合っているイテレーションのイベントや要因がどれかを メンバーが順番に判定する。カードを評価すると同時に、同じイベントや状況に対 する観点の違いを学ぶ。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "ライクトゥライク (Like to Like) ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブで、データを収集するために使用する。目的：イテレーション(リリース、プロジェクト)での経験を思い出し、他の人の受け 止め方の速いを聞く。所要時間：30〜40分。概要：「性質」カードに一番よく合っているイテレーションのイベントや要因がどれかを メンバーが順番に判定する。カードを評価すると同時に、同じイベントや状況に対 する観点の違いを学ぶ。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１５",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブで、アイデアを 出すために使う。\n目的：で゙きるだけ多くのアイデアを出し あらかじめ決められた評価基準に基づいて フィルタリングする。\n所要時間：40〜60分。\n概要：チームメンパーは従来のプレインストーミング手法を使ってアイデアを出す。次に、それらのアイデアが現在の状況に適しているかどうかを吟味する。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "ブレインストーミング/フィルタリング(Brainstorming/Filtering)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブで、アイデアを 出すために使う。目的：で゙きるだけ多くのアイデアを出し あらかじめ決められた評価基準に基づいて フィルタリングする。所要時間：40〜60分。概要：チームメンパーは従来のプレインストーミング手法を使ってアイデアを出す。次に、それらのアイデアが現在の状況に適しているかどうかを吟味する。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１６",
      "message": "リリースまたはプロジェクトのレトロスペクティブでアイデアを出すときに、可能性のある変更を提案するためのアクティピティと一緒に使用する。何をすべきか を決定するときの計画エクササイズの一環として使用する。\n目的：提案された変更に対して、組織内のどの要因がサポートし、どの要因が抑制して いるのかを考察する。\n所要時間：問題の複雑さやチームの規模によるが、45〜60分。\n概要：チームは達成したいと望む状態を定義する。小さなグループを作り、望ましい変 更をサポートまたは抑制する要因を特定する。それらの要因を用紙に脅き出す。サ ポートする要因聞の相対的な強さを評価する。同様に、抑制する要因聞の相対的な 強さを評価する。チームは、サポートする要因を強めたり、抑制する要因を弱めたりすることで、影響を与えられる要因はないか議論する。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "フォースフィールドアナリシス (ForceFieldAnalysis)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "リリースまたはプロジェクトのレトロスペクティブでアイデアを出すときに、可能性のある変更を提案するためのアクティピティと一緒に使用する。何をすべきか を決定するときの計画エクササイズの一環として使用する。目的：提案された変更に対して、組織内のどの要因がサポートし、どの要因が抑制して いるのかを考察する。所要時間：問題の複雑さやチームの規模によるが、45〜60分。概要：チームは達成したいと望む状態を定義する。小さなグループを作り、望ましい変 更をサポートまたは抑制する要因を特定する。それらの要因を用紙に脅き出す。サ ポートする要因聞の相対的な強さを評価する。同様に、抑制する要因聞の相対的な 強さを評価する。チームは、サポートする要因を強めたり、抑制する要因を弱めたりすることで、影響を与えられる要因はないか議論する。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１７",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブで、アイデアを 出すために使用する。\n目的：問題の根本的な原因を発見する。\n所要時間：15〜20分。\n概要：チームメンパーは問題を調べるためにペアまたは小さなグループで作業する。「なぜ ?」を5回繰り返すことで、習慣的な考えを突破する。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "5つのなぜ (FiveWhys)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブで、アイデアを 出すために使用する。目的：問題の根本的な原因を発見する。所要時間：15〜20分。概要：チームメンパーは問題を調べるためにペアまたは小さなグループで作業する。「なぜ ?」を5回繰り返すことで、習慣的な考えを突破する。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１８",
      "message": "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、アイ デアを出すために使用する。\n目的：課題の根本的な原因を特定するために過去の症状を調べる。問題や不具合の原因 を探す。\n所要時間：30〜60分。\n概要：チームは問題の状況を作り出した要因のなかから、最も可能性の高いものを探し 出す。可能性の高い要因を特定したら、それを変更したり操作したりする方法を 探す。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "フィッシュボーン図 (Fishbone)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、アイ デアを出すために使用する。目的：課題の根本的な原因を特定するために過去の症状を調べる。問題や不具合の原因 を探す。所要時間：30〜60分。概要：チームは問題の状況を作り出した要因のなかから、最も可能性の高いものを探し 出す。可能性の高い要因を特定したら、それを変更したり操作したりする方法を 探す。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_１９",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブでアイデアを出 すために、データを収集する見える化アクティピティ (「タイムライン」、「喜、怒、 哀」など)と一緒に使用する。\n目的：事実と感情のつながりを探す。イテレーション、リリース、プロジェクトのデー タを分析する。現在の課題の要因となっているパターンをグループに認識してもら い、名前をつけてもらう。\n所要時間：グループやデータの規模によるが、15〜60分。\n概要：データを収集したあとに、データを分析するために議論をファシリテートして、 イベント、振る舞い、感情などのパターンを探す。また、シフトが起きた時期を探 す。たとえば、すべてがスムーズに進んでいるときに急にエネルギーが落ちたよう なときだ。フリップチャートなどにアイデアを書き留めておく。タイムラインを 使っていれば、タイムライン上に書いてもよい。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "パターンとシフト (PaternsandShifts)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブでアイデアを出 すために、データを収集する見える化アクティピティ (「タイムライン」、「喜、怒、 哀」など)と一緒に使用する。目的：事実と感情のつながりを探す。イテレーション、リリース、プロジェクトのデー タを分析する。現在の課題の要因となっているパターンをグループに認識してもら い、名前をつけてもらう。所要時間：グループやデータの規模によるが、15〜60分。概要：データを収集したあとに、データを分析するために議論をファシリテートして、 イベント、振る舞い、感情などのパターンを探す。また、シフトが起きた時期を探 す。たとえば、すべてがスムーズに進んでいるときに急にエネルギーが落ちたよう なときだ。フリップチャートなどにアイデアを書き留めておく。タイムラインを 使っていれば、タイムライン上に書いてもよい。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２",
      "message": "イテレーションレトロスペクティブで場を設定するために使用する。\n目的：余計なことを考えずに、レトロスペクティブに集中してもらう。レトロスペク ティプから何を得たいのかを明確にしてもらう。\n所要時間：チームの規模によるが、5〜10分。\n概要：参加者を歓迎し、目標とアジェンダのレビューを行ったあとで、レトロスペク ティプのリーダーが簡単な質問を1つする。メンパーは順番に質問に答える。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "チェックイン (Check-In)とは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーションレトロスペクティブで場を設定するために使用する。目的：余計なことを考えずに、レトロスペクティブに集中してもらう。レトロスペク ティプから何を得たいのかを明確にしてもらう。所要時間：チームの規模によるが、5〜10分。概要：参加者を歓迎し、目標とアジェンダのレビューを行ったあとで、レトロスペク ティプのリーダーが簡単な質問を1つする。メンパーは順番に質問に答える。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２０",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブで、アイデアを出したり、何をすべきかを決定したりするために使用する。\n目的：グループが候補となる変更や提案をどのように優先づけるかを調べる。\n所要時間：選択肢の数やグループの規模によるが、5〜20分。\n概要：チームメンパーは課題、アイデア、提案を優先づける。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "ドットによる優先づけ (PrioritizewithDots) ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブで、アイデアを出したり、何をすべきかを決定したりするために使用する。目的：グループが候補となる変更や提案をどのように優先づけるかを調べる。所要時間：選択肢の数やグループの規模によるが、5〜20分。概要：チームメンパーは課題、アイデア、提案を優先づける。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２１",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブで、小さなグルー プに分かれて行うアイデアを出すための分析アクティピティと一緒に使用する。\n目的：小さなグループで出した考えやアイデアをチーム全体で共有する。共通の話題や テーマを探し、チーム全体を活気づけるアイデアを探す。\n所要時間：グループの数やレポートにかける時間によるが、20〜60分。\n概要：各グループは成果をチーム全体で共有する。レトロスペクティブのリーダーは、 レポートが時間内に収まるようプログレスパーを管理する。最後のレポートが提出 されたら共通の話題やテーマを探し、取り組みたいことを特定する。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "まとめレポート (ReportOutwithSynthesis)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブで、小さなグルー プに分かれて行うアイデアを出すための分析アクティピティと一緒に使用する。目的：小さなグループで出した考えやアイデアをチーム全体で共有する。共通の話題や テーマを探し、チーム全体を活気づけるアイデアを探す。所要時間：グループの数やレポートにかける時間によるが、20〜60分。概要：各グループは成果をチーム全体で共有する。レトロスペクティブのリーダーは、 レポートが時間内に収まるようプログレスパーを管理する。最後のレポートが提出 されたら共通の話題やテーマを探し、取り組みたいことを特定する。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２２",
      "message": "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、「強み を見つける」アクティピティを行ったあとに、アイデアを出すために使用する。\n目的：「強みを見つける」アクティピティのインタビューで共通の話題を見つける。試み、変更、提案に対する説得力のあるアイデアを見つける。\n所要時間：1.2時間。\n概要：「強みを見つける」アクティピティのインタビューのあとで、ペアはグループを 作ってインタビューから学んだことを報告する。チームメンパーはそこから共通の テーマや説得力のあるアイデアを見つける。テーマを特定したら、アイデアの脅か れたカードを仕分ける。各グループは自分たちでカードの山を1つ選択し、アイデ アをさらに詳細化する。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "テーマの特定 OdentifyThemes)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、「強み を見つける」アクティピティを行ったあとに、アイデアを出すために使用する。目的：「強みを見つける」アクティピティのインタビューで共通の話題を見つける。試み、変更、提案に対する説得力のあるアイデアを見つける。所要時間：1.2時間。概要：「強みを見つける」アクティピティのインタビューのあとで、ペアはグループを 作ってインタビューから学んだことを報告する。チームメンパーはそこから共通の テーマや説得力のあるアイデアを見つける。テーマを特定したら、アイデアの脅か れたカードを仕分ける。各グループは自分たちでカードの山を1つ選択し、アイデ アをさらに詳細化する。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２３",
      "message": "バックログ\n目的：チームのデータから重要なものを見つける。\n所要時間：20〜25分。\n概要：4つの観点からデータを見て、課題を素早く洗い出す。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "学習マトリックス (LearningMatrix) ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "バックログ目的：チームのデータから重要なものを見つける。所要時間：20〜25分。概要：4つの観点からデータを見て、課題を素早く洗い出す。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２４",
      "message": "リリースやプロジェクトのレトロスペクティブの「何をすべきかを決定する」 フェーズで、アクション計画を作るために使用する。\n目的：試みや提案の詳細な計画を作る。\n所要時間：試みの数やグループの人数にもよるが、40〜75分。\n概要：チームメンパーは個人またはペアで試み、改善、提案などを完遂するために必要 なすべてのタスクを洗い出す。一通り済んだら、余分なタスクは削除し、不足して いるタスクがあれば追加する。タスクは順番に並べられ、チームメンパーがタスク にサインアップする。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "レトロスペクティブ計画ゲーム(RetrospectivePlanningGame)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "リリースやプロジェクトのレトロスペクティブの「何をすべきかを決定する」 フェーズで、アクション計画を作るために使用する。目的：試みや提案の詳細な計画を作る。所要時間：試みの数やグループの人数にもよるが、40〜75分。概要：チームメンパーは個人またはペアで試み、改善、提案などを完遂するために必要 なすべてのタスクを洗い出す。一通り済んだら、余分なタスクは削除し、不足して いるタスクがあれば追加する。タスクは順番に並べられ、チームメンパーがタスク にサインアップする。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２５",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブで、何をすべき かを決定するために使用する。\n目的：アイデアを優先づけしてアクション計画に移す。明確に計測できるアクションを作る。\n所要時間：チームの規模によるが、20〜60分。\n概要：チームが、Specific(明確な)、Measurable(計測可能な)、Attainable(達成可能な)、Relevant(適切な)、Timely(タイムリーな)目標を作れるように集中してもらう。こうした性質を持った目標であれば、達成できる可能性が高い。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "SMARTな目標 (SMARTGoals)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブで、何をすべき かを決定するために使用する。目的：アイデアを優先づけしてアクション計画に移す。明確に計測できるアクションを作る。所要時間：チームの規模によるが、20〜60分。概要：チームが、Specific(明確な)、Measurable(計測可能な)、Attainable(達成可能な)、Relevant(適切な)、Timely(タイムリーな)目標を作れるように集中してもらう。こうした性質を持った目標であれば、達成できる可能性が高い。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２６",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブで、何をすべきかを決定するために使用する。\n目的：次のイテレーションにおける試みやアクションステップをチームが選びやすいよ うにする。特に、チームメンパーがお互いの意見を聞く必要のあるときに使用するとよし。\n所要時間：チーム規模によるが、30分以上。\n概要：次のステップに対する全員の意見を一致させるために、チームメンバーがお互いに質問をする。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "質問の輪 (CircleofQueslions) ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブで、何をすべきかを決定するために使用する。目的：次のイテレーションにおける試みやアクションステップをチームが選びやすいよ うにする。特に、チームメンパーがお互いの意見を聞く必要のあるときに使用するとよし。所要時間：チーム規模によるが、30分以上。概要：次のステップに対する全員の意見を一致させるために、チームメンバーがお互いに質問をする。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２７",
      "message": "イテレーションレトロスペクティブで何をすべきかを決定するために使う。\n目的：非常に短いレトロスペクティブのなかで、チームの行いに対する観点、の違いを見つけられるようにして、多様性に気づいてもらう。\n所要時間：20〜30分。\n概要：フリップチャートの指示に従って、チームはアクションのアイデアを洗い出す。 たとえば、以下のようなものが挙げられる。\n・うまくいったこと/次回はやり方を変えたいこと\n・ 続けること(Keep)/やめること (Drop)/加えること(Add)\n・ 続けること(Keep)/問題点(Problem)/試 してみること(Try)・やめること(StopDoing)/始めること(StartDoing)/続けること(KeepDoing)\n・ 開始 (Start)/中止 (Stop)/継続 (Stay) ・ニコニコ/イライラ\n・喜/怒/哀\n・誇/謝 ・プラス/デルタ(イテレーションに対して使う)\n（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "短い話題 (ShortSubjects) ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーションレトロスペクティブで何をすべきかを決定するために使う。目的：非常に短いレトロスペクティブのなかで、チームの行いに対する観点、の違いを見つけられるようにして、多様性に気づいてもらう。所要時間：20〜30分。概要：フリップチャートの指示に従って、チームはアクションのアイデアを洗い出す。 たとえば、以下のようなものが挙げられる。・うまくいったこと/次回はやり方を変えたいこと・ 続けること(Keep)/やめること (Drop)/加えること(Add)・ 続けること(Keep)/問題点(Problem)/試 してみること(Try)・やめること(StopDoing)/始めること(StartDoing)/続けること(KeepDoing)・ 開始 (Start)/中止 (Stop)/継続 (Stay) ・ニコニコ/イライラ・喜/怒/哀・誇/謝 ・プラス/デルタ(イテレーションに対して使う)（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２８",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブを終了するために使用する。\n目的：レトロスペクティブのふりかえりを行ったり、強みや改善点を見つけたりする。\n所要時間：チームの規模によるが、10.20分。\n概要：チームは(今以上にやるべき)強みや、次のレトロスペクティブで変更すること を見つける。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "プラス/デルタ (+/Delta)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブを終了するために使用する。目的：レトロスペクティブのふりかえりを行ったり、強みや改善点を見つけたりする。所要時間：チームの規模によるが、10.20分。概要：チームは(今以上にやるべき)強みや、次のレトロスペクティブで変更すること を見つける。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_２９",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブを終了するために使用する。\n目的：チームメンパーがお互いに感謝し合う。ポジティプにレトロスペクティブを終了 する。\n所要時間：チームの規模によるが、5〜30分。\n概要：助けてくれたり、貢献してくれたり、問題を解決してくれたりしたメンパーに感 謝する。感謝することは任意である 。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "感謝 (Apreciations) ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブを終了するために使用する。目的：チームメンパーがお互いに感謝し合う。ポジティプにレトロスペクティブを終了 する。所要時間：チームの規模によるが、5〜30分。概要：助けてくれたり、貢献してくれたり、問題を解決してくれたりしたメンパーに感 謝する。感謝することは任意である 。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_３",
      "message": "イテレーションレトロスペクティブで場を設定するために使用する。\n目的：生産的なコミュニケーシヨンをするためのマインドセットを確立する。非難や批評をしないようにする。非難や批評を好ましくないものと思うようにする。\n所要時間：チームの規模によるが、8.12分。\n概要：参加者を歓迎し、目標とアジェンダのレビューを行ったあとで、レトロスペク ティプのリーダーが、生産的なコミュニケーションのパターンと非生産的なコミュ ニケーションのパターンについて説明する。参加者たちは、その説明を聞いたあと で、今回のレトロスペクティブにおいてそれが何を意味するのかを議論する。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "フォーカスオン/フォーカスオフ(FocusOn/Focus0何)とは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーションレトロスペクティブで場を設定するために使用する。目的：生産的なコミュニケーシヨンをするためのマインドセットを確立する。非難や批評をしないようにする。非難や批評を好ましくないものと思うようにする。所要時間：チームの規模によるが、8.12分。概要：参加者を歓迎し、目標とアジェンダのレビューを行ったあとで、レトロスペク ティプのリーダーが、生産的なコミュニケーションのパターンと非生産的なコミュ ニケーションのパターンについて説明する。参加者たちは、その説明を聞いたあと で、今回のレトロスペクティブにおいてそれが何を意味するのかを議論する。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_３０",
      "message": "場を設定したり、イテレーションレトロスペクティブを終了したりするときに使用する。\n目的 自分たちの「立ち位置」を調べる。グループに起きていることに対応する実践的な方法である。\n所要時間：チームの規模によるが、10〜30分。 \n概要：チームメンバーが、チームに起きていること、望むことを報告する。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "温度計(TemperatureReading) ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "場を設定したり、イテレーションレトロスペクティブを終了したりするときに使用する。目的 自分たちの「立ち位置」を調べる。グループに起きていることに対応する実践的な方法である。所要時間：チームの規模によるが、10〜30分。 概要：チームメンバーが、チームに起きていること、望むことを報告する。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_３１",
      "message": "イテレーションやリリースのレトロスペクティブを終了するときに使用する。\n目的：レトロスペクティブのリーダーがフィードバックを受け取り、スキルやプロセスを改善する役に立つ。\n所要時間：5〜10分。\n概要：レトロスペクティブのリーダーがチームメンバーからフィードバックを集める。 これによって、セッションのなかで一緒に作業したり学んだりする際に役立つたこ とを発見したり、邪魔になったことを見つけたり、今後のレトロスペクティブで試 してみることのアイデアを手に入れたりする。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "役立つた、邪魔だった、仮定した (Helped, Hindered, Hypothesis)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーションやリリースのレトロスペクティブを終了するときに使用する。目的：レトロスペクティブのリーダーがフィードバックを受け取り、スキルやプロセスを改善する役に立つ。所要時間：5〜10分。概要：レトロスペクティブのリーダーがチームメンバーからフィードバックを集める。 これによって、セッションのなかで一緒に作業したり学んだりする際に役立つたこ とを発見したり、邪魔になったことを見つけたり、今後のレトロスペクティブで試 してみることのアイデアを手に入れたりする。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_３２",
      "message": "イテレーションやリリースのレトロスペクティブの終了時(あるいは、改善した いと思うミーティングの終了時)に使用する。\n目的：レトロスペクティブのプロセスについて、フィードバックを出しやすくする。レ トロスペクティプの有効性をチームメンパーの観点、から計測する。\n所要時間：10分。\n概要：レトロスペクティブの終了時に、時間を有効に使えたかどうかのフィードバック を求める。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "投資時間対効果 (ROTI)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーションやリリースのレトロスペクティブの終了時(あるいは、改善した いと思うミーティングの終了時)に使用する。目的：レトロスペクティブのプロセスについて、フィードバックを出しやすくする。レ トロスペクティプの有効性をチームメンパーの観点、から計測する。所要時間：10分。概要：レトロスペクティブの終了時に、時間を有効に使えたかどうかのフィードバック を求める。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_４",
      "message": "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、場を 設定するために使用する。\n目的：レトロスペクティブの作業にフォーカスしてもらう。みんなのレトロスペクティ プに対する考えを理解する。\n所要時間：10.15分。\n概要：参加者はレトロスペクティブに臨む自分の立場を、Explorer(探検家)、Shopper(買物客)、Vacationer(行楽客)、Prisoner(囚人)の4つのタイプを使って匿名報告する。これらの頭文字をとって「ESVPJと呼ぶ。レトロスペクティブのリーダーは結果を集めて、データを表すヒストグラムを作る。その後、結果がグループにとってどんな意味があるのかを議論してもらう。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "ESVPとは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、場を 設定するために使用する。目的：レトロスペクティブの作業にフォーカスしてもらう。みんなのレトロスペクティ プに対する考えを理解する。所要時間：10.15分。概要：参加者はレトロスペクティブに臨む自分の立場を、Explorer(探検家)、Shopper(買物客)、Vacationer(行楽客)、Prisoner(囚人)の4つのタイプを使って匿名報告する。これらの頭文字をとって「ESVPJと呼ぶ。レトロスペクティブのリーダーは結果を集めて、データを表すヒストグラムを作る。その後、結果がグループにとってどんな意味があるのかを議論してもらう。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_５",
      "message": "イテレーション、リリース、プロジェクトのレトロスペクティブで、場を設定するために使用する。\n目的：チームが生産的な議論をするための行動様式を確立する。チームメンパーには、その行動様式に沿っているかをお互いにチェックする責任があることを理解しても らう。チームの約束がまだない場合は、チームの約束の候補を挙げる。\n所要時間：チームの規模によるが、10〜30分程度。\n概要：効果的に仕事をするための振る舞いについて、チームでアイデアを出し合う。そのなかから5〜7つを選び、チームの相互作用やプロセスの手引きとする。 （書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "チームの約束(WorkingAgrements)とは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーション、リリース、プロジェクトのレトロスペクティブで、場を設定するために使用する。目的：チームが生産的な議論をするための行動様式を確立する。チームメンパーには、その行動様式に沿っているかをお互いにチェックする責任があることを理解しても らう。チームの約束がまだない場合は、チームの約束の候補を挙げる。所要時間：チームの規模によるが、10〜30分程度。概要：効果的に仕事をするための振る舞いについて、チームでアイデアを出し合う。そのなかから5〜7つを選び、チームの相互作用やプロセスの手引きとする。 （書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_６",
      "message": "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、デー タを収集するために使用する。\n目的：作業のインクリメントで何が起こったのかを思い出す。多くの観点を基にして、作業の全体像を作り上げる。誰がいつ何を行ったかという前提を調査する。パターンやエネルギーレベルがいつ変わったのかを調べる。「事実のみ」あるいは「事実と感情」をデータに使う。\n所要時間：チームの規模や作業のインクリメントの長さによるが、30〜90分。\n概要：グループメンパーが、イテレーション、リリース、プロジェクトで起きた、記憶 に残ったり、個人的に意味があったり、そうでなくても重要だったりするイベント をカードに脅しそれらを(大まかに)時間順に並べる。事実や感情を理解するために、レトロスペクティブのリーダーは、イテレーション、リリース、プロジェクト中に起きたイベントをチームに議論してもらう。 （書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "タイムライン (Timeline)とは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、デー タを収集するために使用する。目的：作業のインクリメントで何が起こったのかを思い出す。多くの観点を基にして、作業の全体像を作り上げる。誰がいつ何を行ったかという前提を調査する。パターンやエネルギーレベルがいつ変わったのかを調べる。「事実のみ」あるいは「事実と感情」をデータに使う。所要時間：チームの規模や作業のインクリメントの長さによるが、30〜90分。概要：グループメンパーが、イテレーション、リリース、プロジェクトで起きた、記憶 に残ったり、個人的に意味があったり、そうでなくても重要だったりするイベント をカードに脅しそれらを(大まかに)時間順に並べる。事実や感情を理解するために、レトロスペクティブのリーダーは、イテレーション、リリース、プロジェクト中に起きたイベントをチームに議論してもらう。 （書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_７",
      "message": "タイムラインアクティピティのバリエーションをいくつか集めた。事実と感情の データを引き出すために、インデックスカード、付筆紙、マーカー、ドットを様々 な方法で利用する。たとえば、バリエーションには以下のようなものがある。\n感情の色分け 事実と感情のデータを両方集めるために、感情を色で表す。たとえば\n・青=悲しい、頭にきた、最悪\n・赤=困難、行き詰まった\n・緑=満足した、成功した、元気がある \n・黄色=注意、混乱 \n・紫=面白い、驚いた、楽しい \n・サーモンピンク=疲れた、ストレス\nイベントのタイプを表すために色分けする。たとえば、\n・黄色=技術的あるいは技術に関連したイベント \n・ピンク=人やチームに関連したイベント \n・緑=組織に関連したイベント\n職務を表すために色分けする。たとえば、\n・青=開発者 \n・ピンク=顧客\n・緑 =QA、テスター \n・黄色=テクニカルライター\nチームが特定の問題にフォーカスしたい場合、テーマに関連したイベントを表すために色を使う。たとえば、\n・黄色=チームコミュニケーション \n・青=設備使用 \n・ピンク=顧客との関係 \n・緑=技術的手法\n手元にあるカードや付筆紙に応じて、使う色を決めてもよい。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "バリエーション",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "タイムラインアクティピティのバリエーションをいくつか集めた。事実と感情の データを引き出すために、インデックスカード、付筆紙、マーカー、ドットを様々 な方法で利用する。たとえば、バリエーションには以下のようなものがある。感情の色分け 事実と感情のデータを両方集めるために、感情を色で表す。たとえば・青=悲しい、頭にきた、最悪・赤=困難、行き詰まった・緑=満足した、成功した、元気がある ・黄色=注意、混乱 ・紫=面白い、驚いた、楽しい ・サーモンピンク=疲れた、ストレスイベントのタイプを表すために色分けする。たとえば、・黄色=技術的あるいは技術に関連したイベント ・ピンク=人やチームに関連したイベント ・緑=組織に関連したイベント職務を表すために色分けする。たとえば、・青=開発者 ・ピンク=顧客・緑 =QA、テスター ・黄色=テクニカルライターチームが特定の問題にフォーカスしたい場合、テーマに関連したイベントを表すために色を使う。たとえば、・黄色=チームコミュニケーション ・青=設備使用 ・ピンク=顧客との関係 ・緑=技術的手法手元にあるカードや付筆紙に応じて、使う色を決めてもよい。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_８",
      "message": "イテレーシヨン、リリース、プロジェクトのレトロスペクティブで、「データを収集する」フェーズまたは「何をすべきかを決定する」フェーズの一部として使用する。\n目的：アクションや提案に対するアイデアを出す。プロジェクトの歴史に関する重要な トピックを明らかにする。\n所要時間：チームの規模によるが、30〜60分。\n概要：5人程度の小さなグループを作る。各人が 5分間プレインストーミングをしてアイデアを書き出す。5分経過したらアイデアを書いた紙を右隣の人に渡す。紙を渡 された人は5分間かけて、書かれたアイデアに関連した新しいアイデアを書き加える。元の持ち主に戻るまで紙を回し続ける。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "555 (TripleNickels)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "イテレーシヨン、リリース、プロジェクトのレトロスペクティブで、「データを収集する」フェーズまたは「何をすべきかを決定する」フェーズの一部として使用する。目的：アクションや提案に対するアイデアを出す。プロジェクトの歴史に関する重要な トピックを明らかにする。所要時間：チームの規模によるが、30〜60分。概要：5人程度の小さなグループを作る。各人が 5分間プレインストーミングをしてアイデアを書き出す。5分経過したらアイデアを書いた紙を右隣の人に渡す。紙を渡 された人は5分間かけて、書かれたアイデアに関連した新しいアイデアを書き加える。元の持ち主に戻るまで紙を回し続ける。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "アジャイルレトロスペクティブズ_９",
      "message": "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、感情に関するデータを集めるためにタイムラインと一緒に使用する。\n目的：タイムライン上のイベントでどのような経験をしたのかを示す。\n所要時間：5〜20分。\n概要：チームメンパーはカラーコードドットを使って、感情が高ぶったり沈んだりした イベントをタイムライン上に示す。（書籍：アジャイルレトロスペクティブズより）",
      "questions": [
        "カラーコードドット (ColorCodeDots)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "長期のイテレーション、リリース、プロジェクトのレトロスペクティブで、感情に関するデータを集めるためにタイムラインと一緒に使用する。目的：タイムライン上のイベントでどのような経験をしたのかを示す。所要時間：5〜20分。概要：チームメンパーはカラーコードドットを使って、感情が高ぶったり沈んだりした イベントをタイムライン上に示す。（書籍：アジャイルレトロスペクティブズより）"
      ]
    },
    {
      "_id": "エクストリームプログラミング_1",
      "message": "エクストリームプログラミング（XP）は、1999年ケント・ベックらによって定式化されたソフトウェア開発手法であり、代表的なアジャイルソフトウェア開発手法の1つである。\n\n当初の12のプラクティスは、\n計画ゲーム、小規模リリース、比喩、シンプルデザイン、テスティング、リファクタリング、ペアプログラミング、共同所有権、継続的インテグレーション、週40時間、オンサイト顧客、コーディング標準、であった。その後ケントベック自身によって2つのプラクティス、オープン ワークスペースと日日のデータベース移行、が追加された。\n\nまたこれらはロン・ジェフリーズによって更に洗練が進められ、チーム全体、計画ゲーム、顧客テスト、小さなリリース、シンプルなデザイン、ペアプログラミング、テストファースト開発、設計の改善、コードの共同所有、コーディング標準、継続的インテグレーション、メタファー、持続可能なペース、と変化を遂げている。\n更に、ロイ・ミラーによってプラクティスは4つに分類され、19のプラクティスとして世に広まった。現在XPとして頻出するものは、この再構成された19のプラクティスである。",
      "questions": [
        "エクストリームプログラミングとはなんですか",
        "XPとはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "エクストリームプログラミング（XP）は、1999年ケント・ベックらによって定式化されたソフトウェア開発手法であり、代表的なアジャイルソフトウェア開発手法の1つである。当初の12のプラクティスは、計画ゲーム、小規模リリース、比喩、シンプルデザイン、テスティング、リファクタリング、ペアプログラミング、共同所有権、継続的インテグレーション、週40時間、オンサイト顧客、コーディング標準、であった。その後ケントベック自身によって2つのプラクティス、オープン ワークスペースと日日のデータベース移行、が追加された。またこれらはロン・ジェフリーズによって更に洗練が進められ、チーム全体、計画ゲーム、顧客テスト、小さなリリース、シンプルなデザイン、ペアプログラミング、テストファースト開発、設計の改善、コードの共同所有、コーディング標準、継続的インテグレーション、メタファー、持続可能なペース、と変化を遂げている。更に、ロイ・ミラーによってプラクティスは4つに分類され、19のプラクティスとして世に広まった。現在XPとして頻出するものは、この再構成された19のプラクティスである。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_10",
      "message": "XPの共同のプラクティスであるユビキタス言語（共通の用語）とはなにか。\n現在のシステムのビジネスロジックをプログラマではないドメイン専門家に説明してみよう。\nドメイン専門家が理解できる言葉で、システムがどうやって動いているのかを説明できるか？\nプログラマ向けの専門用語、デザインパターンやコーディングスタイルの名前などを使わないで説明することができるか？\nドメイン専門家がビジネスロジックにおける潜在的な問題を特定することができるか？\nもしできなければ、あなたにはユビキタス言語が必要だ。",
      "questions": [
        "XPの共同のプラクティスであるユビキタス言語（共通の用語）とは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの共同のプラクティスであるユビキタス言語（共通の用語）とはなにか。現在のシステムのビジネスロジックをプログラマではないドメイン専門家に説明してみよう。ドメイン専門家が理解できる言葉で、システムがどうやって動いているのかを説明できるか？プログラマ向けの専門用語、デザインパターンやコーディングスタイルの名前などを使わないで説明することができるか？ドメイン専門家がビジネスロジックにおける潜在的な問題を特定することができるか？もしできなければ、あなたにはユビキタス言語が必要だ。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_11",
      "message": "XPの共同のプラクティスであるオープンな作業空間とは、どういったものか。\nスピーカーフォンでチームミーティングをしたことがあるなら、面と向かっての会話とどれだけ違うか分かるだろう。なまの話し合いと比べて、電話会議は遅くつっかえながら進む。会話そのものや、お互いに話し合っている人たちのあいだには、不快な隔たりがある。\nこれがどれだけ仕事に影響を及ぼしているか、自覚していないかもしれない。\n人々の距離が遠くなると、コミュニケーションの有効性も低下する。誤解が生まれ、遅延が紛れ込む。答えを待つ煩わしさを避けるために、推測し始める。すると間違いが起こる。\n多くの開発手法は、この問題に対応するために直接的なコミュニケーションの必要性を減らそうとする。これは一見理にかなった対応だ。質問が遅延やエラーを引き起こすのなら、質問の必要性を減らしてしまおう！という訳だ。\nXPではチームがオープンな仕事場に全員同席している。ここにはビジネスや設計、プログラミング、テステイングの専門家も含まれている。質問があれば振り向いて尋ねるだけでいい。すぐに返事がもらえる。もしまだはっきりしないところがあれば、ホワイトボードで議論することもできる。",
      "questions": [
        "XPの共同のプラクティスであるオープンな作業空間とは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの共同のプラクティスであるオープンな作業空間とは、どういったものか。スピーカーフォンでチームミーティングをしたことがあるなら、面と向かっての会話とどれだけ違うか分かるだろう。なまの話し合いと比べて、電話会議は遅くつっかえながら進む。会話そのものや、お互いに話し合っている人たちのあいだには、不快な隔たりがある。これがどれだけ仕事に影響を及ぼしているか、自覚していないかもしれない。人々の距離が遠くなると、コミュニケーションの有効性も低下する。誤解が生まれ、遅延が紛れ込む。答えを待つ煩わしさを避けるために、推測し始める。すると間違いが起こる。多くの開発手法は、この問題に対応するために直接的なコミュニケーションの必要性を減らそうとする。これは一見理にかなった対応だ。質問が遅延やエラーを引き起こすのなら、質問の必要性を減らしてしまおう！という訳だ。XPではチームがオープンな仕事場に全員同席している。ここにはビジネスや設計、プログラミング、テステイングの専門家も含まれている。質問があれば振り向いて尋ねるだけでいい。すぐに返事がもらえる。もしまだはっきりしないところがあれば、ホワイトボードで議論することもできる。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_12",
      "message": "XPの共同のプラクティスに頻繁な振り返りというものがある。最もよくある振り返りは、イテレーションの振り返りで、イテレーションが終わるたびに実施する。\nイテレーションの振り返りに加えて、重要なマイルストーンでもっと長く、集中的な振り返りを実施してもよい。こうしたリリースの振り返り、プロジェクトの振り返り、予期せぬ出来事によって状況が変化したときに実施される振り返りは、あなたの体験をもっと深く考える機会になり、それを組織の他の人と共有するための密度の濃い重要な教訓を与えてくれる。",
      "questions": [
        "XPの共同のプラクティスである頻繁な振り返りとは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの共同のプラクティスに頻繁な振り返りというものがある。最もよくある振り返りは、イテレーションの振り返りで、イテレーションが終わるたびに実施する。イテレーションの振り返りに加えて、重要なマイルストーンでもっと長く、集中的な振り返りを実施してもよい。こうしたリリースの振り返り、プロジェクトの振り返り、予期せぬ出来事によって状況が変化したときに実施される振り返りは、あなたの体験をもっと深く考える機会になり、それを組織の他の人と共有するための密度の濃い重要な教訓を与えてくれる。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_13",
      "message": "XPの開発のプラクティスであるテスト駆動開発（TDD）とは、テスティング、コーディング、リファクタリングのすばやいサイクルだ。機能を追加するときには、ペアは何十回もこのサイクルを繰り返す。追加するものがなくなり、取り除くものもなくなるまで、ごく小さなステップでソフトウェアを実装して改良していく。\nTDDは欠陥の発生率を大幅に削減するという研究結果もある。TDDを適切に使うと、設計を改善して、\n公開しているインターフェイスをドキュメント化し、将来の間違いを防ぐことにも役立つ。\nTDDはもちろん完壁じゃない。TDDはレガシーなコードベースで使うのは難しい。\nたとえゼロから開発するシステムであっても、学習曲線を克服して安定して使えるようになるまでには数か月かかる。\nとにかく試してみよう。TDDは他のXPプラクティスからも恩恵を受けるのだが、これらは必須というわけではない。ほぼどんなプロジェクトにでも、TDDを使うことができる。",
      "questions": [
        "XPの開発のプラクティスであるテスト駆動開発（TDD）とは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの開発のプラクティスであるテスト駆動開発（TDD）とは、テスティング、コーディング、リファクタリングのすばやいサイクルだ。機能を追加するときには、ペアは何十回もこのサイクルを繰り返す。追加するものがなくなり、取り除くものもなくなるまで、ごく小さなステップでソフトウェアを実装して改良していく。TDDは欠陥の発生率を大幅に削減するという研究結果もある。TDDを適切に使うと、設計を改善して、公開しているインターフェイスをドキュメント化し、将来の間違いを防ぐことにも役立つ。TDDはもちろん完壁じゃない。TDDはレガシーなコードベースで使うのは難しい。たとえゼロから開発するシステムであっても、学習曲線を克服して安定して使えるようになるまでには数か月かかる。とにかく試してみよう。TDDは他のXPプラクティスからも恩恵を受けるのだが、これらは必須というわけではない。ほぼどんなプロジェクトにでも、TDDを使うことができる。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_14",
      "message": "XPの開発のプラクティスであるペアプログラミングとは、２人ペアでプログラミングをすること。\nペアになると1人がコードを書く。この人がドライバーだ。もう1人はナビケータで、考えるのが仕事だ。\nナビケータはドライバーがタイプしているものについて考えるときもある。\n次に取り組むべきタスクについて考えるときもあれば、\nどうやってそのタスクを全体の設計にぴったり合わせ込むかについて考えるときもある。\nナビケータが先回りして考えてくれているおかげで、ドライバーは全体像を気にせずに、\n厳密で構文的に正しいコードを書くという戦術的課題に自由に取り組むことができる。\nナビゲータはコーディングの詳細に気を取られることなく、戦略的課題を検討することができる。\nドライバーとナビゲータは一緒に仕事をすることで、1人でやるよりも質の良い仕事をすばやく仕上げることができる。\nペア作業は、よいプログラミング習慣を強化することもできる。XPは継続的なテスティングと\n設計の改善をよりどころにしており、かなりの自己鍛錬が必要だ。ベア作業をすると、\nこうした難しいが重要なタスクをやるのに、仲間からの前向きなプレッシャーをもらえる。\nコーディングに関する知識やヒントをチーム全体に広めることができる。\nペアプログラミングをしていると、コードに完全に集中して、生産性が高いフローの中で1時間を過ごすことができる。\nこれは普段とは違った種類のフローだ。パートナーと一緒に仕事をしているおかげだ。\nそれでいて、割り込みに対してかなり抵抗力がある。まず第一に、誰かと一緒に仕事をしていると、\n職場の友人がほとんど割り込んでこないことに気づくだろう。誰かが割り込んできても\n1人がその割り込みを処理し、もう1人が思考の流れを保ち続ける。さらに周囲の雑音は気にならなくなり、\nプログラミングパートナーとの会話にずっと集中できていることに気づくだろう。\nもし仕事が物足りないと感じているなら、ペア作業は本当にすごく楽しい。\n知力が倍増することにより、障害をもっと簡単に克服することができるだろう。たいていの場合、\n頭が切れて共通の目的をもった人と協力することになる。しかも、タイプで腕が痛くなったら、\nキーボードをパートナーに渡すことで、チームは生産的であり続けることができる。",
      "questions": [
        "XPの開発のプラクティスであるペアプログラミングとは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの開発のプラクティスであるペアプログラミングとは、２人ペアでプログラミングをすること。ペアになると1人がコードを書く。この人がドライバーだ。もう1人はナビケータで、考えるのが仕事だ。ナビケータはドライバーがタイプしているものについて考えるときもある。次に取り組むべきタスクについて考えるときもあれば、どうやってそのタスクを全体の設計にぴったり合わせ込むかについて考えるときもある。ナビケータが先回りして考えてくれているおかげで、ドライバーは全体像を気にせずに、厳密で構文的に正しいコードを書くという戦術的課題に自由に取り組むことができる。ナビゲータはコーディングの詳細に気を取られることなく、戦略的課題を検討することができる。ドライバーとナビゲータは一緒に仕事をすることで、1人でやるよりも質の良い仕事をすばやく仕上げることができる。ペア作業は、よいプログラミング習慣を強化することもできる。XPは継続的なテスティングと設計の改善をよりどころにしており、かなりの自己鍛錬が必要だ。ベア作業をすると、こうした難しいが重要なタスクをやるのに、仲間からの前向きなプレッシャーをもらえる。コーディングに関する知識やヒントをチーム全体に広めることができる。ペアプログラミングをしていると、コードに完全に集中して、生産性が高いフローの中で1時間を過ごすことができる。これは普段とは違った種類のフローだ。パートナーと一緒に仕事をしているおかげだ。それでいて、割り込みに対してかなり抵抗力がある。まず第一に、誰かと一緒に仕事をしていると、職場の友人がほとんど割り込んでこないことに気づくだろう。誰かが割り込んできても1人がその割り込みを処理し、もう1人が思考の流れを保ち続ける。さらに周囲の雑音は気にならなくなり、プログラミングパートナーとの会話にずっと集中できていることに気づくだろう。もし仕事が物足りないと感じているなら、ペア作業は本当にすごく楽しい。知力が倍増することにより、障害をもっと簡単に克服することができるだろう。たいていの場合、頭が切れて共通の目的をもった人と協力することになる。しかも、タイプで腕が痛くなったら、キーボードをパートナーに渡すことで、チームは生産的であり続けることができる。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_15",
      "message": "XPの開発のプラクティスであるリファクタリングとは、毎日、自分たちのコードを前の日よりも少しよくすること。\nエントロピー(無秩序さの度合い)は常に勝つ。あなたが思い描いたような美しくうまく設計されたコードも、\n最終的には、スパゲッティのようにぐちゃぐちゃなものになる。\n少なくとも、以前はそうだった。リファクタリングする前はね。\nリファクタリングはコードの振る舞いを変更せずに設計を変更するプロセスだ。\n何をするかは同じまま、どうするかを変更する。リファクタリングは元に戻すこともできる。\nある形が別の形よりもよいことがある。変更して、また元に戻せる。\n同じように、コードの設計も変更することができる。これができると、エントロピーを寄せつけなくなる。",
      "questions": [
        "XPの開発のプラクティスであるリファクタリングとは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの開発のプラクティスであるリファクタリングとは、毎日、自分たちのコードを前の日よりも少しよくすること。エントロピー(無秩序さの度合い)は常に勝つ。あなたが思い描いたような美しくうまく設計されたコードも、最終的には、スパゲッティのようにぐちゃぐちゃなものになる。少なくとも、以前はそうだった。リファクタリングする前はね。リファクタリングはコードの振る舞いを変更せずに設計を変更するプロセスだ。何をするかは同じまま、どうするかを変更する。リファクタリングは元に戻すこともできる。ある形が別の形よりもよいことがある。変更して、また元に戻せる。同じように、コードの設計も変更することができる。これができると、エントロピーを寄せつけなくなる。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_16",
      "message": "XPの開発のプラクティスであるソースコードの共同所有とは、チーム全員が高品質なコードに責任を持つというものである。\n数人の頭の中にだけ知識が集中するのはリスクになるが、これを測る指標がある。\nこれはトラックナンバーと呼ばれている。どれくらいの人がトラックにはねられたら、\nプロジェクトが取り返しのつかない被害を被るのか？というものだ。\nゾッとする考えだが、これは現実のリスクに注意を向けている。主要メンバーが旅行に行ったり、\n病気の子供の世話をするために家にいたり、新しい仕事についたり、急に退職したりすると、何が起こるのか？\n代わりの人をトレーニングするのにどれくらい時間がかかるのか？\nコードの共同所有は、コードを維持管理する責任をプログラマ全員に広げるものだ。\nコードの共同所有とは、その名の通りのものだ。全員がコード品質に対して責任を共有している。\n誰一人としてシステムのどの部分にも所有権を主張したりせず、誰もがどの部分にも必要な変更をすることができる。",
      "questions": [
        "XPの開発のプラクティスであるソースコードの共同所有とは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの開発のプラクティスであるソースコードの共同所有とは、チーム全員が高品質なコードに責任を持つというものである。数人の頭の中にだけ知識が集中するのはリスクになるが、これを測る指標がある。これはトラックナンバーと呼ばれている。どれくらいの人がトラックにはねられたら、プロジェクトが取り返しのつかない被害を被るのか？というものだ。ゾッとする考えだが、これは現実のリスクに注意を向けている。主要メンバーが旅行に行ったり、病気の子供の世話をするために家にいたり、新しい仕事についたり、急に退職したりすると、何が起こるのか？代わりの人をトレーニングするのにどれくらい時間がかかるのか？コードの共同所有は、コードを維持管理する責任をプログラマ全員に広げるものだ。コードの共同所有とは、その名の通りのものだ。全員がコード品質に対して責任を共有している。誰一人としてシステムのどの部分にも所有権を主張したりせず、誰もがどの部分にも必要な変更をすることができる。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_17",
      "message": "XPの開発のプラクティスである継続的インテグレーション（CI）とは、コードをいつでも出荷できるようにしておくというものである。つまり究極の目標は、いつでもリリースできるようにすること。\nソフトウェア開発の取り組みには、チームが「完了した」と言う時点と、\nソフトウェアが実際に出荷できるようになったという時点のあいだに隠れた隙聞があることが多い。\nこの隙間は何か月にもなることがある。やる作業自体はそれほど大したことはない。\n全てのコードを1つにマージして、インストーラを作り、データベースを移行して、マニュアルを作るだけだ。\nそうこうしているあいだに、これらの作業にどれくらい時間をかけたのか忘れてしまい、\nチームはイライラしてくる。彼らは焦って、役に立つビルドの自動化をほったらかしにしてしまい、\nさらにバグや遅れを招いてしまう。\n継続的インテグレーションはよりよいアプローチだ。継続的インテグレーションを使うと、\n全員のコードをインテグレーションして、その他のアプリケーションとともにリリースするための\nインフラを構築しておくことができる。継続的インテグレーションの究極の目標は、\n最近の数時間を除くすべての仕事をいつでもリリースできるようにすることだ。\n実際には、イテレーションの途中でソフトウェアをリリースすることはないだろう。\nストーリーはまだ半分しか完了しておらず、機能も不完全だ。\nポイントは、たとえ機能的にはリリース可能でなくても、技術的にはリリース可能にしておくということだ。",
      "questions": [
        "XPの開発のプラクティスである継続的インテグレーション（CI）とは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの開発のプラクティスである継続的インテグレーション（CI）とは、コードをいつでも出荷できるようにしておくというものである。つまり究極の目標は、いつでもリリースできるようにすること。ソフトウェア開発の取り組みには、チームが「完了した」と言う時点と、ソフトウェアが実際に出荷できるようになったという時点のあいだに隠れた隙聞があることが多い。この隙間は何か月にもなることがある。やる作業自体はそれほど大したことはない。全てのコードを1つにマージして、インストーラを作り、データベースを移行して、マニュアルを作るだけだ。そうこうしているあいだに、これらの作業にどれくらい時間をかけたのか忘れてしまい、チームはイライラしてくる。彼らは焦って、役に立つビルドの自動化をほったらかしにしてしまい、さらにバグや遅れを招いてしまう。継続的インテグレーションはよりよいアプローチだ。継続的インテグレーションを使うと、全員のコードをインテグレーションして、その他のアプリケーションとともにリリースするためのインフラを構築しておくことができる。継続的インテグレーションの究極の目標は、最近の数時間を除くすべての仕事をいつでもリリースできるようにすることだ。実際には、イテレーションの途中でソフトウェアをリリースすることはないだろう。ストーリーはまだ半分しか完了しておらず、機能も不完全だ。ポイントは、たとえ機能的にはリリース可能でなくても、技術的にはリリース可能にしておくということだ。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_18",
      "message": "XPの開発のプラクティスであるYAGNIとは、ユー・アーント・ガナ・ニーディットの頭文字をとったもの。どうせ要らないって、という意味。\nこの完結なXPのことわざは、シンプルな設計の重要側面をまとめたものだ。\n推測に基づいてコーディングするのを避けよう。設計に何かを追記しようとしているときにはいつも、\nそれは今まさに実現しようとしているストーリーや機能をサポートするものか考えてみよう。\nもしそうでなければ、それは要らない。設計は変化するだろう。顧客の気も変わるだろう。\n同様に、もはや使われていないコードは削除しよう。\n設計をもっと小さく、もっとシンプルに、もっと理解しやすくしよう。\nもし将来もう一度それが必要になったら、いつでもバージョン管理システムから取り出すことができる。\n今のところは、必要のないメンテナンスのお荷物だけどね。\n私たちがこうしているのは、やり過ぎたコードは変更を難しくするためだ。\n変更が簡単になるように推測して手が加えられた設計は、結局、いつか間違っていることが分かることが多い。\n実際には、変更がもっと難しくなってしまう。通常は、間違った設計を修正するよりも、新たに追加する方が簡単だ。\n正しくない設計はそれに依存したコードがあり、間違った判断をそこに固定化してしまうこともある。",
      "questions": [
        "XPの開発のプラクティスであるYAGNIとは",
        "どうせ要らないって",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの開発のプラクティスであるYAGNIとは、ユー・アーント・ガナ・ニーディットの頭文字をとったもの。どうせ要らないって、という意味。この完結なXPのことわざは、シンプルな設計の重要側面をまとめたものだ。推測に基づいてコーディングするのを避けよう。設計に何かを追記しようとしているときにはいつも、それは今まさに実現しようとしているストーリーや機能をサポートするものか考えてみよう。もしそうでなければ、それは要らない。設計は変化するだろう。顧客の気も変わるだろう。同様に、もはや使われていないコードは削除しよう。設計をもっと小さく、もっとシンプルに、もっと理解しやすくしよう。もし将来もう一度それが必要になったら、いつでもバージョン管理システムから取り出すことができる。今のところは、必要のないメンテナンスのお荷物だけどね。私たちがこうしているのは、やり過ぎたコードは変更を難しくするためだ。変更が簡単になるように推測して手が加えられた設計は、結局、いつか間違っていることが分かることが多い。実際には、変更がもっと難しくなってしまう。通常は、間違った設計を修正するよりも、新たに追加する方が簡単だ。正しくない設計はそれに依存したコードがあり、間違った判断をそこに固定化してしまうこともある。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_19",
      "message": "XPの管理者のプラクティスである責任の受入とは、責任は与えられるものではなく、しかるべきメンバーが判断を求められたとき、そのメンバー自らが責任を受け入れるというもの。\nチームの仕事の管理はチームに任せよう。彼らはみな専門家だ。それこそが、彼らがチームにいる理由なんだ。信頼しよう。そして、プロジェクトを成功させるために必要な権限を与えることで、その信頼を裏付けよう。もしチームを信頼できないのなら、ふさわしい人がその場にいないということだ。完壁な人などいないが、全体としてまとまったときに信頼できるチームが必要だ。\n日常の意思決定における権限はアジャイルプロセスそのものにまで及ぶ。誰かにプロセスの変更を押しつけられるのではなく、アジャイルの原則を使って自分自身のプロセスを変更しよう。\n管理者はメンバーに対して責任を与えるのではなく、受け入れてもらうようにする必要がある。",
      "questions": [
        "XPの管理者のプラクティスである責任の受入とは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの管理者のプラクティスである責任の受入とは、責任は与えられるものではなく、しかるべきメンバーが判断を求められたとき、そのメンバー自らが責任を受け入れるというもの。チームの仕事の管理はチームに任せよう。彼らはみな専門家だ。それこそが、彼らがチームにいる理由なんだ。信頼しよう。そして、プロジェクトを成功させるために必要な権限を与えることで、その信頼を裏付けよう。もしチームを信頼できないのなら、ふさわしい人がその場にいないということだ。完壁な人などいないが、全体としてまとまったときに信頼できるチームが必要だ。日常の意思決定における権限はアジャイルプロセスそのものにまで及ぶ。誰かにプロセスの変更を押しつけられるのではなく、アジャイルの原則を使って自分自身のプロセスを変更しよう。管理者はメンバーに対して責任を与えるのではなく、受け入れてもらうようにする必要がある。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_2",
      "message": "エクストリームプログラミング（XP）には価値がある。価値とは理念のことだ。これは抽象的だが、識別でき、知覚できるものだ。XPの価値には勇気、コミュニケーション、シンプル、フィードバック、敬意（尊敬）という5つの価値がある。",
      "questions": [
        "エクストリームプログラミングの価値とはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "エクストリームプログラミング（XP）には価値がある。価値とは理念のことだ。これは抽象的だが、識別でき、知覚できるものだ。XPの価値には勇気、コミュニケーション、シンプル、フィードバック、敬意（尊敬）という5つの価値がある。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_20",
      "message": "XPの管理者のプラクティスである援護とは、管理者は開発チームの援護をするというもの。\nプロジェクトマネージャは、チームが組織内の他のメンバーと一緒に仕事をする手助けをする。\n彼らは通常、プログラミングとは無関係のプラクティスをコーチするのが得意だ。\nラインマネージャの中にはこうした役割に合っている人もいる。一方で、たいていのプロジェクトマネージャは技術的な専門知識に欠けており、XPのプログラミングに関係するプラクティスをコーチすることができない。そのため、プログラマコーチの力添えが必要になる。顧客がプロジェクトマネージャを兼ねていることもある。",
      "questions": [
        "XPの管理者のプラクティスである援護とは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの管理者のプラクティスである援護とは、管理者は開発チームの援護をするというもの。プロジェクトマネージャは、チームが組織内の他のメンバーと一緒に仕事をする手助けをする。彼らは通常、プログラミングとは無関係のプラクティスをコーチするのが得意だ。ラインマネージャの中にはこうした役割に合っている人もいる。一方で、たいていのプロジェクトマネージャは技術的な専門知識に欠けており、XPのプログラミングに関係するプラクティスをコーチすることができない。そのため、プログラマコーチの力添えが必要になる。顧客がプロジェクトマネージャを兼ねていることもある。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_21",
      "message": "XPの管理者のプラクティスである四半期毎の見直しとは、顧客が特定の四半期内に求められる機能の観点から、チーム全体の計画を立てるものです。これにより、チームが木の中にいる間、森林の景観を見ることができ、顧客が他のステークホルダーから求められている機能がいつ利用可能になるかについての考えることが必要だというものです。\n特定のストーリーに関する情報が比較的高いレベルにある場合、四半期サイクル内のストーリーをデリバリーする順序が変更され、またストーリーの内容も変更される可能性があることを覚えておいてください。毎週のサイクルのたびに再計画できる場合は、その変更が明らかになるとすぐに誰もが驚きを最小限に保つようにすることができます。",
      "questions": [
        "XPの管理者のプラクティスである四半期毎の見直しとは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの管理者のプラクティスである四半期毎の見直しとは、顧客が特定の四半期内に求められる機能の観点から、チーム全体の計画を立てるものです。これにより、チームが木の中にいる間、森林の景観を見ることができ、顧客が他のステークホルダーから求められている機能がいつ利用可能になるかについての考えることが必要だというものです。特定のストーリーに関する情報が比較的高いレベルにある場合、四半期サイクル内のストーリーをデリバリーする順序が変更され、またストーリーの内容も変更される可能性があることを覚えておいてください。毎週のサイクルのたびに再計画できる場合は、その変更が明らかになるとすぐに誰もが驚きを最小限に保つようにすることができます。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_22",
      "message": "XPの管理者のプラクティスであるミラーとは、今の状態をチームに知らせること。つまりチームの状況や状態の可視化（見える化）のことである。\n健全なプロジェクトには活気がある。緊張ではなく活気だ。興奮が漂っている。人々は会話を通じて一緒に仕事をして、ときどき冗談を言っている。\nとても忙しかったり急いでいるわけではないが、明らかに生産的だ。\nペアが助けを必要としていると他のペアがそれに気づき、力を貸したらまた仕事に戻る。ペアが何かをうまくやり遂げると、全員が少しのあいだ称賛してくれる。\n不健全なプロジェクトは静かで、緊張している。チームメンバーは何かあってもそんなに話さない。\n活気がなく、寒々とした感じがする。\n人々は時計を頼りにして生きている。出勤して、退社する。さらに悪いことに、\n誰が思い切って最初に帰るのか観察しているんだ。\n部屋の雰囲気に加えて、もう1つの手掛かりは、役に立つ情報をすばやく無意識のうちに知らせてくれるものだ。\nイテレーションも半ばに差しかかったときにイテレーション計画のカードの約半分が完了しているかどうかで、\nチームは予想よりも速く進んでいるのか、それとも遅れているのかが分かる。\n情報満載の仕事場はまた、人々がコミュニケーションする方法を提供する。\n壁一面にたくさんのホワイトボードがあり、インデックスカードが山積みになっている。\nホワイトボードに協力して書かれた設計スケッチは、\n30分のパワーポイントのプレゼンテーションよりもずっとすばやく効果的にアイデアを伝えられることが多い。\n情報満載の仕事場に欠くことができない光景は、可視化のための大きなチャートだ。\nこのチャートの目的は、情報をとてもシンプルにはっきりと見せることだ。\nこれによって、部屋のどこからでも情報を伝えることができる。",
      "questions": [
        "XPの管理者のプラクティスであるミラーとは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの管理者のプラクティスであるミラーとは、今の状態をチームに知らせること。つまりチームの状況や状態の可視化（見える化）のことである。健全なプロジェクトには活気がある。緊張ではなく活気だ。興奮が漂っている。人々は会話を通じて一緒に仕事をして、ときどき冗談を言っている。とても忙しかったり急いでいるわけではないが、明らかに生産的だ。ペアが助けを必要としていると他のペアがそれに気づき、力を貸したらまた仕事に戻る。ペアが何かをうまくやり遂げると、全員が少しのあいだ称賛してくれる。不健全なプロジェクトは静かで、緊張している。チームメンバーは何かあってもそんなに話さない。活気がなく、寒々とした感じがする。人々は時計を頼りにして生きている。出勤して、退社する。さらに悪いことに、誰が思い切って最初に帰るのか観察しているんだ。部屋の雰囲気に加えて、もう1つの手掛かりは、役に立つ情報をすばやく無意識のうちに知らせてくれるものだ。イテレーションも半ばに差しかかったときにイテレーション計画のカードの約半分が完了しているかどうかで、チームは予想よりも速く進んでいるのか、それとも遅れているのかが分かる。情報満載の仕事場はまた、人々がコミュニケーションする方法を提供する。壁一面にたくさんのホワイトボードがあり、インデックスカードが山積みになっている。ホワイトボードに協力して書かれた設計スケッチは、30分のパワーポイントのプレゼンテーションよりもずっとすばやく効果的にアイデアを伝えられることが多い。情報満載の仕事場に欠くことができない光景は、可視化のための大きなチャートだ。このチャートの目的は、情報をとてもシンプルにはっきりと見せることだ。これによって、部屋のどこからでも情報を伝えることができる。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_23",
      "message": "XPの管理者のプラクティスである最適なペースの仕事とは、ずっとベストを尽くして最も生産的で活き活きとした仕事ができるようなペースのこと。一般的には週40時間が目安とされる。\nチームはプログラミングを楽しんでいる。問題を解決すること、優れたコードを書くこと、\nテストがパスしていくのをじっと見ていること、そして何より、リファクタリングでコードを削除するのが楽しい。\n空き時間にもプログラミングをして、シャワー中でさえ仕事のことを考えている。\nつまり、仕事を愛している。\nそれなのに目標が不明確で、ほとんど連帯感もなく、内輪もめしているチームに私を連れてくるなんて。\n仕事に行くのが怖くて日が覚める。\n私は朝から晩まで職場にいるが、朝メールを読んで、夕方コードをいじるほかは、\n1日中わずかに関連する技術的なウェブサイトをまったり読んで過ごしたくなる。\n私たちはみんな、こんな経験をしたことがある。私たちはプロフェッショナルなので、やる気をなくしているときでさえ、質の高い仕事をしようと努力する。でも、あなたのキャリアの中で最も生産的だった時期を思い出してみよう。\n日が覚めて仕事に行けるのに感謝していたのとは大きな違いがあるのに気づかないかい？\n1日の終わりに、意義のある仕事をやり遂げたという手応えを感じて、定時に退社するのにとても満足していなかったかい？\nこのプラクティスは、プロフェッショナルたるものは難しい環境でも優れた仕事ができるが、\n活気づいてやる気が出ていればベストを尽くした最も生産的な仕事ができる、ということを認めたものだ。活き活きとした仕事にするたの1つの手段が、最適なペースの仕事だ。",
      "questions": [
        "XPの管理者のプラクティスである最適なペースの仕事とは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの管理者のプラクティスである最適なペースの仕事とは、ずっとベストを尽くして最も生産的で活き活きとした仕事ができるようなペースのこと。一般的には週40時間が目安とされる。チームはプログラミングを楽しんでいる。問題を解決すること、優れたコードを書くこと、テストがパスしていくのをじっと見ていること、そして何より、リファクタリングでコードを削除するのが楽しい。空き時間にもプログラミングをして、シャワー中でさえ仕事のことを考えている。つまり、仕事を愛している。それなのに目標が不明確で、ほとんど連帯感もなく、内輪もめしているチームに私を連れてくるなんて。仕事に行くのが怖くて日が覚める。私は朝から晩まで職場にいるが、朝メールを読んで、夕方コードをいじるほかは、1日中わずかに関連する技術的なウェブサイトをまったり読んで過ごしたくなる。私たちはみんな、こんな経験をしたことがある。私たちはプロフェッショナルなので、やる気をなくしているときでさえ、質の高い仕事をしようと努力する。でも、あなたのキャリアの中で最も生産的だった時期を思い出してみよう。日が覚めて仕事に行けるのに感謝していたのとは大きな違いがあるのに気づかないかい？1日の終わりに、意義のある仕事をやり遂げたという手応えを感じて、定時に退社するのにとても満足していなかったかい？このプラクティスは、プロフェッショナルたるものは難しい環境でも優れた仕事ができるが、活気づいてやる気が出ていればベストを尽くした最も生産的な仕事ができる、ということを認めたものだ。活き活きとした仕事にするたの1つの手段が、最適なペースの仕事だ。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_24",
      "message": "XPの顧客のプラクティスであるストーリーの作成とは、プロジェクトにおける自己完結した個別の構成要素を表している。\nストーリーは個別の機能に対応していることが多く、通常1日か2日分の仕事になる。\nストーリーは顧客視点であり、ビジネスの成果という観点で結果を記述したものだ。\nこれらは実装の詳細ではないし、完全な要件仕様でもない。一般的にはただのインデックスカードであり、\nスケジューリングのための情報として使われる。\nストーリーは、XPの中で最も誤解解のあるものかもしれない。これは要件ではない。\nこれはユースケースでもない。これは物品でさえない。これは物語よりもっとシンプルなものだ。\nストーリは計画のためにある。これはチームが作り出す成果を1行か2 行でシンプルに説明したものだ。\nアリスター・コーバーンはストーリーを「将来の会話のための約束手形」と呼んでいる。\nステークホルダーがチームに作り出して欲しいものはすべてストーリーになるはずだ。例えば次のようなものだ。\n・倉庫在庫報告\n・就職説明会のための全画面デモオプション\n・来るべきサーカス団の投資家のためのTPSレポート\n・ユーザログイン画面を企業ブランドにカスタマイズできること",
      "questions": [
        "XPの顧客のプラクティスであるストーリーの作成とは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの顧客のプラクティスであるストーリーの作成とは、プロジェクトにおける自己完結した個別の構成要素を表している。ストーリーは個別の機能に対応していることが多く、通常1日か2日分の仕事になる。ストーリーは顧客視点であり、ビジネスの成果という観点で結果を記述したものだ。これらは実装の詳細ではないし、完全な要件仕様でもない。一般的にはただのインデックスカードであり、スケジューリングのための情報として使われる。ストーリーは、XPの中で最も誤解解のあるものかもしれない。これは要件ではない。これはユースケースでもない。これは物品でさえない。これは物語よりもっとシンプルなものだ。ストーリは計画のためにある。これはチームが作り出す成果を1行か2 行でシンプルに説明したものだ。アリスター・コーバーンはストーリーを「将来の会話のための約束手形」と呼んでいる。ステークホルダーがチームに作り出して欲しいものはすべてストーリーになるはずだ。例えば次のようなものだ。・倉庫在庫報告・就職説明会のための全画面デモオプション・来るべきサーカス団の投資家のためのTPSレポート・ユーザログイン画面を企業ブランドにカスタマイズできること"
      ]
    },
    {
      "_id": "エクストリームプログラミング_25",
      "message": "XPの顧客のプラクティスである短期リリースに従い、動作する価値のあるソフトウェアを頻繁に届けることは、ソフトウェアの価値をさらに高める。\n頻繁にソフトウェアをリリースすることによるメリットを真の顧客が理解し、最も価値のあるストーリーから優先的に対処していけば、\nどのリリースでもその時点で考え得る最も価値のあるソフトウェアを届けることができる。\n動作するソフトウェアをできるだけ早く届けることは、2つの重要なフィードバックループを作り出すことができる。\n1つは、実際の顧客から開発者へ、そのソフトウェアがどれだけきっちり顧客のニーズが満たせているのかを伝えるものだ。\nもう1つは、チームから顧客へ、チームがどれだけ信頼でき、能力があるのかを実証することにより伝えるものだ。\n頻繁に届けることは、こうしたループをより強固なものにしてくれる。\n顧客はプロセスに参加することによって実際の成果に対して影響力があること実感する。\n開発者は、ふさわしい人が真の問題を解決することを手伝ってくれているのを実感する。\nどんなソフトウェアプロジェクトであれ、最優先事項は頻繁に継続的に価値を届けることであり、\nそれによって顧客をもっと満足させることだ。成功は後からついてくる。",
      "questions": [
        "XPの顧客のプラクティスである短期リリースとは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの顧客のプラクティスである短期リリースに従い、動作する価値のあるソフトウェアを頻繁に届けることは、ソフトウェアの価値をさらに高める。頻繁にソフトウェアをリリースすることによるメリットを真の顧客が理解し、最も価値のあるストーリーから優先的に対処していけば、どのリリースでもその時点で考え得る最も価値のあるソフトウェアを届けることができる。動作するソフトウェアをできるだけ早く届けることは、2つの重要なフィードバックループを作り出すことができる。1つは、実際の顧客から開発者へ、そのソフトウェアがどれだけきっちり顧客のニーズが満たせているのかを伝えるものだ。もう1つは、チームから顧客へ、チームがどれだけ信頼でき、能力があるのかを実証することにより伝えるものだ。頻繁に届けることは、こうしたループをより強固なものにしてくれる。顧客はプロセスに参加することによって実際の成果に対して影響力があること実感する。開発者は、ふさわしい人が真の問題を解決することを手伝ってくれているのを実感する。どんなソフトウェアプロジェクトであれ、最優先事項は頻繁に継続的に価値を届けることであり、それによって顧客をもっと満足させることだ。成功は後からついてくる。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_3",
      "message": "XPにおける５つの価値の１つである「勇気」とは、困難なときでさえ正しい決断をすること。そして、ステークホルダーにはしかるべきタイミングで、真実を伝えること。",
      "questions": [
        "エクストリームプログラミングの価値の１つである勇気とはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPにおける５つの価値の１つである「勇気」とは、困難なときでさえ正しい決断をすること。そして、ステークホルダーにはしかるべきタイミングで、真実を伝えること。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_4",
      "message": "XPにおける５つの価値の１つである「コミュニケーション」とは、しかるべき人にしかるべき情報を伝えること。そして、情報を最大限に活用できるようにすること。",
      "questions": [
        "エクストリームプログラミングの価値の１つであるコミュニケーションとはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPにおける５つの価値の１つである「コミュニケーション」とは、しかるべき人にしかるべき情報を伝えること。そして、情報を最大限に活用できるようにすること。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_5",
      "message": "XPにおける５つの価値の１つである「シンプル」とは、たとえやりたいことでも実際には不必要なものであれば、捨ててしまうこと。",
      "questions": [
        "エクストリームプログラミングの価値の１つであるシンプルとはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPにおける５つの価値の１つである「シンプル」とは、たとえやりたいことでも実際には不必要なものであれば、捨ててしまうこと。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_6",
      "message": "XPにおける５つの価値の１つである「フィードバック」とは、ありとあらゆる機会にしかるべき教訓を学ぶこと。",
      "questions": [
        "エクストリームプログラミングの価値の１つであるフィードバックとはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPにおける５つの価値の１つである「フィードバック」とは、ありとあらゆる機会にしかるべき教訓を学ぶこと。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_7",
      "message": "XPにおける５つの価値の１つである「敬意」とは、思いやりを持って仲間や他人に接すること。お互いの専門性と成功への願望を認めること。",
      "questions": [
        "エクストリームプログラミングの価値の１つである敬意とはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPにおける５つの価値の１つである「敬意」とは、思いやりを持って仲間や他人に接すること。お互いの専門性と成功への願望を認めること。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_8",
      "message": "XPには19のプラクティスが定義されている。\nプラクティスは共同、開発、、管理者、顧客の4つに分類されている。\n共同のプラクティスは反復、共通の用語、オープンな作業空間、頻繁な振り返りの4つ。\n開発のプラクティスはテスト駆動開発（TDD）、ペアプログラミング、リファクタリング、ソースコードの共同所有、継続的インテグレーション（CI）、YAGNIの（ヤグニ）6つ。\n管理者のプラクティスは責任の受入、援護、四半期毎の見直し、ミラー、最適なペースの仕事の5つ。\n顧客のプラクティスはストーリーの作成、リリース計画、受け入れテスト、短期リリースの4つ。",
      "questions": [
        "エクストリームプログラミングのプラクティスにはどういったものがありますか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPには19のプラクティスが定義されている。プラクティスは共同、開発、、管理者、顧客の4つに分類されている。共同のプラクティスは反復、共通の用語、オープンな作業空間、頻繁な振り返りの4つ。開発のプラクティスはテスト駆動開発（TDD）、ペアプログラミング、リファクタリング、ソースコードの共同所有、継続的インテグレーション（CI）、YAGNIの（ヤグニ）6つ。管理者のプラクティスは責任の受入、援護、四半期毎の見直し、ミラー、最適なペースの仕事の5つ。顧客のプラクティスはストーリーの作成、リリース計画、受け入れテスト、短期リリースの4つ。"
      ]
    },
    {
      "_id": "エクストリームプログラミング_9",
      "message": "XPの共同のプラクティスである反復（イテレーション）とは、XPチームが実践している設計、コーディング・検証・リリースという全サイクルのことだ。\n通常、これには2～3週間のタイムボックスを設定する。\n新しいチームでは反復（イテレーション）を1週間にすることをおすすめする。\n各反復（イテレーション）は、顧客がストーリーを選ぶことから始まる。チームは選ばれたストーリーをその反復（イテレーション）で実装する。\n顧客が導入して利用できるソフトウェアをチームが作り出せたら、その反復（イテレーション）は終了する。各反復（イテレーション）の始まりは、顧客がプロジェクトの方針を変更することができるポイントになる。反復（イテレーション）期間を小さくすればするほど、頻繁に方針を変更することができる。\n反復（イテレーション）期間を固定にすると、開発によいリズムが生まれる。\n小さく頻繁な反復（イテレーション）は、計画づくりを何度もするため、オーバーヘッドがあるように見えるが、計画づくりにかかる時間は反復（イテレーション）期間の長さに比例する傾向がある。\n",
      "questions": [
        "XPの共同のプラクティスである反復（イテレーション）とは",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "XPの共同のプラクティスである反復（イテレーション）とは、XPチームが実践している設計、コーディング・検証・リリースという全サイクルのことだ。通常、これには2～3週間のタイムボックスを設定する。新しいチームでは反復（イテレーション）を1週間にすることをおすすめする。各反復（イテレーション）は、顧客がストーリーを選ぶことから始まる。チームは選ばれたストーリーをその反復（イテレーション）で実装する。顧客が導入して利用できるソフトウェアをチームが作り出せたら、その反復（イテレーション）は終了する。各反復（イテレーション）の始まりは、顧客がプロジェクトの方針を変更することができるポイントになる。反復（イテレーション）期間を小さくすればするほど、頻繁に方針を変更することができる。反復（イテレーション）期間を固定にすると、開発によいリズムが生まれる。小さく頻繁な反復（イテレーション）は、計画づくりを何度もするため、オーバーヘッドがあるように見えるが、計画づくりにかかる時間は反復（イテレーション）期間の長さに比例する傾向がある。"
      ]
    },
    {
      "_id": "コアスクラム_1",
      "message": "スクラムはアジャイルな製品開発に導くためのフレームワークです。\n活発で楽しく、より協調しながらビジネス目標を実現するための基礎と道筋を示すものです。まだスクラムを使っていないのなら覚えていないかもしれませんが、スクラムを使うと再び楽しみながら仕事することができます！スクラムはソフトウェア開発の心得が元ですが、多くの他の業界でもこのフレームワークは採用されています。 実際、教育やマーケティング、運用業務などにもスクラムは採用され親しまれています。",
      "questions": [
        "スクラムとは何か？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムはアジャイルな製品開発に導くためのフレームワークです。活発で楽しく、より協調しながらビジネス目標を実現するための基礎と道筋を示すものです。まだスクラムを使っていないのなら覚えていないかもしれませんが、スクラムを使うと再び楽しみながら仕事することができます！スクラムはソフトウェア開発の心得が元ですが、多くの他の業界でもこのフレームワークは採用されています。 実際、教育やマーケティング、運用業務などにもスクラムは採用され親しまれています。"
      ]
    },
    {
      "_id": "コアスクラム_2",
      "message": "スクラムのコンセプトは1986年に「より新しい商品開発ゲーム」（ハーバード・ビジネス・レビュー、1986年1月/ 2月）で、竹内 弘高と野中 郁次郎によって初めて世界に発信されました。彼らはそのアプローチを「柔軟で総合的な製品開発戦略」と定義し、迅速で柔軟な製品開発をもたらすと提唱しました。彼らは、ラグビーの試合のように1つの機能横断的なチームが「ゴールライン」への道のりの中で「ボール」を前後にパスすることから、総合的な「ラグビー」アプローチと呼びました。これは、厳密に線形的な方法で進歩させるアプローチとは明らかに対照的でした。",
      "questions": [
        "スクラムの由来は？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムのコンセプトは1986年に「より新しい商品開発ゲーム」（ハーバード・ビジネス・レビュー、1986年1月/ 2月）で、竹内 弘高と野中 郁次郎によって初めて世界に発信されました。彼らはそのアプローチを「柔軟で総合的な製品開発戦略」と定義し、迅速で柔軟な製品開発をもたらすと提唱しました。彼らは、ラグビーの試合のように1つの機能横断的なチームが「ゴールライン」への道のりの中で「ボール」を前後にパスすることから、総合的な「ラグビー」アプローチと呼びました。これは、厳密に線形的な方法で進歩させるアプローチとは明らかに対照的でした。"
      ]
    },
    {
      "_id": "コアスクラム_3",
      "message": "2001年、アジャイルの共通の価値を見出そうとする17人がユタのワサッチ山脈に集まりました。彼らはアジャイルソフトウェア開発宣言の発展につながる4つの共通の価値に到達しました。",
      "questions": [
        "アジャイルマニュフェストとは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "2001年、アジャイルの共通の価値を見出そうとする17人がユタのワサッチ山脈に集まりました。彼らはアジャイルソフトウェア開発宣言の発展につながる4つの共通の価値に到達しました。"
      ]
    },
    {
      "_id": "コアスクラム_4",
      "message": "スクラムはアジャイルのフレームワークであり、アジャイル・マニフェストの価値と一致しています。以下4つです。\n・「プロセスやツールよりも個人との対話を」\n・「包括的なドキュメントよりも動くソフトウェアを」\n・「契約交渉よりも顧客との協調（協業）を」\n・「計画に従うことよりも変化への対応を」",
      "questions": [
        "コアスクラムとアジャイルソフトウェア開発宣言からの共通の価値は何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムはアジャイルのフレームワークであり、アジャイル・マニフェストの価値と一致しています。以下4つです。・「プロセスやツールよりも個人との対話を」・「包括的なドキュメントよりも動くソフトウェアを」・「契約交渉よりも顧客との協調（協業）を」・「計画に従うことよりも変化への対応を」"
      ]
    },
    {
      "_id": "コアスクラム_5",
      "message": "スクラムは、ビジネスに価値をもたらすためのチームベースのアプローチです。チームメンバーは協力しながらビジネス目標を共有します。スクラムフレームワークは、チームメンバー間の効果的なやりとりを促進し、チームがビジネス価値をもたらすようにします。\nチームがビジネス目標を達成すること、それは\n・生産性を定量化すること\n・作業すること\n・途中で何が起きているのかを特定すること\n・その範囲内のすべての困難を解決する責任を負うこと\n・ 組織外の懸念を解決するために組織の他の部分と協力すること\nスクラムのチームがこれらの責任に焦点を当てることがとても重要です。",
      "questions": [
        "「プロセスやツールよりも個人との対話を」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムは、ビジネスに価値をもたらすためのチームベースのアプローチです。チームメンバーは協力しながらビジネス目標を共有します。スクラムフレームワークは、チームメンバー間の効果的なやりとりを促進し、チームがビジネス価値をもたらすようにします。チームがビジネス目標を達成すること、それは・生産性を定量化すること・作業すること・途中で何が起きているのかを特定すること・その範囲内のすべての困難を解決する責任を負うこと・ 組織外の懸念を解決するために組織の他の部分と協力することスクラムのチームがこれらの責任に焦点を当てることがとても重要です。"
      ]
    },
    {
      "_id": "コアスクラム_6",
      "message": "スクラムでは、すべてのスプリントの主な結果として、インクリメントが必要です。 \nどのような活動がスプリント中に行われても、焦点はプロダクトインクリメントの作成にあります。スクラムチームの目標は、スプリントごとにインクリメントを作成することです。そのインクリメントにはまだビジネスが求める十分な機能は含まれていないかもしれませんが、チームは現在の機能が出荷可能な品質であることを保証する必要があります。\n",
      "questions": [
        "「包括的なドキュメントよりも動くソフトウェアを」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムでは、すべてのスプリントの主な結果として、インクリメントが必要です。 どのような活動がスプリント中に行われても、焦点はプロダクトインクリメントの作成にあります。スクラムチームの目標は、スプリントごとにインクリメントを作成することです。そのインクリメントにはまだビジネスが求める十分な機能は含まれていないかもしれませんが、チームは現在の機能が出荷可能な品質であることを保証する必要があります。"
      ]
    },
    {
      "_id": "コアスクラム_7",
      "message": "スクラムは、コラボレーション（共同作業）の促進を目的としたフレームワークです。\nチームメンバーはお互いに協力し、ソフトウェアやその他の成果物を作成しながらビジネスに提供する最良の方法を探求します。\nチーム、特にプロダクトオーナーは、利害関係者（ステークホルダ）と協力しながら製品ビジョンを検査し、（ビジョンと製品を）適合させることで、製品の価値が高まるようにします。\n",
      "questions": [
        "「契約交渉よりも顧客との協調（協業）を」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムは、コラボレーション（共同作業）の促進を目的としたフレームワークです。チームメンバーはお互いに協力し、ソフトウェアやその他の成果物を作成しながらビジネスに提供する最良の方法を探求します。チーム、特にプロダクトオーナーは、利害関係者（ステークホルダ）と協力しながら製品ビジョンを検査し、（ビジョンと製品を）適合させることで、製品の価値が高まるようにします。"
      ]
    },
    {
      "_id": "コアスクラム_8",
      "message": "スクラムチームは頻繁に計画を立てます。スクラムの初心者は現在のスプリントを計画し、さらに多くのチームにまたいだリリース計画やプロダクトロードマップなどの長期計画を作成します。\nこれらの計画は、チームとビジネスの意思決定に役立ちます。\nしかし、チームの目標は、計画をやみくもに順守することではありません。目標は価値の創造と、変化を受け入れることにあります。本質は思考のプロセスとアイデアであり、計画よりも重要です。\n早期に作成された計画は、将来利用できる情報よりも少ない情報に基づいているため、当然これは最善の計画ではない可能性があります。新しい情報が見つかると、チームはプロダクトバックログを更新します。 つまり、製品の方向性は変わる可能性があるということです。\n継続的に計画し改善することは、経験に新しい知識を取り入れ、チームの成功の可能性を上げます。\nスクラムチームは絶えず変化に対応し、可能な限り最良の結果を残します。スクラムはフィードバックループのフレームワークと表すこともでき、チームが絶えず検査し適応することで、製品価値を最大化します。",
      "questions": [
        "「計画に従うことよりも変化への対応を」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムチームは頻繁に計画を立てます。スクラムの初心者は現在のスプリントを計画し、さらに多くのチームにまたいだリリース計画やプロダクトロードマップなどの長期計画を作成します。これらの計画は、チームとビジネスの意思決定に役立ちます。しかし、チームの目標は、計画をやみくもに順守することではありません。目標は価値の創造と、変化を受け入れることにあります。本質は思考のプロセスとアイデアであり、計画よりも重要です。早期に作成された計画は、将来利用できる情報よりも少ない情報に基づいているため、当然これは最善の計画ではない可能性があります。新しい情報が見つかると、チームはプロダクトバックログを更新します。 つまり、製品の方向性は変わる可能性があるということです。継続的に計画し改善することは、経験に新しい知識を取り入れ、チームの成功の可能性を上げます。スクラムチームは絶えず変化に対応し、可能な限り最良の結果を残します。スクラムはフィードバックループのフレームワークと表すこともでき、チームが絶えず検査し適応することで、製品価値を最大化します。"
      ]
    },
    {
      "_id": "スクラム_1",
      "message": "プロダクトオーナーは、このプロジェクトで何をつくっていくかを考えていく人だ。もちろん､実際につくったものをなるべく良いものにしていかないといけない。実際の利用者から高い評価をもらえたり、自分たちのビジネスに少しでも貢献できたりするように必要なことをやっていく｡ただし､プロジェクトの予算や期間といった制約の中でそれをやらなきゃいけない役割だ。",
      "questions": [
        "プロダクトオーナー",
        "3つの役割",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロダクトオーナーは、このプロジェクトで何をつくっていくかを考えていく人だ。もちろん､実際につくったものをなるべく良いものにしていかないといけない。実際の利用者から高い評価をもらえたり、自分たちのビジネスに少しでも貢献できたりするように必要なことをやっていく｡ただし､プロジェクトの予算や期間といった制約の中でそれをやらなきゃいけない役割だ。"
      ]
    },
    {
      "_id": "スクラム_10",
      "message": "スプリントの最後には､スブリントレトロスペクティブを行います。日本では｢ふりかえり」と呼ばれることもあります。スプリントレトロスペクティブでは、直近のスプリントでのプロダクトの開発に関わる活動において問題がなかったか、もっと成果を出すためにできることがないか検査を行い､次回のスブリント以降のアクションプランを決めます。そのうえで、より効果のありそうな項目から取り組んで、より成果を出せるように自分たちの仕\n事のやり方を変えていきます。",
      "questions": [
        "スプリントレトロスペクティブ",
        "５つの会議",
        "",
        "",
        "",
        "",
        "",
        "",
        "スプリントの最後には､スブリントレトロスペクティブを行います。日本では｢ふりかえり」と呼ばれることもあります。スプリントレトロスペクティブでは、直近のスプリントでのプロダクトの開発に関わる活動において問題がなかったか、もっと成果を出すためにできることがないか検査を行い､次回のスブリント以降のアクションプランを決めます。そのうえで、より効果のありそうな項目から取り組んで、より成果を出せるように自分たちの仕事のやり方を変えていきます。"
      ]
    },
    {
      "_id": "スクラム_11",
      "message": "プロダクトオーナーによるプロダクトバックログアイテムの詳細化と優先順位の調整を行います。\n\n",
      "questions": [
        "プロダクトバックログリファインメント",
        "５つの会議",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロダクトオーナーによるプロダクトバックログアイテムの詳細化と優先順位の調整を行います。"
      ]
    },
    {
      "_id": "スクラム_12",
      "message": "経験的プロセスで重要なのは、結果責任を持つ者に対して見える化されていることである。透明性とは、こうしたことが標準化され、見ている人が共通理解を持つことである。",
      "questions": [
        "透明性",
        "３つの柱",
        "",
        "",
        "",
        "",
        "",
        "",
        "経験的プロセスで重要なのは、結果責任を持つ者に対して見える化されていることである。透明性とは、こうしたことが標準化され、見ている人が共通理解を持つことである。"
      ]
    },
    {
      "_id": "スクラム_13",
      "message": "スクラムのユーザーは、スクラムの成果物や進捗を頻繁に検査し、変化を検知する。ただし、検査を頻繁にやりすぎて作業の妨げになってはいけない。熟練の検査人が念入りに行えば、検査は最大の効果をもたらす。",
      "questions": [
        "検査",
        "３つの柱",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムのユーザーは、スクラムの成果物や進捗を頻繁に検査し、変化を検知する。ただし、検査を頻繁にやりすぎて作業の妨げになってはいけない。熟練の検査人が念入りに行えば、検査は最大の効果をもたらす。"
      ]
    },
    {
      "_id": "スクラム_14",
      "message": "プロセスの不備が許容値を超え、成果となるプロダクトを受け入れられないと検査人が判断した場合は、プロセスやその構成要素を調整する必要がある。調整はできるだけ早く行い、これ以上の逸脱を防がなければいけない。",
      "questions": [
        "適応",
        "３つの柱",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロセスの不備が許容値を超え、成果となるプロダクトを受け入れられないと検査人が判断した場合は、プロセスやその構成要素を調整する必要がある。調整はできるだけ早く行い、これ以上の逸脱を防がなければいけない。"
      ]
    },
    {
      "_id": "スクラム_15",
      "message": "一度に集中する事柄を少なくし、共に働き、生産性を高めます。価値ある製品を早く届けます。",
      "questions": [
        "Focus",
        "5つの価値",
        "集中すること",
        "",
        "",
        "",
        "",
        "",
        "一度に集中する事柄を少なくし、共に働き、生産性を高めます。価値ある製品を早く届けます。"
      ]
    },
    {
      "_id": "スクラム_16",
      "message": "私たちは助け合い、余裕もってチームとして働きます。これは私たちに大きなチャレンジをする勇気を与えます。",
      "questions": [
        "Courage",
        "5つの価値",
        "勇気を持つこと",
        "",
        "",
        "",
        "",
        "",
        "私たちは助け合い、余裕もってチームとして働きます。これは私たちに大きなチャレンジをする勇気を与えます。"
      ]
    },
    {
      "_id": "スクラム_17",
      "message": "共に働くことで、自分やチームのやり方に対する懸念事項があれば発信できます。",
      "questions": [
        "Openness",
        "5つの価値",
        "解放的であること",
        "",
        "",
        "",
        "",
        "",
        "共に働くことで、自分やチームのやり方に対する懸念事項があれば発信できます。"
      ]
    },
    {
      "_id": "スクラム_18",
      "message": "私たちは自律的に行動しているため、更なる成功にコミットします。",
      "questions": [
        "Commitment",
        "5つの価値",
        "コミットメント",
        "",
        "",
        "",
        "",
        "",
        "私たちは自律的に行動しているため、更なる成功にコミットします。"
      ]
    },
    {
      "_id": "スクラム_19",
      "message": "協力して成功と失敗を分かち合うこと、またお互いが尊重し合うことによって、お互いに尊敬し価値を認め合えるようになります。",
      "questions": [
        "Respect",
        "5つの価値",
        "尊敬",
        "",
        "",
        "",
        "",
        "",
        "協力して成功と失敗を分かち合うこと、またお互いが尊重し合うことによって、お互いに尊敬し価値を認め合えるようになります。"
      ]
    },
    {
      "_id": "スクラム_2",
      "message": "スクラムマスターは、プロジェクトをScrumで進めていけるようにする人だ。Scrumで決められていることをみんなにただ守ってもらうだけでなく、みんながうまく作業を進められるようにしていかないといけない。もし、何かうまくいかないことがあって仕事が円滑に進んでないのなら、それを取り除いていく役割だ。",
      "questions": [
        "スクラムマスター",
        "3つの役割",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムマスターは、プロジェクトをScrumで進めていけるようにする人だ。Scrumで決められていることをみんなにただ守ってもらうだけでなく、みんながうまく作業を進められるようにしていかないといけない。もし、何かうまくいかないことがあって仕事が円滑に進んでないのなら、それを取り除いていく役割だ。"
      ]
    },
    {
      "_id": "スクラム_3",
      "message": "開発チームは、プロダクトオーナーがこのプロジェクトで実現したいと思っていることを、実際につくっていく人たちのことだ。どうつくっていくかはこの人たちに任されている。コードを闇くだけでなく、要求を聞き出したり、見積もったり、設計、画面デザイン、テスト、さらにはつくったものをデモするとか、必要な作業をすべてこなしていく役割だ。",
      "questions": [
        "開発チーム",
        "3つの役割",
        "",
        "",
        "",
        "",
        "",
        "",
        "開発チームは、プロダクトオーナーがこのプロジェクトで実現したいと思っていることを、実際につくっていく人たちのことだ。どうつくっていくかはこの人たちに任されている。コードを闇くだけでなく、要求を聞き出したり、見積もったり、設計、画面デザイン、テスト、さらにはつくったものをデモするとか、必要な作業をすべてこなしていく役割だ。"
      ]
    },
    {
      "_id": "スクラム_4",
      "message": "プロダクトへの要求の一覧。プロダクトオーナーがつくる順番に並べ替える。各項目は開発チームによって見積り\nが行われる。",
      "questions": [
        "プロダクトバックログ",
        "3つの成果物",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロダクトへの要求の一覧。プロダクトオーナーがつくる順番に並べ替える。各項目は開発チームによって見積りが行われる。"
      ]
    },
    {
      "_id": "スクラム_5",
      "message": "今回のスプリント期間中に行うタスクのリスト。",
      "questions": [
        "スプリントバックログ",
        "3つの成果物",
        "",
        "",
        "",
        "",
        "",
        "",
        "今回のスプリント期間中に行うタスクのリスト。"
      ]
    },
    {
      "_id": "スクラム_6",
      "message": "リリース判断可能なプロダクト。SCRUMではスプリント単位でリリース判断可能なプロダクトをつくることが求められます。そのため、プロダクトオーナーと開発チームが「リリース判断可能」の指す内容について共通の基準を持つ必要があります。",
      "questions": [
        "プロダクトインクリメント",
        "3つの成果物",
        "",
        "",
        "",
        "",
        "",
        "",
        "リリース判断可能なプロダクト。SCRUMではスプリント単位でリリース判断可能なプロダクトをつくることが求められます。そのため、プロダクトオーナーと開発チームが「リリース判断可能」の指す内容について共通の基準を持つ必要があります。"
      ]
    },
    {
      "_id": "スクラム_7",
      "message": "プロダクトオーナー、開発チーム、スクラムマスターが参加し、そのスプリントで、どのプロダクトバックログの項目を開発するのかを検討し、内容を確認します。",
      "questions": [
        "スプリント計画",
        "５つの会議",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロダクトオーナー、開発チーム、スクラムマスターが参加し、そのスプリントで、どのプロダクトバックログの項目を開発するのかを検討し、内容を確認します。"
      ]
    },
    {
      "_id": "スクラム_8",
      "message": "デイリースクラムは開発チームの人数に関係なく、１５分間のタイムボックスで行われ、延長できません。デイリースクラムでは開発チームの各メンバーは以下の３点について、開発チーム全体に向けて簡潔に報告します。「前回のデイリースクラムからやったこと」、「次回のデイリースクラムまでにやること」、「困っていること」。これによってスプリントがゴールに向かって進んでいるか、作業の進捗はどうなっているか、メンバー間の協力が必要なことがないかなどを確認します。",
      "questions": [
        "デイリースクラム",
        "５つの会議",
        "",
        "",
        "",
        "",
        "",
        "",
        "デイリースクラムは開発チームの人数に関係なく、１５分間のタイムボックスで行われ、延長できません。デイリースクラムでは開発チームの各メンバーは以下の３点について、開発チーム全体に向けて簡潔に報告します。「前回のデイリースクラムからやったこと」、「次回のデイリースクラムまでにやること」、「困っていること」。これによってスプリントがゴールに向かって進んでいるか、作業の進捗はどうなっているか、メンバー間の協力が必要なことがないかなどを確認します。"
      ]
    },
    {
      "_id": "スクラム_9",
      "message": "スプリントで開発チームはリリース判断が可能なプロダクトをつくりますが、スプリントの最後にプロダクトオーナーがプロダクトを確認する機会を設定します。これをスプリントレビューと呼びます。",
      "questions": [
        "スプリントレビュー",
        "５つの会議",
        "",
        "",
        "",
        "",
        "",
        "",
        "スプリントで開発チームはリリース判断が可能なプロダクトをつくりますが、スプリントの最後にプロダクトオーナーがプロダクトを確認する機会を設定します。これをスプリントレビューと呼びます。"
      ]
    },
    {
      "_id": "スクラムガイド_1",
      "message": "スクラムチームは、プロダクトオーナー・開発チーム・スクラムマスターで構成される。スクラムチームは自己組織化されており、機能横断的である。自己組織化チームは、作業を成し遂げるための最善の策を、チーム外からの指示ではなく、自分たちで選択する。機能横断的チームは、チーム以外に頼らずに作業を成し遂げる能力を持っている。スクラムにおけるチームのモデルは、柔軟性・創造性・生産性を最適化するように設計されている。\nスクラムチームは、プロダクトを反復的・漸進的に届ける。これは、フィードバックの機会を最大化するためである。「完成」したプロダクトを漸進的に届けることで、動作するプロダクトを常に利用可能な状態にする。",
      "questions": [
        "スクラムチーム",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムチームは、プロダクトオーナー・開発チーム・スクラムマスターで構成される。スクラムチームは自己組織化されており、機能横断的である。自己組織化チームは、作業を成し遂げるための最善の策を、チーム外からの指示ではなく、自分たちで選択する。機能横断的チームは、チーム以外に頼らずに作業を成し遂げる能力を持っている。スクラムにおけるチームのモデルは、柔軟性・創造性・生産性を最適化するように設計されている。スクラムチームは、プロダクトを反復的・漸進的に届ける。これは、フィードバックの機会を最大化するためである。「完成」したプロダクトを漸進的に届けることで、動作するプロダクトを常に利用可能な状態にする。"
      ]
    },
    {
      "_id": "スクラムガイド_10",
      "message": "スプリントレトロスペクティブは、スクラムチームの検査と次のスプリントの改善計画を作成する機会である。\nスプリントレトロスペクティブは、スプリントレビューが終わって、次のスプリントプランニングが始まる前に行う。スプリントが1か月の場合、スプリントレトロスペクティブのタイムボックスは3時間である。スプリントの期間が短ければ、スプリントレトロスペクティブの時間も短くすることが多い。スクラムマスターは、このイベントが確実に開催されるようにする。また、参加者に目的を理解してもらうようにする。スクラムマスターは、スクラムチームにタイムボックスを守るように伝える。スクラムマスターは、スクラムプロセスを説明するためにチームメンバーとしてイベントに参加する。\nスプリントレトロスペクティブには、以下の目的がある。\n 人・関係・プロセス・ツールの観点から今回のスプリントを検査する。\n うまくいった項目や今後の改善が必要な項目を特定・整理する。\n スクラムチームの作業の改善実施計画を作成する。\nスクラムマスターは、次のスプリントが効果的で楽しいものになるように、開発チームにスクラムプロセスフレームワークの範囲内で開発プロセスやプラクティスを改善してもらう。スクラムチームは、「完成」の定義を適切に調整して、プロダクトの品質を向上させる方法を計画する。\nスプリントレトロスペクティブが終わるまでに、スクラムチームは次のスプリントで実施する改善策を特定しなければいけない。これらの改善策の実施は、開発チーム自体の検査の適応になる。改善はいつでも実施可能だが、スプリントレトロスペクティブは検査と適応のための公式な機会である。",
      "questions": [
        "スプリントレトロスペクティブ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スプリントレトロスペクティブは、スクラムチームの検査と次のスプリントの改善計画を作成する機会である。スプリントレトロスペクティブは、スプリントレビューが終わって、次のスプリントプランニングが始まる前に行う。スプリントが1か月の場合、スプリントレトロスペクティブのタイムボックスは3時間である。スプリントの期間が短ければ、スプリントレトロスペクティブの時間も短くすることが多い。スクラムマスターは、このイベントが確実に開催されるようにする。また、参加者に目的を理解してもらうようにする。スクラムマスターは、スクラムチームにタイムボックスを守るように伝える。スクラムマスターは、スクラムプロセスを説明するためにチームメンバーとしてイベントに参加する。スプリントレトロスペクティブには、以下の目的がある。 人・関係・プロセス・ツールの観点から今回のスプリントを検査する。 うまくいった項目や今後の改善が必要な項目を特定・整理する。 スクラムチームの作業の改善実施計画を作成する。スクラムマスターは、次のスプリントが効果的で楽しいものになるように、開発チームにスクラムプロセスフレームワークの範囲内で開発プロセスやプラクティスを改善してもらう。スクラムチームは、「完成」の定義を適切に調整して、プロダクトの品質を向上させる方法を計画する。スプリントレトロスペクティブが終わるまでに、スクラムチームは次のスプリントで実施する改善策を特定しなければいけない。これらの改善策の実施は、開発チーム自体の検査の適応になる。改善はいつでも実施可能だが、スプリントレトロスペクティブは検査と適応のための公式な機会である。"
      ]
    },
    {
      "_id": "スクラムガイド_11",
      "message": "・プロダクトバックログ\n・スプリントバックログ\n・インクリメント",
      "questions": [
        "スクラムの成果物",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "・プロダクトバックログ・スプリントバックログ・インクリメント"
      ]
    },
    {
      "_id": "スクラムガイド_12",
      "message": "プロダクトバックログは、プロダクトに必要なものがすべて並べられた一覧であり、プロダクトに対する変更要求の唯一の情報源である。プロダクトオーナーは、プロダクトバックログの内容・可用性・並び順に責任を持つ。\nプロダクトバックログは決して完成しない。開発の初期段階には、最初から明確でよく理解できた要求が並べられている。プロダクトバックログは、プロダクトや使用環境に合わせて進化する。プロダクトバックログは動的であり、適切で競争力のある有用なプロダクトに必要なものを求めて絶えず変化する。プロダクトが存在する限り、プロダクトバックログは不滅である。\nプロダクトバックログは、今後のリリースで実装するプロダクトのフィーチャ・機能・要求・要望・修正をすべて一覧にしている。プロダクトバックログアイテムには、詳細・並び順・見積りの属性がある。\nプロダクトが使用されて価値が増加し、市場からフィードバックを得られると、プロダクトバックログは巨大で包括的な一覧になる。要求の変更は止まらない。プロダクトバックログは生きた成果物である。ビジネス要求・市場の状態・技術の変化が、プロダクトバックログの変化につながる。\n複数のスクラムチームが同じプロダクトの作業をすることがよくある。そうした場合、プロダクトの作業は1つのプロダクトバックログに記述する。また、アイテムをグループにまとめる属性をプロダクトバックログに追加する。\nプロダクトバックログアイテムに詳細・見積り・並び順を追加することを、プロダクトバックログのリファインメントと呼ぶ。これはプロダクトオーナーと開発チームが協力して行う継続的なプロセスである。プロダクトバックログのリファインメントによって、アイテムのレビューと改訂が行われる。いつどのようにリファインメントをするかは、スクラムチームが決定する。リファインメントは、開発チームの作業の10%以下にすることが多い。ただし、プロダクトバックログアイテムはプロダクトオーナーの判断によって、いつでも更新できる。\n並び順が上のアイテムほど明確で詳細である。明確で詳細であれば、見積りも正確になる。並び順が下のアイテムほど不正確で詳細ではない。今後のスプリントで開発チームが従事するプロダクトバックログアイテムは、スプリントのタイムボックスで「完成」できるようにうまく細分化する。開発チームが1つのスプリントで「完成」できそうなプロダクトバックログアイテムは、スプリントプランニングで選択できる「準備完了（Ready）」の状態になったと見なせる。プロダクトバックログアイテムは、上記のリファインメントによって透明性を獲得することが多い。\n開発チームは見積りに対して責任を持つ。プロダクトオーナーがトレードオフの理解や選択などについて開発チームに影響を及ぼすこともあるが、最終的な見積りは実際に作業をする人が行う。",
      "questions": [
        "プロダクトバックログ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロダクトバックログは、プロダクトに必要なものがすべて並べられた一覧であり、プロダクトに対する変更要求の唯一の情報源である。プロダクトオーナーは、プロダクトバックログの内容・可用性・並び順に責任を持つ。プロダクトバックログは決して完成しない。開発の初期段階には、最初から明確でよく理解できた要求が並べられている。プロダクトバックログは、プロダクトや使用環境に合わせて進化する。プロダクトバックログは動的であり、適切で競争力のある有用なプロダクトに必要なものを求めて絶えず変化する。プロダクトが存在する限り、プロダクトバックログは不滅である。プロダクトバックログは、今後のリリースで実装するプロダクトのフィーチャ・機能・要求・要望・修正をすべて一覧にしている。プロダクトバックログアイテムには、詳細・並び順・見積りの属性がある。プロダクトが使用されて価値が増加し、市場からフィードバックを得られると、プロダクトバックログは巨大で包括的な一覧になる。要求の変更は止まらない。プロダクトバックログは生きた成果物である。ビジネス要求・市場の状態・技術の変化が、プロダクトバックログの変化につながる。複数のスクラムチームが同じプロダクトの作業をすることがよくある。そうした場合、プロダクトの作業は1つのプロダクトバックログに記述する。また、アイテムをグループにまとめる属性をプロダクトバックログに追加する。プロダクトバックログアイテムに詳細・見積り・並び順を追加することを、プロダクトバックログのリファインメントと呼ぶ。これはプロダクトオーナーと開発チームが協力して行う継続的なプロセスである。プロダクトバックログのリファインメントによって、アイテムのレビューと改訂が行われる。いつどのようにリファインメントをするかは、スクラムチームが決定する。リファインメントは、開発チームの作業の10%以下にすることが多い。ただし、プロダクトバックログアイテムはプロダクトオーナーの判断によって、いつでも更新できる。並び順が上のアイテムほど明確で詳細である。明確で詳細であれば、見積りも正確になる。並び順が下のアイテムほど不正確で詳細ではない。今後のスプリントで開発チームが従事するプロダクトバックログアイテムは、スプリントのタイムボックスで「完成」できるようにうまく細分化する。開発チームが1つのスプリントで「完成」でき"
      ]
    },
    {
      "_id": "スクラムガイド_13",
      "message": "いずれかの時点で、開発ゴールに対する残作業を合計する。プロダクトオーナーは、少なくともスプリントレビューにおいて、この残作業の合計を追跡する。プロダクトオーナーは、前回のスプリントレビューのときの残作業の合計と比較して、希望する時間までにゴールに到達できるかどうかを評価する。この情報は関係者全員に明らかにされる。\n進捗の見通しを立てるために、バーンダウンやバーンアップなどのさまざまなプラクティスが使用されている。これらは有用ではあるが、経験主義の重要性を置き換えるものではない。複雑な環境下では、何が起きるかわからない。すでに起きたものだけが、これから先の意思決定に使用できる。",
      "questions": [
        "ゴールへの進捗管理",
        "プロジェクトの進捗管理",
        "",
        "",
        "",
        "",
        "",
        "",
        "いずれかの時点で、開発ゴールに対する残作業を合計する。プロダクトオーナーは、少なくともスプリントレビューにおいて、この残作業の合計を追跡する。プロダクトオーナーは、前回のスプリントレビューのときの残作業の合計と比較して、希望する時間までにゴールに到達できるかどうかを評価する。この情報は関係者全員に明らかにされる。進捗の見通しを立てるために、バーンダウンやバーンアップなどのさまざまなプラクティスが使用されている。これらは有用ではあるが、経験主義の重要性を置き換えるものではない。複雑な環境下では、何が起きるかわからない。すでに起きたものだけが、これから先の意思決定に使用できる。"
      ]
    },
    {
      "_id": "スクラムガイド_14",
      "message": "スプリントのいずれかの時点で、スプリントバックログの残作業を合計する。開発チームは、少なくともデイリースクラムにおいて、この残作業の合計を追跡し、スプリントゴールの達成に見通しを立てる。開発チームはスプリントで残作業を追跡し、自分たちの進捗を管理する。",
      "questions": [
        "スプリントの進捗管理",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スプリントのいずれかの時点で、スプリントバックログの残作業を合計する。開発チームは、少なくともデイリースクラムにおいて、この残作業の合計を追跡し、スプリントゴールの達成に見通しを立てる。開発チームはスプリントで残作業を追跡し、自分たちの進捗を管理する。"
      ]
    },
    {
      "_id": "スクラムガイド_15",
      "message": "インクリメントとは、これまでのインクリメントの価値と今回のスプリントで完成したプロダクトバックログアイテムを合わせたものである。スプリントの終わりには、新しいインクリメントが「完成」していなければいけない。つまり、インクリメントが動作する状態であり、スクラムチームの「完成」の定義に合っていることを意味する。プロダクトオーナーがリリースを決定する／しないにかかわらず、インクリメントは常に動作する状態にしておかなければいけない。",
      "questions": [
        "インクリメント",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "インクリメントとは、これまでのインクリメントの価値と今回のスプリントで完成したプロダクトバックログアイテムを合わせたものである。スプリントの終わりには、新しいインクリメントが「完成」していなければいけない。つまり、インクリメントが動作する状態であり、スクラムチームの「完成」の定義に合っていることを意味する。プロダクトオーナーがリリースを決定する／しないにかかわらず、インクリメントは常に動作する状態にしておかなければいけない。"
      ]
    },
    {
      "_id": "スクラムガイド_16",
      "message": "スクラムは透明性に依存している。成果物の状態を把握することで、価値の最適化やリスクの制御に関する決定を行う。透明性が確保されている限り、こうした決定には信頼できる根拠が存在する。成果物が不完全に透明化されていれば、こうした決定には不備があり、価値は低減し、リスクが高まる可能性がある。\nスクラムマスターは、プロダクトオーナー・開発チーム・その他の関係者と一緒になって、成果物が完全に透明化されているかを理解する。不完全な透明性に対処するには、いくつかのプラクティスが存在する。スクラムマスターは、そのなかから最適なプラクティスの選択してもらえるように支援する。スクラムマスターは、成果物の検査・パターンの察知・言説の傾聴・期待値と実際値の違いを把握することで、不完全な透明性を検知できる。\nスクラムマスターの仕事は、スクラムチームや組織と一緒になって、成果物の透明性を向上させることである。この仕事には、学習・説得・変化を伴うことが多い。透明性は一夜にしてならず。透明性とは長い道のりなのである。",
      "questions": [
        "成果物の透明性",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スクラムは透明性に依存している。成果物の状態を把握することで、価値の最適化やリスクの制御に関する決定を行う。透明性が確保されている限り、こうした決定には信頼できる根拠が存在する。成果物が不完全に透明化されていれば、こうした決定には不備があり、価値は低減し、リスクが高まる可能性がある。スクラムマスターは、プロダクトオーナー・開発チーム・その他の関係者と一緒になって、成果物が完全に透明化されているかを理解する。不完全な透明性に対処するには、いくつかのプラクティスが存在する。スクラムマスターは、そのなかから最適なプラクティスの選択してもらえるように支援する。スクラムマスターは、成果物の検査・パターンの察知・言説の傾聴・期待値と実際値の違いを把握することで、不完全な透明性を検知できる。スクラムマスターの仕事は、スクラムチームや組織と一緒になって、成果物の透明性を向上させることである。この仕事には、学習・説得・変化を伴うことが多い。透明性は一夜にしてならず。透明性とは長い道のりなのである。"
      ]
    },
    {
      "_id": "スクラムガイド_2",
      "message": " プロダクトバックログアイテムを明確に表現する。\n ゴールとミッションを達成できるようにプロダクトバックログアイテムを並び替える。\n 開発チームが行う作業の価値を最適化する。\n プロダクトバックログを全員に見える化・透明化・明確化し、スクラムチームが次に行う作業を示す。\n 必要とされるレベルでプロダクトバックログアイテムを開発チームに理解してもらう。\n上記の作業は、プロダクトオーナーが行う場合もあれば、開発チームが行う場合もある。いずれの場合も、最終的な責任はプロダクトオーナーが持つ。",
      "questions": [
        "プロダクトオーナーの役割",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        " プロダクトバックログアイテムを明確に表現する。 ゴールとミッションを達成できるようにプロダクトバックログアイテムを並び替える。 開発チームが行う作業の価値を最適化する。 プロダクトバックログを全員に見える化・透明化・明確化し、スクラムチームが次に行う作業を示す。 必要とされるレベルでプロダクトバックログアイテムを開発チームに理解してもらう。上記の作業は、プロダクトオーナーが行う場合もあれば、開発チームが行う場合もある。いずれの場合も、最終的な責任はプロダクトオーナーが持つ。"
      ]
    },
    {
      "_id": "スクラムガイド_3",
      "message": "プロダクトオーナーの支援\n 効果的なプロダクトバックログの管理方法を探す。\n 明確で簡潔なプロダクトバックログアイテムの必要性についてスクラムチームに理解してもらう。\n 経験主義におけるプロダクトプランニングについて理解する。\n 価値を最大化するためにプロダクトバックログを調整する方法を知っている。\n アジャイルを理解・実践している。\n 必要に応じてスクラムイベントをファシリテートする。\n\n開発チームの支援\n 自己組織化・機能横断的な開発チームをコーチする。\n 開発チームが価値の高いプロダクトを作れるように支援する。\n 開発チームの進捗を妨げるものを排除する。\n 必要に応じてスクラムイベントをファシリテートする。\n スクラムがまだ完全に適用・理解されていない組織環境で、開発チームをコーチする。\n\nスクラムマスターは、さまざまな形で組織を支援する。\n 組織へのスクラムの導入を指導・コーチする。\n 組織へのスクラムの導入方法を計画する。\n スクラムや経験的プロダクト開発を社員や関係者に理解・実施してもらう。\n スクラムチームの生産性を高めるような変化を促す。",
      "questions": [
        "スクラムマスターの役割",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロダクトオーナーの支援 効果的なプロダクトバックログの管理方法を探す。 明確で簡潔なプロダクトバックログアイテムの必要性についてスクラムチームに理解してもらう。 経験主義におけるプロダクトプランニングについて理解する。 価値を最大化するためにプロダクトバックログを調整する方法を知っている。 アジャイルを理解・実践している。 必要に応じてスクラムイベントをファシリテートする。開発チームの支援 自己組織化・機能横断的な開発チームをコーチする。 開発チームが価値の高いプロダクトを作れるように支援する。 開発チームの進捗を妨げるものを排除する。 必要に応じてスクラムイベントをファシリテートする。 スクラムがまだ完全に適用・理解されていない組織環境で、開発チームをコーチする。スクラムマスターは、さまざまな形で組織を支援する。 組織へのスクラムの導入を指導・コーチする。 組織へのスクラムの導入方法を計画する。 スクラムや経験的プロダクト開発を社員や関係者に理解・実施してもらう。 スクラムチームの生産性を高めるような変化を促す。"
      ]
    },
    {
      "_id": "スクラムガイド_4",
      "message": " スプリントゴールに悪影響を及ぼすような変更を加えない。\n 品質目標を下げない。\n 学習が進むにつれてスコープが明確化され、プロダクトオーナーと開発チームの交渉が必要になる可能性がある。\nスプリントは1か月以内のプロジェクトと考えることができる。プロジェクトと同様に、スプリントは何かを成し遂げるために使うものである。\n",
      "questions": [
        "スプリントの目的",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        " スプリントゴールに悪影響を及ぼすような変更を加えない。 品質目標を下げない。 学習が進むにつれてスコープが明確化され、プロダクトオーナーと開発チームの交渉が必要になる可能性がある。スプリントは1か月以内のプロジェクトと考えることができる。プロジェクトと同様に、スプリントは何かを成し遂げるために使うものである。"
      ]
    },
    {
      "_id": "スクラムガイド_5",
      "message": "スプリントの作業はスプリントプランニングで計画する。これはスクラムチームの共同作業だ。\nスプリントが1か月の場合、スプリントプランニングのタイムボックスは最大で8時間である。スプリントの期間が短ければ、スプリントプランニングの時間も短くすることが多い。スクラムマスターは、参加者に目的を理解してもらうようにする。スクラムマスターは、スクラムチームにタイムボックスを守るように伝える。\nスプリントプランニングでは、以下の質問に答える。\n スプリントの成果であるインクリメントで何を届けることができるか？\n インクリメントを届けるために必要な作業をどのように成し遂げるか？",
      "questions": [
        "スプリントプランニング",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スプリントの作業はスプリントプランニングで計画する。これはスクラムチームの共同作業だ。スプリントが1か月の場合、スプリントプランニングのタイムボックスは最大で8時間である。スプリントの期間が短ければ、スプリントプランニングの時間も短くすることが多い。スクラムマスターは、参加者に目的を理解してもらうようにする。スクラムマスターは、スクラムチームにタイムボックスを守るように伝える。スプリントプランニングでは、以下の質問に答える。 スプリントの成果であるインクリメントで何を届けることができるか？ インクリメントを届けるために必要な作業をどのように成し遂げるか？"
      ]
    },
    {
      "_id": "スクラムガイド_6",
      "message": "プロダクトバックログアイテムを選択し、スプリントゴールを設定したら、開発チームはそれらの機能をスプリントで「完成」プロダクトインクリメントにする方法を決める。選択したプロダクトバックログアイテムとそれらを届ける計画を合わせて、スプリントバックログと呼ぶ。\nスプリントバックログは、スプリントで選択したプロダクトバックログアイテムと、それらのアイテムをプロダクトインクリメントにして届け、スプリントゴールを達成するための計画を合わせたものである。スプリントバックログは、開発チームが作成するインクリメントに含まれる機能と、その機能を「完成」インクリメントにして届けるために必要な作業の予想である。\nスプリントバックログによって、開発チームがスプリントゴールを達成するのに必要な作業がすべて見える化されている。\nスプリントバックログは十分に詳細であり、今後も変更される可能性のある計画である。それはデイリースクラムで理解できる程度のものである。開発チームは、スプリントでスプリントバックログを修正する。スプリントバックログはスプリントで創発される。こうした創発が発生するのは、開発チームが計画を実行するなかで、スプリントゴールの達成に必要な作業を学習するからである。\n新しい作業が必要になれば、開発チームがスプリントバックログに作業を追加する。作業が完了すれば、残作業の見積りを更新する。計画の要素が不要になれば削除する。スプリントでスプリントバックログを変更できるのは開発チームだけである。スプリントバックログには、開発チームがスプリントで行う作業がリアルタイムに反映される。スプリントバックログは開発チームのものである。",
      "questions": [
        "スプリントバックログ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "プロダクトバックログアイテムを選択し、スプリントゴールを設定したら、開発チームはそれらの機能をスプリントで「完成」プロダクトインクリメントにする方法を決める。選択したプロダクトバックログアイテムとそれらを届ける計画を合わせて、スプリントバックログと呼ぶ。スプリントバックログは、スプリントで選択したプロダクトバックログアイテムと、それらのアイテムをプロダクトインクリメントにして届け、スプリントゴールを達成するための計画を合わせたものである。スプリントバックログは、開発チームが作成するインクリメントに含まれる機能と、その機能を「完成」インクリメントにして届けるために必要な作業の予想である。スプリントバックログによって、開発チームがスプリントゴールを達成するのに必要な作業がすべて見える化されている。スプリントバックログは十分に詳細であり、今後も変更される可能性のある計画である。それはデイリースクラムで理解できる程度のものである。開発チームは、スプリントでスプリントバックログを修正する。スプリントバックログはスプリントで創発される。こうした創発が発生するのは、開発チームが計画を実行するなかで、スプリントゴールの達成に必要な作業を学習するからである。新しい作業が必要になれば、開発チームがスプリントバックログに作業を追加する。作業が完了すれば、残作業の見積りを更新する。計画の要素が不要になれば削除する。スプリントでスプリントバックログを変更できるのは開発チームだけである。スプリントバックログには、開発チームがスプリントで行う作業がリアルタイムに反映される。スプリントバックログは開発チームのものである。"
      ]
    },
    {
      "_id": "スクラムガイド_7",
      "message": "スプリントゴールはスプリントの目標セットであり、プロダクトバックログの実装によって実現するものである。これは開発チームがインクリメントを構築する理由を知る指針となる。スプリントゴールはスプリントプランニングで作成する。スプリントゴールを設定することで、開発チームがスプリント終了までに実装する機能を柔軟にできる。選択したプロダクトバックログアイテムは、一貫性のある機能として届けられる。それがスプリントゴールになることもある。スプリントゴールがあれば、開発チームは一致団結して作業ができる。\n開発チームが計画するときには、スプリントゴールを念頭に置く。スプリントゴールを達成するために、それらの機能や技術を実装する。開発チームの予想よりも難しいと判明した場合は、プロダクトオーナーと交渉してスプリントバックログのスコープを調整する。",
      "questions": [
        "スプリントゴール",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スプリントゴールはスプリントの目標セットであり、プロダクトバックログの実装によって実現するものである。これは開発チームがインクリメントを構築する理由を知る指針となる。スプリントゴールはスプリントプランニングで作成する。スプリントゴールを設定することで、開発チームがスプリント終了までに実装する機能を柔軟にできる。選択したプロダクトバックログアイテムは、一貫性のある機能として届けられる。それがスプリントゴールになることもある。スプリントゴールがあれば、開発チームは一致団結して作業ができる。開発チームが計画するときには、スプリントゴールを念頭に置く。スプリントゴールを達成するために、それらの機能や技術を実装する。開発チームの予想よりも難しいと判明した場合は、プロダクトオーナーと交渉してスプリントバックログのスコープを調整する。"
      ]
    },
    {
      "_id": "スクラムガイド_8",
      "message": "デイリースクラムとは、開発チームが活動の速度を合わせ、次の24時間の計画を作る15分間のタイムボックスのイベントである。前回のデイリースクラムから行った作業の検査と、次回のデイリースクラムまでに行う作業の予想を行う。\nデイリースクラムは毎日、同じ時間・場所で開催する。これは、複雑にならないようにするためである。デイリースクラムでは、開発チームのメンバーが以下のことを説明する。\n 開発チームがスプリントゴールを達成するために、私が昨日やったことは何か？\n 開発チームがスプリントゴールを達成するために、私が今日やることは何か？\n 私や開発チームがスプリントゴールを達成するときの障害物を目撃したか？\n開発チームはデイリースクラムを使って、スプリントゴールとスプリントバックログの作業の進捗を検査する。デイリースクラムは、開発チームがスプリントゴールを達成する可能性を最適化する。開発チームは、自己組織化チームとしてスプリントゴールを達成し、スプリント終了までに期待されるインクリメントを作成できるかを毎日把握しなければいけない。開発チームまたは一部のチームメンバーは、デイリースクラムの終了直後に集まり、スプリントの残作業について詳細な議論・適応・再計画を行うこともある。\nスクラムマスターは、開発チームにデイリースクラムを開催してもらうようにする。ただし、デイリースクラムを開催する責任は開発チームにある。スクラムマスターは、デイリースクラムを15分間のタイムボックスで終わらせるように開発チームに伝える。\nスクラムマスターは、デイリースクラムには開発チームのメンバーしか参加できないというルールを遵守する。\nデイリースクラムは、コミュニケーションを改善し、その他のミーティングを取り除き、開発の障害物を特定・排除し、迅速な意思決定を強調・助長して、開発チームのプロジェクト知識のレベルを向上させるものである。これは、検査と適応の重要なイベントである。",
      "questions": [
        "デイリースクラム",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "デイリースクラムとは、開発チームが活動の速度を合わせ、次の24時間の計画を作る15分間のタイムボックスのイベントである。前回のデイリースクラムから行った作業の検査と、次回のデイリースクラムまでに行う作業の予想を行う。デイリースクラムは毎日、同じ時間・場所で開催する。これは、複雑にならないようにするためである。デイリースクラムでは、開発チームのメンバーが以下のことを説明する。 開発チームがスプリントゴールを達成するために、私が昨日やったことは何か？ 開発チームがスプリントゴールを達成するために、私が今日やることは何か？ 私や開発チームがスプリントゴールを達成するときの障害物を目撃したか？開発チームはデイリースクラムを使って、スプリントゴールとスプリントバックログの作業の進捗を検査する。デイリースクラムは、開発チームがスプリントゴールを達成する可能性を最適化する。開発チームは、自己組織化チームとしてスプリントゴールを達成し、スプリント終了までに期待されるインクリメントを作成できるかを毎日把握しなければいけない。開発チームまたは一部のチームメンバーは、デイリースクラムの終了直後に集まり、スプリントの残作業について詳細な議論・適応・再計画を行うこともある。スクラムマスターは、開発チームにデイリースクラムを開催してもらうようにする。ただし、デイリースクラムを開催する責任は開発チームにある。スクラムマスターは、デイリースクラムを15分間のタイムボックスで終わらせるように開発チームに伝える。スクラムマスターは、デイリースクラムには開発チームのメンバーしか参加できないというルールを遵守する。デイリースクラムは、コミュニケーションを改善し、その他のミーティングを取り除き、開発の障害物を特定・排除し、迅速な意思決定を強調・助長して、開発チームのプロジェクト知識のレベルを向上させるものである。これは、検査と適応の重要なイベントである。"
      ]
    },
    {
      "_id": "スクラムガイド_9",
      "message": "スプリントレビューとは、スプリントの終わりにインクリメントの検査と、必要であればプロダクトバックログの適応を行うものである。スプリントレビューでは、スクラムチームと関係者がスプリントの成果をレビューする。スプリントの成果とプロダクトバックログの変更を参考にして、価値を最適化するために次に何ができるかを参加者全員で話し合う。これはステータスミーティングではなく、非公式なミーティングである。インクリメントを提示することで、フィードバックやさらなる協力を引き出すことを目的とする。\nスプリントが1か月の場合、スプリントレビューのタイムボックスは4時間である。スプリントの期間が短ければ、スプリントレビューの時間も短くすることが多い。スクラムマスターは参加者に目的を理解してもらうようにする。スクラムマスターはスクラムチームにタイムボックスを守るように伝える。\nスプリントレビューには、以下の要素が含まれる。\n 参加者（スクラムチームと重要な関係者）はプロダクトオーナーが招待する。\n プロダクトオーナーは、プロダクトバックログアイテムの「完成」したものと「完成」していないものについて説明する。\n 開発チームは、スプリントでうまくいったこと・直面した問題点・それをどのように解決したかを議論する。\n 開発チームは、「完成」したものをデモして、インクリメントに対する質問に答える。\n プロダクトオーナーは、現在のプロダクトバックログを審議する。（必要であれば）現在の進捗から完了日を予測する。\n グループ全体で次に何をするかを議論し、次のスプリントプランニングに価値のあるインプットを提供できるようにする。\n プロダクトの市場や今後の利用状況についてレビューした場合、次に行う最も価値の高いことが変更されることもある。\n プロダクトの次のリリースに対するスケジュール・予算・性能・市場をレビューする。\nスプリントレビューの成果は、次のスプリントで使用するプロダクトバックログアイテムが含まれた改訂版のプロダクトバックログである。新たな機会に見合うように、プロダクトバックログを全体的に調整することもある。",
      "questions": [
        "スプリントレビュー",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "スプリントレビューとは、スプリントの終わりにインクリメントの検査と、必要であればプロダクトバックログの適応を行うものである。スプリントレビューでは、スクラムチームと関係者がスプリントの成果をレビューする。スプリントの成果とプロダクトバックログの変更を参考にして、価値を最適化するために次に何ができるかを参加者全員で話し合う。これはステータスミーティングではなく、非公式なミーティングである。インクリメントを提示することで、フィードバックやさらなる協力を引き出すことを目的とする。スプリントが1か月の場合、スプリントレビューのタイムボックスは4時間である。スプリントの期間が短ければ、スプリントレビューの時間も短くすることが多い。スクラムマスターは参加者に目的を理解してもらうようにする。スクラムマスターはスクラムチームにタイムボックスを守るように伝える。スプリントレビューには、以下の要素が含まれる。 参加者（スクラムチームと重要な関係者）はプロダクトオーナーが招待する。 プロダクトオーナーは、プロダクトバックログアイテムの「完成」したものと「完成」していないものについて説明する。 開発チームは、スプリントでうまくいったこと・直面した問題点・それをどのように解決したかを議論する。 開発チームは、「完成」したものをデモして、インクリメントに対する質問に答える。 プロダクトオーナーは、現在のプロダクトバックログを審議する。（必要であれば）現在の進捗から完了日を予測する。 グループ全体で次に何をするかを議論し、次のスプリントプランニングに価値のあるインプットを提供できるようにする。 プロダクトの市場や今後の利用状況についてレビューした場合、次に行う最も価値の高いことが変更されることもある。 プロダクトの次のリリースに対するスケジュール・予算・性能・市場をレビューする。スプリントレビューの成果は、次のスプリントで使用するプロダクトバックログアイテムが含まれた改訂版のプロダクトバックログである。新たな機会に見合うように、プロダクトバックログを全体的に調整することもある。"
      ]
    },
    {
      "_id": "スクラム入門_1",
      "message": "アジャイル開発手法は、“商品開発における学び、イノベーション、変化等、より実践に基づいた方法にすれば、より良い結果をもたらす”という信念によって生まれました。アジャイルの原則は、事前に仕様を書く多くの時間を費やすことよりも、すぐに出荷できる動く製品（ソフトウェア等）を重視します。アジャイル開発は、大きな組織階層や機能による細分化よりも、決定権が与えられた職能上の枠組みを越えたチームにし、継続的な顧客への情報提供を短期間で繰り返すことを重視します。よくアジャイル開発やスクラムを学ぶと、初心に戻ったように「そうすれば良かったのか。」と気付くことがあります。",
      "questions": [
        "アジャイル",
        "入門",
        "概要",
        "原則",
        "",
        "",
        "",
        "",
        "アジャイル開発手法は、“商品開発における学び、イノベーション、変化等、より実践に基づいた方法にすれば、より良い結果をもたらす”という信念によって生まれました。アジャイルの原則は、事前に仕様を書く多くの時間を費やすことよりも、すぐに出荷できる動く製品（ソフトウェア等）を重視します。アジャイル開発は、大きな組織階層や機能による細分化よりも、決定権が与えられた職能上の枠組みを越えたチームにし、継続的な顧客への情報提供を短期間で繰り返すことを重視します。よくアジャイル開発やスクラムを学ぶと、初心に戻ったように「そうすれば良かったのか。」と気付くことがあります。"
      ]
    },
    {
      "_id": "スクラム入門_２",
      "message": "スクラムは企業の大小に関わらず利用されています。\nYahoo!、Microsoft、Google、Lockheed Martin、Motorola、SAP、Cisco、GE、CapitalOne、アメリカ連邦準備銀行等が含まれます。",
      "questions": [
        "利用",
        "企業",
        "スクラム",
        "",
        "",
        "",
        "",
        "",
        "スクラムは企業の大小に関わらず利用されています。Yahoo!、Microsoft、Google、Lockheed Martin、Motorola、SAP、Cisco、GE、CapitalOne、アメリカ連邦準備銀行等が含まれます。"
      ]
    },
    {
      "_id": "スクラム入門_3",
      "message": "スクラムは、企画や製品開発もしくはアプリケーション開発を繰り返しながら漸増するフレームワークです。\nスプリントと呼ばれる周期で、開発を構成します。これらの繰り返し期間（スプリント）は1カ月未満で途切れることなく連続します。\nスプリントはタイムボックス化され、作業完了の有無に関わらず、具体的な期日で終了します。決して延長されません。\n各スプリントの始めに、職能上の枠を超えたチームは優先されるリストから（顧客の要求）項目を選びます。\nチームは、スプリント終了までに選択した全ての項目を完了させることを公約します。スプリントの間は、選ばれた項目は変更しません。\n毎日チームは集まって、手短に進捗を確認し、残りの仕事を終わらせるのに必要な次の作業を調整します。\nスプリント終了時に、チームは利害関係者と共に、構築した製品を実際に用いてスプリントを検査します。\n参加者は、次のスプリントで具現化できるフィードバックを得ます。スプリント終了時に、本当に価値のある製品が「実現」されることを強調します。\n\nスクラムの大きなテーマは、「検査と適応」です。スクラムは開発工程を短くし、成果物と実務の有効性を検査します。\nそして、プロダクトのゴールとプロセスを適応します。これを継続的に繰り返します。",
      "questions": [
        "概要",
        "スクラム",
        "やり方",
        "手法",
        "",
        "",
        "",
        "",
        "スクラムは、企画や製品開発もしくはアプリケーション開発を繰り返しながら漸増するフレームワークです。スプリントと呼ばれる周期で、開発を構成します。これらの繰り返し期間（スプリント）は1カ月未満で途切れることなく連続します。スプリントはタイムボックス化され、作業完了の有無に関わらず、具体的な期日で終了します。決して延長されません。各スプリントの始めに、職能上の枠を超えたチームは優先されるリストから（顧客の要求）項目を選びます。チームは、スプリント終了までに選択した全ての項目を完了させることを公約します。スプリントの間は、選ばれた項目は変更しません。毎日チームは集まって、手短に進捗を確認し、残りの仕事を終わらせるのに必要な次の作業を調整します。スプリント終了時に、チームは利害関係者と共に、構築した製品を実際に用いてスプリントを検査します。参加者は、次のスプリントで具現化できるフィードバックを得ます。スプリント終了時に、本当に価値のある製品が「実現」されることを強調します。スクラムの大きなテーマは、「検査と適応」です。スクラムは開発工程を短くし、成果物と実務の有効性を検査します。そして、プロダクトのゴールとプロセスを適応します。これを継続的に繰り返します。"
      ]
    },
    {
      "_id": "スクラム入門_4",
      "message": "スクラムには、プロダクトオーナー、チーム、スクラムマスターの３つの役割があります。\nこれらはスクラムチームとして知られています。",
      "questions": [
        "役割",
        "チーム",
        "スクラムチーム",
        "",
        "",
        "",
        "",
        "",
        "スクラムには、プロダクトオーナー、チーム、スクラムマスターの３つの役割があります。これらはスクラムチームとして知られています。"
      ]
    },
    {
      "_id": "スクラム入門_５",
      "message": "プロダクトオーナーは、製品特性を特定し投資収益率（ROI）を最大化することに責任があります。\n最優先リストの優先順位付けを継続的に見直し、次のスプリントのために、どの（顧客の要求）項目が上位にあるべきかを決めてます。\nプロダクトオーナーは従来の製品管理者とは少し異なります。なぜならば、開発権限をプロジェクト管理者に委ねのではなく、自らスプリント毎に優先順位をつけ、結果を検査するなど、チームと積極的かつ頻繁に交流します。\nスクラムでは、最終的な権限を持つプロダクトオーナーは、必ず一人であり、仕事の価値に対して責任を持つことに注意しなければなりません。",
      "questions": [
        "プロダクトオーナー",
        "オーナー",
        "責任",
        "優先順位付け",
        "",
        "",
        "",
        "",
        "プロダクトオーナーは、製品特性を特定し投資収益率（ROI）を最大化することに責任があります。最優先リストの優先順位付けを継続的に見直し、次のスプリントのために、どの（顧客の要求）項目が上位にあるべきかを決めてます。プロダクトオーナーは従来の製品管理者とは少し異なります。なぜならば、開発権限をプロジェクト管理者に委ねのではなく、自らスプリント毎に優先順位をつけ、結果を検査するなど、チームと積極的かつ頻繁に交流します。スクラムでは、最終的な権限を持つプロダクトオーナーは、必ず一人であり、仕事の価値に対して責任を持つことに注意しなければなりません。"
      ]
    },
    {
      "_id": "スクラム入門_６",
      "message": "チームは、アプリケーションやウェブサイト等、プロダクトオーナーが示唆する製品を造ります。\n“自己組織（自己管理）” し、とても高い自律性と製品に対して責任があります。\nスクラムのよくある話では、チームは “ブタ”、他者は “ニワトリ” として知られています。\nこれは、「ハムエッグ」というレストランを開店しようとするブタとニワトリの物語（冗談話）からきています。\nその物語の中でブタは「私は身を削るのに、ニワトリは少し関わるだけじゃないか。」と迷います。）\n\nスクラムにおけるチームは、７人 ± ２人です。ソフトウェア開発の場合、チームは、分析、開発、テスト、\nインターフェース設計、データベース設計、アーキテクチャ、書類作成等の能力を持った人で構成されます。\nチームはプロダクトオーナーに、製品開発と製品の価値向上に関するアイデアを提供します。\n全メンバーが、スプリント期間に１つの製品開発に１００％集中することができれば、最も生産性が高く効果的です。\nなので、複数の企画や製品の仕事をすることを避けて下さい。\n安定したチームには高い生産力があるので、メンバー変更は避けて下さい。多人数の集団に適用する場合では、複数のスクラムチームで構成されます。\n綿密な調整を行い、各チームが製品の異なる特性に集中します。１つのチームが、徹底的な顧客中心思考で、全ての作業（計画、分析、プログラミング、テスト）を行います。\nチームは、フィーチャーチームと言われることもあります。",
      "questions": [
        "チーム",
        "フィーチャーチーム",
        "ハムエッグ",
        "製造",
        "",
        "",
        "",
        "",
        "チームは、アプリケーションやウェブサイト等、プロダクトオーナーが示唆する製品を造ります。“自己組織（自己管理）” し、とても高い自律性と製品に対して責任があります。スクラムのよくある話では、チームは “ブタ”、他者は “ニワトリ” として知られています。これは、「ハムエッグ」というレストランを開店しようとするブタとニワトリの物語（冗談話）からきています。その物語の中でブタは「私は身を削るのに、ニワトリは少し関わるだけじゃないか。」と迷います。）スクラムにおけるチームは、７人 ± ２人です。ソフトウェア開発の場合、チームは、分析、開発、テスト、インターフェース設計、データベース設計、アーキテクチャ、書類作成等の能力を持った人で構成されます。チームはプロダクトオーナーに、製品開発と製品の価値向上に関するアイデアを提供します。全メンバーが、スプリント期間に１つの製品開発に１００％集中することができれば、最も生産性が高く効果的です。なので、複数の企画や製品の仕事をすることを避けて下さい。安定したチームには高い生産力があるので、メンバー変更は避けて下さい。多人数の集団に適用する場合では、複数のスクラムチームで構成されます。綿密な調整を行い、各チームが製品の異なる特性に集中します。１つのチームが、徹底的な顧客中心思考で、全ての作業（計画、分析、プログラミング、テスト）を行います。チームは、フィーチャーチームと言われることもあります。"
      ]
    },
    {
      "_id": "スクラム入門_７",
      "message": "スクラムマスターは、チームとプロダクトオーナーがうまくいくための支援者であり、チームの管理者でもプロジェクト管理者でもありません。\n外部からの干渉を守り、プロダクトオーナーとチームが、スクラムを最大限に活かせるように導きます。\nスクラムマスターは、（プロダクトオーナー、管理者を含む）全員に対し、スクラムの正しい理解と実践を支援します。\nまた、アジャイル開発で成功することを義務付けられる組織の困難な変化を牽引します。\nスクラムは、多くの障害、チームの危険、プロダクトオーナーの有効性を明らかにします。\n※小さいチームでは、チームメンバーが役割を果たせるかもしれません\nどのような経歴もしくは、工学、デザイン、テスト、製品管理、プロジェクト管理、品質管理等の能力をを持っていても、優秀なスクラムマスターになれます。\nただし、スクラムマスターとプロダクトオーナーは、同じ人がなることはできません。\nなぜなら、スクラムマスターがプロダクトオーナーの依頼を断ることもしなければならないからです（例えば、スプリントの途中で、新たな成果物の発表）。\nまた、スクラムマスターはプロジェクト管理者とは異なります。スクラムマスターは、何をすべきか指示したり、\nタスクを割り当てたりしません。彼らは、工程を促進したり、チームの自己組織化と自己管理化を支援します。\nもし、スクラムマスターが以前はチーム管理者だった場合、 スクラムで成功させるためには、\n考え方や交流スタイルを大きく変えなければならいでしょう。",
      "questions": [
        "スクラムマスター",
        "マスター",
        "支援",
        "",
        "",
        "",
        "",
        "",
        "スクラムマスターは、チームとプロダクトオーナーがうまくいくための支援者であり、チームの管理者でもプロジェクト管理者でもありません。外部からの干渉を守り、プロダクトオーナーとチームが、スクラムを最大限に活かせるように導きます。スクラムマスターは、（プロダクトオーナー、管理者を含む）全員に対し、スクラムの正しい理解と実践を支援します。また、アジャイル開発で成功することを義務付けられる組織の困難な変化を牽引します。スクラムは、多くの障害、チームの危険、プロダクトオーナーの有効性を明らかにします。※小さいチームでは、チームメンバーが役割を果たせるかもしれませんどのような経歴もしくは、工学、デザイン、テスト、製品管理、プロジェクト管理、品質管理等の能力をを持っていても、優秀なスクラムマスターになれます。ただし、スクラムマスターとプロダクトオーナーは、同じ人がなることはできません。なぜなら、スクラムマスターがプロダクトオーナーの依頼を断ることもしなければならないからです（例えば、スプリントの途中で、新たな成果物の発表）。また、スクラムマスターはプロジェクト管理者とは異なります。スクラムマスターは、何をすべきか指示したり、タスクを割り当てたりしません。彼らは、工程を促進したり、チームの自己組織化と自己管理化を支援します。もし、スクラムマスターが以前はチーム管理者だった場合、 スクラムで成功させるためには、考え方や交流スタイルを大きく変えなければならいでしょう。"
      ]
    },
    {
      "_id": "スクラム入門_8",
      "message": "プロダクトバックログとは、洗練された特性（項目）の優先順位リストです。\nこのバックログは、製品の存続期間を終えても残り（進化し）ます。これは、製品のロードマップです。\n“優先順位に従って、チームが完成させた全ての項目” も含め最終的な状態を表したり、プロダクトオーナーが、利害関係者の利益やチームに影響されること等、すべての領域を考慮して優先順位付けに必要です。\nプロダクトバックログは、様々な項目を含んでいますが、探求や調査の仕事は含まれません。\n\nプロダクトバックログは、プロダクトオーナーによって継続的に、顧客要求の変化、新しいアイデアや洞察、競合他社の動向、技術的障害等が更新されます。\nチームは、プロダクトバックログの各アイテムに必要な規模見積りをプロダクトオーナーに提供します。\nさらに、プロダクトオーナーには、各項目のビジネス価値を見積る責任があります。\n\n大抵、プロダクトオーナーはこの作業に慣れていません。この場合、スクラムマスターは、プロダクトオーナーが出来るように支援します。\nプロダクトオーナーは、投資収益率（ROI）を最大化するため（少ない労力で、高い価値のある項目を選びます）\nもしくは、副次的にいくつかの主なリスクを軽減するために、バックログの優先順位付けます。（実際は、リリース\nバックログの部分集合）とすると、これらの規模と価値の見積りは、各スプリントで学ぶことによって、新しくなるかもしれません。\nその結果、プロダクトバックログの継続的な再優先順位付けは絶えず更新されます。",
      "questions": [
        "プロダクトバックログ",
        "優先順位リスト",
        "最終系",
        "ロードマップ",
        "",
        "",
        "",
        "",
        "プロダクトバックログとは、洗練された特性（項目）の優先順位リストです。このバックログは、製品の存続期間を終えても残り（進化し）ます。これは、製品のロードマップです。“優先順位に従って、チームが完成させた全ての項目” も含め最終的な状態を表したり、プロダクトオーナーが、利害関係者の利益やチームに影響されること等、すべての領域を考慮して優先順位付けに必要です。プロダクトバックログは、様々な項目を含んでいますが、探求や調査の仕事は含まれません。プロダクトバックログは、プロダクトオーナーによって継続的に、顧客要求の変化、新しいアイデアや洞察、競合他社の動向、技術的障害等が更新されます。チームは、プロダクトバックログの各アイテムに必要な規模見積りをプロダクトオーナーに提供します。さらに、プロダクトオーナーには、各項目のビジネス価値を見積る責任があります。大抵、プロダクトオーナーはこの作業に慣れていません。この場合、スクラムマスターは、プロダクトオーナーが出来るように支援します。プロダクトオーナーは、投資収益率（ROI）を最大化するため（少ない労力で、高い価値のある項目を選びます）もしくは、副次的にいくつかの主なリスクを軽減するために、バックログの優先順位付けます。（実際は、リリースバックログの部分集合）とすると、これらの規模と価値の見積りは、各スプリントで学ぶことによって、新しくなるかもしれません。その結果、プロダクトバックログの継続的な再優先順位付けは絶えず更新されます。"
      ]
    },
    {
      "_id": "よくある日常_1",
      "message": "知りません、まずはググってみて再度質問してください。",
      "questions": [
        "アジャイルってどうなのかね？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "知りません、まずはググってみて再度質問してください。"
      ]
    },
    {
      "_id": "よくある日常_10",
      "message": "あなたは会社の代表として発言をしているのでしょうか？\nそうでなければ目の前の仕事をしてください。\nもしくは向いていない理由を一から説明してみて下さい、話はそれからです。",
      "questions": [
        "アジャイルはうちの会社には向いてないよ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "あなたは会社の代表として発言をしているのでしょうか？そうでなければ目の前の仕事をしてください。もしくは向いていない理由を一から説明してみて下さい、話はそれからです。"
      ]
    },
    {
      "_id": "よくある日常_11",
      "message": "できるできないよりも、やるかやらないか。\nやるかやらないかよりも、やりたいかやりたくないのかが重要です。",
      "questions": [
        "スキルが低くてもアジャイルってできますか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "できるできないよりも、やるかやらないか。やるかやらないかよりも、やりたいかやりたくないのかが重要です。"
      ]
    },
    {
      "_id": "よくある日常_12",
      "message": "異なる価値観を持つ人同士では、場合によって攻撃的だと受け取られることもあるかもしれません。\nアジャイルはウォーターフォール型開発のアンチテーゼ的な位置づけであり、考え方ややり方の多くは従来を否定することになるかもしれません。神社の方に「キリストが神です」と説くようなものです。",
      "questions": [
        "アジャイル界隈の人って攻撃的ですよね",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "異なる価値観を持つ人同士では、場合によって攻撃的だと受け取られることもあるかもしれません。アジャイルはウォーターフォール型開発のアンチテーゼ的な位置づけであり、考え方ややり方の多くは従来を否定することになるかもしれません。神社の方に「キリストが神です」と説くようなものです。"
      ]
    },
    {
      "_id": "よくある日常_13",
      "message": "人員の選定や育成、フィードバック、衝突の解決から激しい議論の誘発とコントロールなどに注力してください。また指示や管理を抑え、ビジョンの共有や協調性の強化を促進してください。開発チームの邪魔にならないよう、規則遵守作業を受け持つなど縁の下の力持ちとなってください。",
      "questions": [
        "マネージャーってなにするの？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "人員の選定や育成、フィードバック、衝突の解決から激しい議論の誘発とコントロールなどに注力してください。また指示や管理を抑え、ビジョンの共有や協調性の強化を促進してください。開発チームの邪魔にならないよう、規則遵守作業を受け持つなど縁の下の力持ちとなってください。"
      ]
    },
    {
      "_id": "よくある日常_2",
      "message": "わかりません、儲かるか儲からないかは人次第です。",
      "questions": [
        "アジャイルってっ儲かるの？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "わかりません、儲かるか儲からないかは人次第です。"
      ]
    },
    {
      "_id": "よくある日常_3",
      "message": "そうですね、やらないほうが良いと思います。",
      "questions": [
        "アジャイルやりたくないんだけど",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "そうですね、やらないほうが良いと思います。"
      ]
    },
    {
      "_id": "よくある日常_4",
      "message": "仕様変更が辛いのはウォーターフォール型の開発です。\nあなたのそれはアジャイル的な開発じゃないかもしれません。\nなにが「つらい」のか具体的に教えて下さい。",
      "questions": [
        "アジャイルやると仕様変更対応がつらいんだよね",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "仕様変更が辛いのはウォーターフォール型の開発です。あなたのそれはアジャイル的な開発じゃないかもしれません。なにが「つらい」のか具体的に教えて下さい。"
      ]
    },
    {
      "_id": "よくある日常_5",
      "message": "まずAmazonでアジャイルと名の付く書籍を調べ、５冊以上それぞれ２周読んできてください。\n話はそれからです。",
      "questions": [
        "俺にもわかるようにアジャイルを説明しろ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "まずAmazonでアジャイルと名の付く書籍を調べ、５冊以上それぞれ２周読んできてください。話はそれからです。"
      ]
    },
    {
      "_id": "よくある日常_6",
      "message": "ゴールやビジョンを明確化して意思決定は現場に委ねましょう。\nさまざまな見える化のテクニックを学び、現場負担の少ないように遠くから見守りましょう。",
      "questions": [
        "詳細な管理がしたい",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ゴールやビジョンを明確化して意思決定は現場に委ねましょう。さまざまな見える化のテクニックを学び、現場負担の少ないように遠くから見守りましょう。"
      ]
    },
    {
      "_id": "よくある日常_7",
      "message": "上位レベルの意図を正しく伝えることだけに注力してください。\nどう行動に起こすかは現場に決めてもらいましょう。",
      "questions": [
        "詳細な指示をしたい",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "上位レベルの意図を正しく伝えることだけに注力してください。どう行動に起こすかは現場に決めてもらいましょう。"
      ]
    },
    {
      "_id": "よくある日常_8",
      "message": "明確な方向性を示してください。入念な調査を行うことは予測精度の向上ではなくコミットメントする内容の詳細化に他なりません。",
      "questions": [
        "入念な調査のもと計画化したい",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "明確な方向性を示してください。入念な調査を行うことは予測精度の向上ではなくコミットメントする内容の詳細化に他なりません。"
      ]
    },
    {
      "_id": "よくある日常_9",
      "message": "ある特定の信仰にしたがって動くことは宗教と捉えられることもあるかもしれません。\nチームメンバーが同じ価値観にしたがって行動することに意味があります。",
      "questions": [
        "なんか宗教っぽくないですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ある特定の信仰にしたがって動くことは宗教と捉えられることもあるかもしれません。チームメンバーが同じ価値観にしたがって行動することに意味があります。"
      ]
    },
    {
      "_id": "リーン開発の現場_１",
      "message": "ジャストインタイムとは製造業において必典なものを、必要なときに、必要なだけ生産する考え方です。",
      "questions": [
        "ジャスト・イン・タイムとは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ジャストインタイムとは製造業において必典なものを、必要なときに、必要なだけ生産する考え方です。"
      ]
    },
    {
      "_id": "リーン開発の現場_１０",
      "message": "トヨタ生産方式では、ムダを「付加価値を高めない各種現象や結果」と定義しています。このムダを無くすことが重要な取り組みとされています。ムダとは、代表的なものとして以下の7つがあり、それを「7つのムダ」と表現しています。\n・作り過ぎのムダ\n・手待ちのムダ\n・運搬のムダ\n・加工そのもののムダ\n・在庫のムダ\n・動作のムダ\n・不良をつくるムダ\n上記のムダを改善しないことを8つ目のムダとすることもあります。\n「加工」の「か」、「在庫」の「ざ」、「作りすぎ」の「っ」、「手待ち」の「て」、「動作」の「と」、「運搬」の「う」、「不良」の「ふ」、と頭文字を取れることから、「飾って豆腐」とも呼ばれています。",
      "questions": [
        "７つのムダ（TPS)削減とは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "トヨタ生産方式では、ムダを「付加価値を高めない各種現象や結果」と定義しています。このムダを無くすことが重要な取り組みとされています。ムダとは、代表的なものとして以下の7つがあり、それを「7つのムダ」と表現しています。・作り過ぎのムダ・手待ちのムダ・運搬のムダ・加工そのもののムダ・在庫のムダ・動作のムダ・不良をつくるムダ上記のムダを改善しないことを8つ目のムダとすることもあります。「加工」の「か」、「在庫」の「ざ」、「作りすぎ」の「っ」、「手待ち」の「て」、「動作」の「と」、「運搬」の「う」、「不良」の「ふ」、と頭文字を取れることから、「飾って豆腐」とも呼ばれています。"
      ]
    },
    {
      "_id": "リーン開発の現場_２",
      "message": "カンバンはアジャイルソフトウェア開発におけるリーンなアプローチです。\nカンバンにはたくさんの意味があります。文字通りに考えると、カンバンは「目で見て確認できるカードや標識」という日本語です。トヨタで使われているかんばんは、リーン生産方式の全体を結びつける、可視化された物理的な伝達システムの用語です。\nかんばんは日本の製造現場で発明されたわけたですが、ソフトウェア開発においては、2004年にデイビッド・アンダーソンがかんばんの先駆者となりました。彼はリーンシンキングや制約理論のより直接的な実装を開発したのです。彼は、ドン・ライナートセンのような一流の指導者のもとで、かんばんを「ソフトウェア開発 のためのカンバンシステム」へと進化させていきました。現在、ソフトウェア開発で カンバンといえば、ほとんどが彼の考えたカンバンシステムのことを指しています。\nカンバンをソフトウェア開発に適用したのはとても最近ですが、リー ン生産方式におけるかんばんは半世紀以上の歴史があります。\nカンバンのルールはとてもシンプルです。ですが、チェスのように、ルールがシン プルだからといってゲームが簡単なわけではないです。\n・ワークフローを可視化する：作業を小さく分けて、それぞれをカードに書き、カードを壁に貼りつける。それぞれのカードが、ワークフロー内のどの状態にあるのか可視化するために、状態を指し示す名前がついたステージを用意する。\n・WlP(仕掛り作業)を制限する:それぞれのステージで、仕掛りとして何枚までのカードを貼りつけることができるかを明確に決める。\n・サイクルタイムを測定し管理する:1枚のカードが完了するまでの時間の 平均値を計測する。サイクルタイムは、リードタイムとも呼ばれる(フロースルータイムというのがふさわしいかもしれない)。サイクルタイムをで きるだけ短く予測可能にするために、プロセスを最適化する。これらのルールによって、基本的にカンバンはリーンのプル型スケジューリングシステムをそのまま実現した形になっている。\nスクラムは組織枇造とコミュニケーションに焦点を当てており、XPはさらに エンジニアリングプラクティスを追加しています。そして、カンバンは作業や価値の流 れの可視化や、ボトルネックの符理に着目しています。",
      "questions": [
        "かんばんとは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "カンバンはアジャイルソフトウェア開発におけるリーンなアプローチです。カンバンにはたくさんの意味があります。文字通りに考えると、カンバンは「目で見て確認できるカードや標識」という日本語です。トヨタで使われているかんばんは、リーン生産方式の全体を結びつける、可視化された物理的な伝達システムの用語です。かんばんは日本の製造現場で発明されたわけたですが、ソフトウェア開発においては、2004年にデイビッド・アンダーソンがかんばんの先駆者となりました。彼はリーンシンキングや制約理論のより直接的な実装を開発したのです。彼は、ドン・ライナートセンのような一流の指導者のもとで、かんばんを「ソフトウェア開発 のためのカンバンシステム」へと進化させていきました。現在、ソフトウェア開発で カンバンといえば、ほとんどが彼の考えたカンバンシステムのことを指しています。カンバンをソフトウェア開発に適用したのはとても最近ですが、リー ン生産方式におけるかんばんは半世紀以上の歴史があります。カンバンのルールはとてもシンプルです。ですが、チェスのように、ルールがシン プルだからといってゲームが簡単なわけではないです。・ワークフローを可視化する：作業を小さく分けて、それぞれをカードに書き、カードを壁に貼りつける。それぞれのカードが、ワークフロー内のどの状態にあるのか可視化するために、状態を指し示す名前がついたステージを用意する。・WlP(仕掛り作業)を制限する:それぞれのステージで、仕掛りとして何枚までのカードを貼りつけることができるかを明確に決める。・サイクルタイムを測定し管理する:1枚のカードが完了するまでの時間の 平均値を計測する。サイクルタイムは、リードタイムとも呼ばれる(フロースルータイムというのがふさわしいかもしれない)。サイクルタイムをで きるだけ短く予測可能にするために、プロセスを最適化する。これらのルールによって、基本的にカンバンはリーンのプル型スケジューリングシステムをそのまま実現した形になっている。スクラムは組織枇造とコミュニケーションに焦点を当てており、XPはさらに エンジニアリングプラクティスを追加しています。そして、カンバンは作業や価値の流 れの可視化や、ボトルネックの符理に着目しています。"
      ]
    },
    {
      "_id": "リーン開発の現場_３",
      "message": "製造業における平準化（へいじゅんか）は、色々な種類の製品を均等にばらして生産することです。同じものをまとめて生産するロット生産と対比して考えることができます。\n平準化を考える時には大きく、量の平準化と、中身（種類）の平準化を考えることになります。 段取替の時間などの必要性から、最後は1個単位にまでは平準化しきることが困難な場合もでてくるが、基本的にはロットを小さくする努力と平準化をしていく努力を組合わせていくことによって効率化が図れるケースは多いです。",
      "questions": [
        "平準化とは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "製造業における平準化（へいじゅんか）は、色々な種類の製品を均等にばらして生産することです。同じものをまとめて生産するロット生産と対比して考えることができます。平準化を考える時には大きく、量の平準化と、中身（種類）の平準化を考えることになります。 段取替の時間などの必要性から、最後は1個単位にまでは平準化しきることが困難な場合もでてくるが、基本的にはロットを小さくする努力と平準化をしていく努力を組合わせていくことによって効率化が図れるケースは多いです。"
      ]
    },
    {
      "_id": "リーン開発の現場_４",
      "message": "アンドンは生産ラインの脇の通路側の上方に設置され、ランプからは紐が下がっているものです。あるいは作業者の傍にアンドンを操作するボタンが設置されています。ランプは作業工程毎に設置され、また作業者がすぐに紐を引ける場所に設置されています。\nアンドンは流れ作業のような異常を他者に知らせにくい生産ラインにおいて、異常を他者に伝えることを目的としています。不具合の後工程流出を防ぐためであったり、生産ラインが抱える問題の顕在化（見える化）のためであったりと様々な目的を有します。\nアンドンという言葉は日本の製造業が日本国外から研究された際に重要な要素の一つとされ、結果世界中の工場へと広まっていき、日本語以外でもAndonとして通用する言葉となりました。",
      "questions": [
        "アンドンとは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "アンドンは生産ラインの脇の通路側の上方に設置され、ランプからは紐が下がっているものです。あるいは作業者の傍にアンドンを操作するボタンが設置されています。ランプは作業工程毎に設置され、また作業者がすぐに紐を引ける場所に設置されています。アンドンは流れ作業のような異常を他者に知らせにくい生産ラインにおいて、異常を他者に伝えることを目的としています。不具合の後工程流出を防ぐためであったり、生産ラインが抱える問題の顕在化（見える化）のためであったりと様々な目的を有します。アンドンという言葉は日本の製造業が日本国外から研究された際に重要な要素の一つとされ、結果世界中の工場へと広まっていき、日本語以外でもAndonとして通用する言葉となりました。"
      ]
    },
    {
      "_id": "リーン開発の現場_５",
      "message": "工場では人による作業が多く行われています。その人による作業はミスを伴う事が多く、そのミスは不良品などの品質問題へと繋がることが多いです。また製造ミスを製品が出来上がってから探すのは時間もコストもかかり、また発見も難しく市場への不具合流出へと繋がり易いです。そこで、製造工程内に製造ミスを回避する仕組みを導入することで不具合流出をなくすことを狙って、多くの製造ラインにはポカヨケの仕組みが取り入れられています。\nまた、製造物の品質管理以外にも、作業員の安全を確保するための仕組みもポカヨケの一部です。例えば、切断機を稼働させるスイッチは本来は1つで十分であるが、片手で押している際に、ちょっとした不注意でもう片方の腕が切断される事故（ミス）が起きる可能性があります。そこで、スイッチを機械の左右両端にあえて設置し、両手で押さないと稼働しないようにすることで、ポカ（事故）を避ける仕組みが設けられるなど、工場ではいたるところで再発防止の工夫がこらされています。これは安全に作業できる環境を作ることで、製造ラインを止めない事にもつながる品質管理の一環であります。\nトヨタ生産方式の基本概念の一つに数えられます。トヨタ生産方式には「後工程はお客様」という基本の考えがあります。後工程に不具合品を渡さないようにするために、自分の作業工程の品質を保証する目的で、不具合品を組むことを避ける仕組みが導入されています。ポカヨケの基本コンセプトには新郷重夫らが関わっていたといわれています。\n日本の製造業が日本国外へ進出した際や、日本国外の製造業が日本の製造業を研究したこと、また前述の新郷の著書により日本国外でもポカヨケは広まり、結果Poka-yokeとして製造業の分野では日本国外でも通じる言葉となりました。",
      "questions": [
        "ポカヨケとは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "工場では人による作業が多く行われています。その人による作業はミスを伴う事が多く、そのミスは不良品などの品質問題へと繋がることが多いです。また製造ミスを製品が出来上がってから探すのは時間もコストもかかり、また発見も難しく市場への不具合流出へと繋がり易いです。そこで、製造工程内に製造ミスを回避する仕組みを導入することで不具合流出をなくすことを狙って、多くの製造ラインにはポカヨケの仕組みが取り入れられています。また、製造物の品質管理以外にも、作業員の安全を確保するための仕組みもポカヨケの一部です。例えば、切断機を稼働させるスイッチは本来は1つで十分であるが、片手で押している際に、ちょっとした不注意でもう片方の腕が切断される事故（ミス）が起きる可能性があります。そこで、スイッチを機械の左右両端にあえて設置し、両手で押さないと稼働しないようにすることで、ポカ（事故）を避ける仕組みが設けられるなど、工場ではいたるところで再発防止の工夫がこらされています。これは安全に作業できる環境を作ることで、製造ラインを止めない事にもつながる品質管理の一環であります。トヨタ生産方式の基本概念の一つに数えられます。トヨタ生産方式には「後工程はお客様」という基本の考えがあります。後工程に不具合品を渡さないようにするために、自分の作業工程の品質を保証する目的で、不具合品を組むことを避ける仕組みが導入されています。ポカヨケの基本コンセプトには新郷重夫らが関わっていたといわれています。日本の製造業が日本国外へ進出した際や、日本国外の製造業が日本の製造業を研究したこと、また前述の新郷の著書により日本国外でもポカヨケは広まり、結果Poka-yokeとして製造業の分野では日本国外でも通じる言葉となりました。"
      ]
    },
    {
      "_id": "リーン開発の現場_６",
      "message": "「無駄の徹底的な排除」を実現するための方法の一例として、「自動化」・「機械化」の意味合いを持つ言葉である、自働化があります。\n無駄は排除しなければならないが、合理化を進めるあまりに従業員の人間性やインセンティブ（労働意欲）を無視してはならないです。このことから、トヨタ自動車では自動化の事を自働化と呼んでいます。\n\n・「自働化」とは、不良が発生した際に機械が自動的に停止し、後の工程へ良品のみを送るようにすること、公式ページでは通常の加工が完了したら機械を安全に停止させることも指すとしています。 豊田佐吉が発明した自動織機に、稼動中に糸が切れた際に自動で停止する装置が組み込まれていたことに由来しています。\n自動機械は人が止めるまで動き続けますが、その最中に調整がずれたり、供給される材料に異常があっても止まることなく動きつづけます。この結果、多くの不良品を作りつづけることとなり、7番目の無駄の元凶となってしまいます。\n最近でこそ各種センサが高性能・低価格で普及し、自動停止制御が浸透しているが、この言葉が言われ始めた昭和40年代は、「オートメーション」という言葉が「最先端＝高効率」と同義語として受け取られる風潮があり、「止まらない」機械が殆どでした。\n\n・トヨタ生産方式では、買ってきた機械類を何の工夫もせずにそのまま使うことは好ましいとはされていません。機械を買ってきて、そのまま組み合わせて使用しているだけの人は「カタログエンジニア」などと呼ばれています。買ってきた機械に人間の知恵を織り込み、カタログ通りに機械を使う他社に対して差をつけることが求められています。\n人が関わらない自動化をしてしまうと、機械へカイゼン（改善）の知恵を織り込めなくなることから、カイゼンを持続的に行うためにも人が関わる自働化が重要となってきます。",
      "questions": [
        "自働化とは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "「無駄の徹底的な排除」を実現するための方法の一例として、「自動化」・「機械化」の意味合いを持つ言葉である、自働化があります。無駄は排除しなければならないが、合理化を進めるあまりに従業員の人間性やインセンティブ（労働意欲）を無視してはならないです。このことから、トヨタ自動車では自動化の事を自働化と呼んでいます。・「自働化」とは、不良が発生した際に機械が自動的に停止し、後の工程へ良品のみを送るようにすること、公式ページでは通常の加工が完了したら機械を安全に停止させることも指すとしています。 豊田佐吉が発明した自動織機に、稼動中に糸が切れた際に自動で停止する装置が組み込まれていたことに由来しています。自動機械は人が止めるまで動き続けますが、その最中に調整がずれたり、供給される材料に異常があっても止まることなく動きつづけます。この結果、多くの不良品を作りつづけることとなり、7番目の無駄の元凶となってしまいます。最近でこそ各種センサが高性能・低価格で普及し、自動停止制御が浸透しているが、この言葉が言われ始めた昭和40年代は、「オートメーション」という言葉が「最先端＝高効率」と同義語として受け取られる風潮があり、「止まらない」機械が殆どでした。・トヨタ生産方式では、買ってきた機械類を何の工夫もせずにそのまま使うことは好ましいとはされていません。機械を買ってきて、そのまま組み合わせて使用しているだけの人は「カタログエンジニア」などと呼ばれています。買ってきた機械に人間の知恵を織り込み、カタログ通りに機械を使う他社に対して差をつけることが求められています。人が関わらない自動化をしてしまうと、機械へカイゼン（改善）の知恵を織り込めなくなることから、カイゼンを持続的に行うためにも人が関わる自働化が重要となってきます。"
      ]
    },
    {
      "_id": "リーン開発の現場_７",
      "message": "改善活動の内容は生産設備の改造や工具の新作、製作など業務効率の向上や作業安全性の確保、品質不具合防止など生産に関わる範囲全てにわたります。改善は上からの命令で実行するのではなく作業者が自分で知恵を出して変えていく事が大きな特徴で、企業側はQCサークルなどの形で活動を支援することが多いです。また、改善は一度行ったら終わりではなく次々と改善を行っていく持続性、継続性が重視されています。QCサークルの活動と相まって、日本の製造業では多くの企業で行われています。\n日本の製造業が日本国外へ工場を展開した際に、日本から派遣された作業トレーナーが現地従業員に教えたり、また1980年代にMITが中心になって行った日本の製造業の強さの研究、などを通じて日本の製造業の重要な要素の一つとして日本国外でも広まりました。\n実際の事例は以下の通りです。\nトヨタ生産方式では、改善は基本概念の一つに数えられる。例えば、下記のような事例が挙げられ、トヨタ生産方式の様々なエピソードに深く関わっています。\n・改善活動により、作業者の知恵を生産設備に織り込むことで、同じ設備を使う他社に差をつける。\n・不足するものをすぐに買うのではなく、自分達で製作・改造することで、投資を抑制することを狙ったりする。",
      "questions": [
        "改善とは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "改善活動の内容は生産設備の改造や工具の新作、製作など業務効率の向上や作業安全性の確保、品質不具合防止など生産に関わる範囲全てにわたります。改善は上からの命令で実行するのではなく作業者が自分で知恵を出して変えていく事が大きな特徴で、企業側はQCサークルなどの形で活動を支援することが多いです。また、改善は一度行ったら終わりではなく次々と改善を行っていく持続性、継続性が重視されています。QCサークルの活動と相まって、日本の製造業では多くの企業で行われています。日本の製造業が日本国外へ工場を展開した際に、日本から派遣された作業トレーナーが現地従業員に教えたり、また1980年代にMITが中心になって行った日本の製造業の強さの研究、などを通じて日本の製造業の重要な要素の一つとして日本国外でも広まりました。実際の事例は以下の通りです。トヨタ生産方式では、改善は基本概念の一つに数えられる。例えば、下記のような事例が挙げられ、トヨタ生産方式の様々なエピソードに深く関わっています。・改善活動により、作業者の知恵を生産設備に織り込むことで、同じ設備を使う他社に差をつける。・不足するものをすぐに買うのではなく、自分達で製作・改造することで、投資を抑制することを狙ったりする。"
      ]
    },
    {
      "_id": "リーン開発の現場_８",
      "message": "見える化（みえるか）とは、広義には可視化と同義ですが、狭義には可視化されづらい作業の可視化を指す経営上の手法として使用される言葉です。学術的な用語として確立した言葉ではないです。\nこの語は、もともと、企業活動の漠然とした部分を数値などの客観的に判断できる指標で把握するための可視化に対して用いられました。測れる化とも言います。ただし、今日では「可視化」全般に対して使われる例もあります。",
      "questions": [
        "見える化とは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "見える化（みえるか）とは、広義には可視化と同義ですが、狭義には可視化されづらい作業の可視化を指す経営上の手法として使用される言葉です。学術的な用語として確立した言葉ではないです。この語は、もともと、企業活動の漠然とした部分を数値などの客観的に判断できる指標で把握するための可視化に対して用いられました。測れる化とも言います。ただし、今日では「可視化」全般に対して使われる例もあります。"
      ]
    },
    {
      "_id": "リーン開発の現場_９",
      "message": "リーンソフトウェア開発は、具体的なプラクティスや体系的なフレームワークの形ではなく、ソフトウェア開発を実践するときの行動指針となるよう、以下の７つの原則を提示しています。詳しく知りたい原則をクリックしてください。\n<a class=\"linkedAsk\" href=\"リーンソフトウェア開発のムダを排除するとは何ですか\">原則1：ムダを排除する</a>\n<a class=\"linkedAsk\" href=\"リーンソフトウェア開発の知識を作り出すとは何ですか\">原則2：知識を作り出す</a>\n<a class=\"linkedAsk\" href=\"リーンソフトウェア開発の決定をできるだけ遅らせるとは何ですか\">原則3：決定をできるだけ遅らせる</a>\n<a class=\"linkedAsk\" href=\"リーンソフトウェア開発のできるだけ早く提供するとは何ですか\">原則4：できるだけ早く提供する</a>\n<a class=\"linkedAsk\" href=\"リーンソフトウェア開発の権限を移譲するとは何ですか\">原則5：権限を移譲する</a>\n<a class=\"linkedAsk\" href=\"リーンソフトウェア開発の全体を最適化するとは何ですか\">原則6：全体を最適化する</a>\n<a class=\"linkedAsk\" href=\"リーンソフトウェア開発の品質を作りこむとは何ですか\">原則7：品質を作りこむ</a>",
      "questions": [
        "リーンソフトウェア開発の７つの原則とは何ですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "リーンソフトウェア開発は、具体的なプラクティスや体系的なフレームワークの形ではなく、ソフトウェア開発を実践するときの行動指針となるよう、以下の７つの原則を提示しています。詳しく知りたい原則をクリックしてください。a class=linkedAsk href=リーンソフトウェア開発のムダを排除するとは何ですか原則1：ムダを排除する/aa class=linkedAsk href=リーンソフトウェア開発の知識を作り出すとは何ですか原則2：知識を作り出す/aa class=linkedAsk href=リーンソフトウェア開発の決定をできるだけ遅らせるとは何ですか原則3：決定をできるだけ遅らせる/aa class=linkedAsk href=リーンソフトウェア開発のできるだけ早く提供するとは何ですか原則4：できるだけ早く提供する/aa class=linkedAsk href=リーンソフトウェア開発の権限を移譲するとは何ですか原則5：権限を移譲する/aa class=linkedAsk href=リーンソフトウェア開発の全体を最適化するとは何ですか原則6：全体を最適化する/aa class=linkedAsk href=リーンソフトウェア開発の品質を作りこむとは何ですか原則7：品質を作りこむ/a"
      ]
    },
    {
      "_id": "リーン開発の現場_9_1",
      "message": "原則1：ムダを排除する\nソフトウェア開発でのムダとは、顧客に価値を提供しないもの、および顧客が必要としていないものを指します。アメリカの調査会社によると、ソフトウェアの機能の内、64%はほとんど使われていないか、まったく使われていないという調査結果が出ています。これはムダ以外の何物でもありません。\nなぜこんなことが起きるのでしょうか？それは、顧客も自分がどんなものが欲しいか分かっていないからです。実際に動くソフトウェアを見て初めて、自分が欲しいものではなかったと気づくのです。\nまた、顧客と開発チームとのコミュニケーションの問題で、要求が正しく理解されない場合もあります。そうなると、実際に顧客が必要としないものを作ってしまったり、作り込み過ぎてしまったりします。\n他にも、過度なタスクの切り替えによるオーバーヘッドや不具合による手戻りなど、ムダが発生する箇所は多々あります。\nこの問題は、インクリメンタルに少しずつプロジェクトを進めていくことで解決できます。一気に進めるのではなく、必要な部分から顧客と協力しつつ進めていくのです。",
      "questions": [
        "リーンソフトウェア開発のムダを排除するとは何ですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "原則1：ムダを排除するソフトウェア開発でのムダとは、顧客に価値を提供しないもの、および顧客が必要としていないものを指します。アメリカの調査会社によると、ソフトウェアの機能の内、64%はほとんど使われていないか、まったく使われていないという調査結果が出ています。これはムダ以外の何物でもありません。なぜこんなことが起きるのでしょうか？それは、顧客も自分がどんなものが欲しいか分かっていないからです。実際に動くソフトウェアを見て初めて、自分が欲しいものではなかったと気づくのです。また、顧客と開発チームとのコミュニケーションの問題で、要求が正しく理解されない場合もあります。そうなると、実際に顧客が必要としないものを作ってしまったり、作り込み過ぎてしまったりします。他にも、過度なタスクの切り替えによるオーバーヘッドや不具合による手戻りなど、ムダが発生する箇所は多々あります。この問題は、インクリメンタルに少しずつプロジェクトを進めていくことで解決できます。一気に進めるのではなく、必要な部分から顧客と協力しつつ進めていくのです。"
      ]
    },
    {
      "_id": "リーン開発の現場_9_2",
      "message": "原則2：知識を作り出す\nウォーターフォール型開発では、予定通りに進むことを前提としていますが、そううまくはいきません。ソフトウェア開発に同じプロジェクトは2つとなく、常に不確実性と隣り合わせです。いくら綿密に計画しても、スケジュール通りに進めるのは困難でしょう。\nそのため、プロジェクトそのものから知識を生み出すことが重要になります。たとえば、顧客からのフィードバックや開発のノウハウ、チームの生産能力などのメトリクスです。プロジェクト固有の知識を早期に得て、プロジェクトの不確実性を最小限に抑えましょう。",
      "questions": [
        "リーンソフトウェア開発の知識を作り出すとは何ですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "原則2：知識を作り出すウォーターフォール型開発では、予定通りに進むことを前提としていますが、そううまくはいきません。ソフトウェア開発に同じプロジェクトは2つとなく、常に不確実性と隣り合わせです。いくら綿密に計画しても、スケジュール通りに進めるのは困難でしょう。そのため、プロジェクトそのものから知識を生み出すことが重要になります。たとえば、顧客からのフィードバックや開発のノウハウ、チームの生産能力などのメトリクスです。プロジェクト固有の知識を早期に得て、プロジェクトの不確実性を最小限に抑えましょう。"
      ]
    },
    {
      "_id": "リーン開発の現場_9_3",
      "message": "原則3：決定をできるだけ遅らせる\nソフトウェア開発では、さまざまなトレードオフを選択しながら開発を進めていきます。場合によっては、決定をする際に十分な情報が得られていないこともあります。もし、その決断を先送りできるなら、より多くの情報を得た後で最善の決断を下せるでしょう。予測による決断ではなく、事実に基づいた決断であるほうが精度は高まります。このため、決定を遅らせることができる、変更可能なアーキテクチャにしておく必要があります。",
      "questions": [
        "リーンソフトウェア開発の決定をできるだけ遅らせるとは何ですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "原則3：決定をできるだけ遅らせるソフトウェア開発では、さまざまなトレードオフを選択しながら開発を進めていきます。場合によっては、決定をする際に十分な情報が得られていないこともあります。もし、その決断を先送りできるなら、より多くの情報を得た後で最善の決断を下せるでしょう。予測による決断ではなく、事実に基づいた決断であるほうが精度は高まります。このため、決定を遅らせることができる、変更可能なアーキテクチャにしておく必要があります。"
      ]
    },
    {
      "_id": "リーン開発の現場_9_4",
      "message": "原則4：できるだけ早く提供する\nムダを排除するためには、顧客からのフィードバックが欠かせません。ウォーターフォール型開発のように、プロジェクトの最終局面まで顧客からのフィードバックを得られないとしたら、大きなムダが発生することは容易に想像できます。そのため、できる限り早急に顧客にソフトウェアを提供する必要があります。\nそのためには、CI（継続的インテグレーション）とCD（継続的デリバリー）を行い、定期的に顧客にソフトウェアを提供できるよう、開発フローを構築しなければいけません。少しずつインクリメンタルに作業を行い、顧客からのフィードバックを得て、修正を最小限に抑えましょう。",
      "questions": [
        "リーンソフトウェア開発のできるだけ早く提供するとは何ですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "原則4：できるだけ早く提供するムダを排除するためには、顧客からのフィードバックが欠かせません。ウォーターフォール型開発のように、プロジェクトの最終局面まで顧客からのフィードバックを得られないとしたら、大きなムダが発生することは容易に想像できます。そのため、できる限り早急に顧客にソフトウェアを提供する必要があります。そのためには、CI（継続的インテグレーション）とCD（継続的デリバリー）を行い、定期的に顧客にソフトウェアを提供できるよう、開発フローを構築しなければいけません。少しずつインクリメンタルに作業を行い、顧客からのフィードバックを得て、修正を最小限に抑えましょう。"
      ]
    },
    {
      "_id": "リーン開発の現場_9_5",
      "message": "原則5：権限を移譲する\n企業によっては、上級SEのみに権限が与えられ、PGには技術的な決定権がない場合もあります。しかし、本当にソフトウェアの詳細を理解しているのは、他ならぬPGなどの実際に作業をする人達です。そういった人達に決定権を与えることで、ソフトウェアの設計が良くなります。自己組織化されたチームこそが最高の結果を生み出すことができるのです。\n",
      "questions": [
        "リーンソフトウェア開発の権限を移譲するとは何ですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "原則5：権限を移譲する企業によっては、上級SEのみに権限が与えられ、PGには技術的な決定権がない場合もあります。しかし、本当にソフトウェアの詳細を理解しているのは、他ならぬPGなどの実際に作業をする人達です。そういった人達に決定権を与えることで、ソフトウェアの設計が良くなります。自己組織化されたチームこそが最高の結果を生み出すことができるのです。"
      ]
    },
    {
      "_id": "リーン開発の現場_9_6",
      "message": "原則6：全体を最適化する\n最終的な目標は、ソフトウェアを完成させることではありません。完成したソフトウェアが価値を生まなければまったく無意味です。そのため、ソフトウェアのみを考えるのではなく、顧客のビジネスの一部としてソフトウェアを捉え、本当にビジネスに役立つものにしなければいけません。方法としては、「バリューストリームマップ」を作成して、どこを改善するべきなのか検討するとよいでしょう。",
      "questions": [
        "リーンソフトウェア開発の全体を最適化するとは何ですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "原則6：全体を最適化する最終的な目標は、ソフトウェアを完成させることではありません。完成したソフトウェアが価値を生まなければまったく無意味です。そのため、ソフトウェアのみを考えるのではなく、顧客のビジネスの一部としてソフトウェアを捉え、本当にビジネスに役立つものにしなければいけません。方法としては、「バリューストリームマップ」を作成して、どこを改善するべきなのか検討するとよいでしょう。"
      ]
    },
    {
      "_id": "リーン開発の現場_9_7",
      "message": "原則7：品質を作りこむ\n不具合は発見が遅れるほど、修正するコストが増大していきます。実装してすぐの場合と運用を開始してからでは、修正するコストに6倍以上の差が生まれるという調査結果が出ています。早急に不具合を見つけることが、時間のムダを避けることにつながります。CIやTDD（テスト駆動開発）を行い、不具合を早急に発見して、品質を一定に保ちましょう。",
      "questions": [
        "リーンソフトウェア開発の品質を作りこむとは何ですか",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "原則7：品質を作りこむ不具合は発見が遅れるほど、修正するコストが増大していきます。実装してすぐの場合と運用を開始してからでは、修正するコストに6倍以上の差が生まれるという調査結果が出ています。早急に不具合を見つけることが、時間のムダを避けることにつながります。CIやTDD（テスト駆動開発）を行い、不具合を早急に発見して、品質を一定に保ちましょう。"
      ]
    }
  ]
}